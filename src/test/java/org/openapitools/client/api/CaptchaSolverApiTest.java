/*
 * Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost;
import org.openapitools.client.model.BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost;
import org.openapitools.client.model.BodyHcaptchaApiV1CaptchaHcaptchaPost;
import org.openapitools.client.model.BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post;
import org.openapitools.client.model.BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post;
import org.openapitools.client.model.BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost;
import org.openapitools.client.model.HttpValidationError;
import org.openapitools.client.model.ResponseModel;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CaptchaSolverApi
 */
@Ignore
public class CaptchaSolverApiTest {

    private final CaptchaSolverApi api = new CaptchaSolverApi();

    
    /**
     * Amazon Captcha Solver/Amazon验证码解决器
     *
     * # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.amazon.com/\&quot; proxy &#x3D; None
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void amazonCaptchaApiV1CaptchaAmazonCaptchaPostTest() throws ApiException {
        BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost = null;
        ResponseModel response = api.amazonCaptchaApiV1CaptchaAmazonCaptchaPost(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost);

        // TODO: test validations
    }
    
    /**
     * Amazon Captcha Solver/Amazon验证码解决器
     *
     * # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.amazon.com/\&quot; proxy &#x3D; None
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void amazonCaptchaApiV1CaptchaAmazonCaptchaPost_0Test() throws ApiException {
        BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost = null;
        ResponseModel response = api.amazonCaptchaApiV1CaptchaAmazonCaptchaPost_0(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost);

        // TODO: test validations
    }
    
    /**
     * Cloudflare Turnstile Solver/Cloudflare Turnstile解决器
     *
     * # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;1x00000000000000000000AA\&quot; url &#x3D; \&quot;https://demo.turnstile.workers.dev\&quot; proxy &#x3D; None
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePostTest() throws ApiException {
        BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost = null;
        ResponseModel response = api.cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost);

        // TODO: test validations
    }
    
    /**
     * Cloudflare Turnstile Solver/Cloudflare Turnstile解决器
     *
     * # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;1x00000000000000000000AA\&quot; url &#x3D; \&quot;https://demo.turnstile.workers.dev\&quot; proxy &#x3D; None
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_0Test() throws ApiException {
        BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost = null;
        ResponseModel response = api.cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_0(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost);

        // TODO: test validations
    }
    
    /**
     * hCaptcha Solver/hCaptcha解决器
     *
     * # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;10000000-ffff-ffff-ffff-000000000001\&quot; url &#x3D; \&quot;https://www.hcaptcha.com/\&quot; proxy &#x3D; None
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hcaptchaApiV1CaptchaHcaptchaPostTest() throws ApiException {
        BodyHcaptchaApiV1CaptchaHcaptchaPost bodyHcaptchaApiV1CaptchaHcaptchaPost = null;
        ResponseModel response = api.hcaptchaApiV1CaptchaHcaptchaPost(bodyHcaptchaApiV1CaptchaHcaptchaPost);

        // TODO: test validations
    }
    
    /**
     * hCaptcha Solver/hCaptcha解决器
     *
     * # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;10000000-ffff-ffff-ffff-000000000001\&quot; url &#x3D; \&quot;https://www.hcaptcha.com/\&quot; proxy &#x3D; None
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void hcaptchaApiV1CaptchaHcaptchaPost_0Test() throws ApiException {
        BodyHcaptchaApiV1CaptchaHcaptchaPost bodyHcaptchaApiV1CaptchaHcaptchaPost = null;
        ResponseModel response = api.hcaptchaApiV1CaptchaHcaptchaPost_0(bodyHcaptchaApiV1CaptchaHcaptchaPost);

        // TODO: test validations
    }
    
    /**
     * Recaptcha V2 Solver/Recaptcha V2解决器
     *
     * # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void recaptchaV2ApiV1CaptchaRecaptchaV2PostTest() throws ApiException {
        BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post = null;
        ResponseModel response = api.recaptchaV2ApiV1CaptchaRecaptchaV2Post(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post);

        // TODO: test validations
    }
    
    /**
     * Recaptcha V2 Solver/Recaptcha V2解决器
     *
     * # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void recaptchaV2ApiV1CaptchaRecaptchaV2Post_0Test() throws ApiException {
        BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post = null;
        ResponseModel response = api.recaptchaV2ApiV1CaptchaRecaptchaV2Post_0(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post);

        // TODO: test validations
    }
    
    /**
     * Recaptcha V3 Solver/Recaptcha V3解决器
     *
     * # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void recaptchaV3ApiV1CaptchaRecaptchaV3PostTest() throws ApiException {
        BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post = null;
        ResponseModel response = api.recaptchaV3ApiV1CaptchaRecaptchaV3Post(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post);

        // TODO: test validations
    }
    
    /**
     * Recaptcha V3 Solver/Recaptcha V3解决器
     *
     * # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void recaptchaV3ApiV1CaptchaRecaptchaV3Post_0Test() throws ApiException {
        BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post = null;
        ResponseModel response = api.recaptchaV3ApiV1CaptchaRecaptchaV3Post_0(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post);

        // TODO: test validations
    }
    
    /**
     * Tencent Captcha Solver/Tencent验证码解决器
     *
     * # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.tencent.com/\&quot; proxy &#x3D; None
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tencentCaptchaApiV1CaptchaTencentCaptchaPostTest() throws ApiException {
        BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost = null;
        ResponseModel response = api.tencentCaptchaApiV1CaptchaTencentCaptchaPost(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost);

        // TODO: test validations
    }
    
    /**
     * Tencent Captcha Solver/Tencent验证码解决器
     *
     * # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.tencent.com/\&quot; proxy &#x3D; None
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tencentCaptchaApiV1CaptchaTencentCaptchaPost_0Test() throws ApiException {
        BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost = null;
        ResponseModel response = api.tencentCaptchaApiV1CaptchaTencentCaptchaPost_0(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost);

        // TODO: test validations
    }
    
}
