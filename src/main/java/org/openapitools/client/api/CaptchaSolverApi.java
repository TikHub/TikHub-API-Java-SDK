/*
 * Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost;
import org.openapitools.client.model.BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost;
import org.openapitools.client.model.BodyHcaptchaApiV1CaptchaHcaptchaPost;
import org.openapitools.client.model.BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post;
import org.openapitools.client.model.BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post;
import org.openapitools.client.model.BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost;
import org.openapitools.client.model.HttpValidationError;
import org.openapitools.client.model.ResponseModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CaptchaSolverApi {
    private ApiClient localVarApiClient;

    public CaptchaSolverApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CaptchaSolverApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for amazonCaptchaApiV1CaptchaAmazonCaptchaPost
     * @param bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonCaptchaApiV1CaptchaAmazonCaptchaPostCall(BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost;

        // create path and map variables
        String localVarPath = "/api/v1/captcha/amazon_captcha";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amazonCaptchaApiV1CaptchaAmazonCaptchaPostValidateBeforeCall(BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = amazonCaptchaApiV1CaptchaAmazonCaptchaPostCall(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, _callback);
        return localVarCall;

    }

    /**
     * Amazon Captcha Solver/Amazon验证码解决器
     * # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.amazon.com/\&quot; proxy &#x3D; None
     * @param bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel amazonCaptchaApiV1CaptchaAmazonCaptchaPost(BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = amazonCaptchaApiV1CaptchaAmazonCaptchaPostWithHttpInfo(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost);
        return localVarResp.getData();
    }

    /**
     * Amazon Captcha Solver/Amazon验证码解决器
     * # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.amazon.com/\&quot; proxy &#x3D; None
     * @param bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> amazonCaptchaApiV1CaptchaAmazonCaptchaPostWithHttpInfo(BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost) throws ApiException {
        okhttp3.Call localVarCall = amazonCaptchaApiV1CaptchaAmazonCaptchaPostValidateBeforeCall(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Amazon Captcha Solver/Amazon验证码解决器 (asynchronously)
     * # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.amazon.com/\&quot; proxy &#x3D; None
     * @param bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonCaptchaApiV1CaptchaAmazonCaptchaPostAsync(BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = amazonCaptchaApiV1CaptchaAmazonCaptchaPostValidateBeforeCall(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for amazonCaptchaApiV1CaptchaAmazonCaptchaPost_0
     * @param bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonCaptchaApiV1CaptchaAmazonCaptchaPost_0Call(BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost;

        // create path and map variables
        String localVarPath = "/api/v1/captcha/amazon_captcha";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amazonCaptchaApiV1CaptchaAmazonCaptchaPost_0ValidateBeforeCall(BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = amazonCaptchaApiV1CaptchaAmazonCaptchaPost_0Call(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, _callback);
        return localVarCall;

    }

    /**
     * Amazon Captcha Solver/Amazon验证码解决器
     * # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.amazon.com/\&quot; proxy &#x3D; None
     * @param bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel amazonCaptchaApiV1CaptchaAmazonCaptchaPost_0(BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = amazonCaptchaApiV1CaptchaAmazonCaptchaPost_0WithHttpInfo(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost);
        return localVarResp.getData();
    }

    /**
     * Amazon Captcha Solver/Amazon验证码解决器
     * # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.amazon.com/\&quot; proxy &#x3D; None
     * @param bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> amazonCaptchaApiV1CaptchaAmazonCaptchaPost_0WithHttpInfo(BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost) throws ApiException {
        okhttp3.Call localVarCall = amazonCaptchaApiV1CaptchaAmazonCaptchaPost_0ValidateBeforeCall(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Amazon Captcha Solver/Amazon验证码解决器 (asynchronously)
     * # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.amazon.com/\&quot; proxy &#x3D; None
     * @param bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonCaptchaApiV1CaptchaAmazonCaptchaPost_0Async(BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = amazonCaptchaApiV1CaptchaAmazonCaptchaPost_0ValidateBeforeCall(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost
     * @param bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePostCall(BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost;

        // create path and map variables
        String localVarPath = "/api/v1/captcha/cloudflare_turnstile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePostValidateBeforeCall(BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePostCall(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, _callback);
        return localVarCall;

    }

    /**
     * Cloudflare Turnstile Solver/Cloudflare Turnstile解决器
     * # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;1x00000000000000000000AA\&quot; url &#x3D; \&quot;https://demo.turnstile.workers.dev\&quot; proxy &#x3D; None
     * @param bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost(BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePostWithHttpInfo(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost);
        return localVarResp.getData();
    }

    /**
     * Cloudflare Turnstile Solver/Cloudflare Turnstile解决器
     * # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;1x00000000000000000000AA\&quot; url &#x3D; \&quot;https://demo.turnstile.workers.dev\&quot; proxy &#x3D; None
     * @param bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePostWithHttpInfo(BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost) throws ApiException {
        okhttp3.Call localVarCall = cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePostValidateBeforeCall(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cloudflare Turnstile Solver/Cloudflare Turnstile解决器 (asynchronously)
     * # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;1x00000000000000000000AA\&quot; url &#x3D; \&quot;https://demo.turnstile.workers.dev\&quot; proxy &#x3D; None
     * @param bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePostAsync(BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePostValidateBeforeCall(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_0
     * @param bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_0Call(BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost;

        // create path and map variables
        String localVarPath = "/api/v1/captcha/cloudflare_turnstile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_0ValidateBeforeCall(BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_0Call(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, _callback);
        return localVarCall;

    }

    /**
     * Cloudflare Turnstile Solver/Cloudflare Turnstile解决器
     * # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;1x00000000000000000000AA\&quot; url &#x3D; \&quot;https://demo.turnstile.workers.dev\&quot; proxy &#x3D; None
     * @param bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_0(BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_0WithHttpInfo(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost);
        return localVarResp.getData();
    }

    /**
     * Cloudflare Turnstile Solver/Cloudflare Turnstile解决器
     * # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;1x00000000000000000000AA\&quot; url &#x3D; \&quot;https://demo.turnstile.workers.dev\&quot; proxy &#x3D; None
     * @param bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_0WithHttpInfo(BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost) throws ApiException {
        okhttp3.Call localVarCall = cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_0ValidateBeforeCall(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cloudflare Turnstile Solver/Cloudflare Turnstile解决器 (asynchronously)
     * # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;1x00000000000000000000AA\&quot; url &#x3D; \&quot;https://demo.turnstile.workers.dev\&quot; proxy &#x3D; None
     * @param bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_0Async(BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_0ValidateBeforeCall(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hcaptchaApiV1CaptchaHcaptchaPost
     * @param bodyHcaptchaApiV1CaptchaHcaptchaPost  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hcaptchaApiV1CaptchaHcaptchaPostCall(BodyHcaptchaApiV1CaptchaHcaptchaPost bodyHcaptchaApiV1CaptchaHcaptchaPost, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = bodyHcaptchaApiV1CaptchaHcaptchaPost;

        // create path and map variables
        String localVarPath = "/api/v1/captcha/hcaptcha";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hcaptchaApiV1CaptchaHcaptchaPostValidateBeforeCall(BodyHcaptchaApiV1CaptchaHcaptchaPost bodyHcaptchaApiV1CaptchaHcaptchaPost, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = hcaptchaApiV1CaptchaHcaptchaPostCall(bodyHcaptchaApiV1CaptchaHcaptchaPost, _callback);
        return localVarCall;

    }

    /**
     * hCaptcha Solver/hCaptcha解决器
     * # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;10000000-ffff-ffff-ffff-000000000001\&quot; url &#x3D; \&quot;https://www.hcaptcha.com/\&quot; proxy &#x3D; None
     * @param bodyHcaptchaApiV1CaptchaHcaptchaPost  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel hcaptchaApiV1CaptchaHcaptchaPost(BodyHcaptchaApiV1CaptchaHcaptchaPost bodyHcaptchaApiV1CaptchaHcaptchaPost) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = hcaptchaApiV1CaptchaHcaptchaPostWithHttpInfo(bodyHcaptchaApiV1CaptchaHcaptchaPost);
        return localVarResp.getData();
    }

    /**
     * hCaptcha Solver/hCaptcha解决器
     * # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;10000000-ffff-ffff-ffff-000000000001\&quot; url &#x3D; \&quot;https://www.hcaptcha.com/\&quot; proxy &#x3D; None
     * @param bodyHcaptchaApiV1CaptchaHcaptchaPost  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> hcaptchaApiV1CaptchaHcaptchaPostWithHttpInfo(BodyHcaptchaApiV1CaptchaHcaptchaPost bodyHcaptchaApiV1CaptchaHcaptchaPost) throws ApiException {
        okhttp3.Call localVarCall = hcaptchaApiV1CaptchaHcaptchaPostValidateBeforeCall(bodyHcaptchaApiV1CaptchaHcaptchaPost, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * hCaptcha Solver/hCaptcha解决器 (asynchronously)
     * # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;10000000-ffff-ffff-ffff-000000000001\&quot; url &#x3D; \&quot;https://www.hcaptcha.com/\&quot; proxy &#x3D; None
     * @param bodyHcaptchaApiV1CaptchaHcaptchaPost  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hcaptchaApiV1CaptchaHcaptchaPostAsync(BodyHcaptchaApiV1CaptchaHcaptchaPost bodyHcaptchaApiV1CaptchaHcaptchaPost, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = hcaptchaApiV1CaptchaHcaptchaPostValidateBeforeCall(bodyHcaptchaApiV1CaptchaHcaptchaPost, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hcaptchaApiV1CaptchaHcaptchaPost_0
     * @param bodyHcaptchaApiV1CaptchaHcaptchaPost  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hcaptchaApiV1CaptchaHcaptchaPost_0Call(BodyHcaptchaApiV1CaptchaHcaptchaPost bodyHcaptchaApiV1CaptchaHcaptchaPost, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = bodyHcaptchaApiV1CaptchaHcaptchaPost;

        // create path and map variables
        String localVarPath = "/api/v1/captcha/hcaptcha";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hcaptchaApiV1CaptchaHcaptchaPost_0ValidateBeforeCall(BodyHcaptchaApiV1CaptchaHcaptchaPost bodyHcaptchaApiV1CaptchaHcaptchaPost, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = hcaptchaApiV1CaptchaHcaptchaPost_0Call(bodyHcaptchaApiV1CaptchaHcaptchaPost, _callback);
        return localVarCall;

    }

    /**
     * hCaptcha Solver/hCaptcha解决器
     * # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;10000000-ffff-ffff-ffff-000000000001\&quot; url &#x3D; \&quot;https://www.hcaptcha.com/\&quot; proxy &#x3D; None
     * @param bodyHcaptchaApiV1CaptchaHcaptchaPost  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel hcaptchaApiV1CaptchaHcaptchaPost_0(BodyHcaptchaApiV1CaptchaHcaptchaPost bodyHcaptchaApiV1CaptchaHcaptchaPost) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = hcaptchaApiV1CaptchaHcaptchaPost_0WithHttpInfo(bodyHcaptchaApiV1CaptchaHcaptchaPost);
        return localVarResp.getData();
    }

    /**
     * hCaptcha Solver/hCaptcha解决器
     * # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;10000000-ffff-ffff-ffff-000000000001\&quot; url &#x3D; \&quot;https://www.hcaptcha.com/\&quot; proxy &#x3D; None
     * @param bodyHcaptchaApiV1CaptchaHcaptchaPost  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> hcaptchaApiV1CaptchaHcaptchaPost_0WithHttpInfo(BodyHcaptchaApiV1CaptchaHcaptchaPost bodyHcaptchaApiV1CaptchaHcaptchaPost) throws ApiException {
        okhttp3.Call localVarCall = hcaptchaApiV1CaptchaHcaptchaPost_0ValidateBeforeCall(bodyHcaptchaApiV1CaptchaHcaptchaPost, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * hCaptcha Solver/hCaptcha解决器 (asynchronously)
     * # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;10000000-ffff-ffff-ffff-000000000001\&quot; url &#x3D; \&quot;https://www.hcaptcha.com/\&quot; proxy &#x3D; None
     * @param bodyHcaptchaApiV1CaptchaHcaptchaPost  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hcaptchaApiV1CaptchaHcaptchaPost_0Async(BodyHcaptchaApiV1CaptchaHcaptchaPost bodyHcaptchaApiV1CaptchaHcaptchaPost, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = hcaptchaApiV1CaptchaHcaptchaPost_0ValidateBeforeCall(bodyHcaptchaApiV1CaptchaHcaptchaPost, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recaptchaV2ApiV1CaptchaRecaptchaV2Post
     * @param bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recaptchaV2ApiV1CaptchaRecaptchaV2PostCall(BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post;

        // create path and map variables
        String localVarPath = "/api/v1/captcha/recaptcha_v2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recaptchaV2ApiV1CaptchaRecaptchaV2PostValidateBeforeCall(BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = recaptchaV2ApiV1CaptchaRecaptchaV2PostCall(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, _callback);
        return localVarCall;

    }

    /**
     * Recaptcha V2 Solver/Recaptcha V2解决器
     * # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
     * @param bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel recaptchaV2ApiV1CaptchaRecaptchaV2Post(BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = recaptchaV2ApiV1CaptchaRecaptchaV2PostWithHttpInfo(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post);
        return localVarResp.getData();
    }

    /**
     * Recaptcha V2 Solver/Recaptcha V2解决器
     * # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
     * @param bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> recaptchaV2ApiV1CaptchaRecaptchaV2PostWithHttpInfo(BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post) throws ApiException {
        okhttp3.Call localVarCall = recaptchaV2ApiV1CaptchaRecaptchaV2PostValidateBeforeCall(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recaptcha V2 Solver/Recaptcha V2解决器 (asynchronously)
     * # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
     * @param bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recaptchaV2ApiV1CaptchaRecaptchaV2PostAsync(BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = recaptchaV2ApiV1CaptchaRecaptchaV2PostValidateBeforeCall(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recaptchaV2ApiV1CaptchaRecaptchaV2Post_0
     * @param bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recaptchaV2ApiV1CaptchaRecaptchaV2Post_0Call(BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post;

        // create path and map variables
        String localVarPath = "/api/v1/captcha/recaptcha_v2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recaptchaV2ApiV1CaptchaRecaptchaV2Post_0ValidateBeforeCall(BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = recaptchaV2ApiV1CaptchaRecaptchaV2Post_0Call(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, _callback);
        return localVarCall;

    }

    /**
     * Recaptcha V2 Solver/Recaptcha V2解决器
     * # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
     * @param bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel recaptchaV2ApiV1CaptchaRecaptchaV2Post_0(BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = recaptchaV2ApiV1CaptchaRecaptchaV2Post_0WithHttpInfo(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post);
        return localVarResp.getData();
    }

    /**
     * Recaptcha V2 Solver/Recaptcha V2解决器
     * # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
     * @param bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> recaptchaV2ApiV1CaptchaRecaptchaV2Post_0WithHttpInfo(BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post) throws ApiException {
        okhttp3.Call localVarCall = recaptchaV2ApiV1CaptchaRecaptchaV2Post_0ValidateBeforeCall(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recaptcha V2 Solver/Recaptcha V2解决器 (asynchronously)
     * # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
     * @param bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recaptchaV2ApiV1CaptchaRecaptchaV2Post_0Async(BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = recaptchaV2ApiV1CaptchaRecaptchaV2Post_0ValidateBeforeCall(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recaptchaV3ApiV1CaptchaRecaptchaV3Post
     * @param bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recaptchaV3ApiV1CaptchaRecaptchaV3PostCall(BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post;

        // create path and map variables
        String localVarPath = "/api/v1/captcha/recaptcha_v3";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recaptchaV3ApiV1CaptchaRecaptchaV3PostValidateBeforeCall(BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = recaptchaV3ApiV1CaptchaRecaptchaV3PostCall(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, _callback);
        return localVarCall;

    }

    /**
     * Recaptcha V3 Solver/Recaptcha V3解决器
     * # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
     * @param bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel recaptchaV3ApiV1CaptchaRecaptchaV3Post(BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = recaptchaV3ApiV1CaptchaRecaptchaV3PostWithHttpInfo(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post);
        return localVarResp.getData();
    }

    /**
     * Recaptcha V3 Solver/Recaptcha V3解决器
     * # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
     * @param bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> recaptchaV3ApiV1CaptchaRecaptchaV3PostWithHttpInfo(BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post) throws ApiException {
        okhttp3.Call localVarCall = recaptchaV3ApiV1CaptchaRecaptchaV3PostValidateBeforeCall(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recaptcha V3 Solver/Recaptcha V3解决器 (asynchronously)
     * # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
     * @param bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recaptchaV3ApiV1CaptchaRecaptchaV3PostAsync(BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = recaptchaV3ApiV1CaptchaRecaptchaV3PostValidateBeforeCall(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recaptchaV3ApiV1CaptchaRecaptchaV3Post_0
     * @param bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recaptchaV3ApiV1CaptchaRecaptchaV3Post_0Call(BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post;

        // create path and map variables
        String localVarPath = "/api/v1/captcha/recaptcha_v3";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recaptchaV3ApiV1CaptchaRecaptchaV3Post_0ValidateBeforeCall(BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = recaptchaV3ApiV1CaptchaRecaptchaV3Post_0Call(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, _callback);
        return localVarCall;

    }

    /**
     * Recaptcha V3 Solver/Recaptcha V3解决器
     * # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
     * @param bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel recaptchaV3ApiV1CaptchaRecaptchaV3Post_0(BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = recaptchaV3ApiV1CaptchaRecaptchaV3Post_0WithHttpInfo(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post);
        return localVarResp.getData();
    }

    /**
     * Recaptcha V3 Solver/Recaptcha V3解决器
     * # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
     * @param bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> recaptchaV3ApiV1CaptchaRecaptchaV3Post_0WithHttpInfo(BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post) throws ApiException {
        okhttp3.Call localVarCall = recaptchaV3ApiV1CaptchaRecaptchaV3Post_0ValidateBeforeCall(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recaptcha V3 Solver/Recaptcha V3解决器 (asynchronously)
     * # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey &#x3D; \&quot;6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\&quot; url &#x3D; \&quot;https://www.google.com/recaptcha/api2/demo\&quot; proxy &#x3D; None
     * @param bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recaptchaV3ApiV1CaptchaRecaptchaV3Post_0Async(BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = recaptchaV3ApiV1CaptchaRecaptchaV3Post_0ValidateBeforeCall(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tencentCaptchaApiV1CaptchaTencentCaptchaPost
     * @param bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tencentCaptchaApiV1CaptchaTencentCaptchaPostCall(BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost;

        // create path and map variables
        String localVarPath = "/api/v1/captcha/tencent_captcha";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tencentCaptchaApiV1CaptchaTencentCaptchaPostValidateBeforeCall(BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = tencentCaptchaApiV1CaptchaTencentCaptchaPostCall(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, _callback);
        return localVarCall;

    }

    /**
     * Tencent Captcha Solver/Tencent验证码解决器
     * # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.tencent.com/\&quot; proxy &#x3D; None
     * @param bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel tencentCaptchaApiV1CaptchaTencentCaptchaPost(BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = tencentCaptchaApiV1CaptchaTencentCaptchaPostWithHttpInfo(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost);
        return localVarResp.getData();
    }

    /**
     * Tencent Captcha Solver/Tencent验证码解决器
     * # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.tencent.com/\&quot; proxy &#x3D; None
     * @param bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> tencentCaptchaApiV1CaptchaTencentCaptchaPostWithHttpInfo(BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost) throws ApiException {
        okhttp3.Call localVarCall = tencentCaptchaApiV1CaptchaTencentCaptchaPostValidateBeforeCall(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tencent Captcha Solver/Tencent验证码解决器 (asynchronously)
     * # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.tencent.com/\&quot; proxy &#x3D; None
     * @param bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tencentCaptchaApiV1CaptchaTencentCaptchaPostAsync(BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = tencentCaptchaApiV1CaptchaTencentCaptchaPostValidateBeforeCall(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tencentCaptchaApiV1CaptchaTencentCaptchaPost_0
     * @param bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tencentCaptchaApiV1CaptchaTencentCaptchaPost_0Call(BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost;

        // create path and map variables
        String localVarPath = "/api/v1/captcha/tencent_captcha";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tencentCaptchaApiV1CaptchaTencentCaptchaPost_0ValidateBeforeCall(BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = tencentCaptchaApiV1CaptchaTencentCaptchaPost_0Call(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, _callback);
        return localVarCall;

    }

    /**
     * Tencent Captcha Solver/Tencent验证码解决器
     * # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.tencent.com/\&quot; proxy &#x3D; None
     * @param bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel tencentCaptchaApiV1CaptchaTencentCaptchaPost_0(BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = tencentCaptchaApiV1CaptchaTencentCaptchaPost_0WithHttpInfo(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost);
        return localVarResp.getData();
    }

    /**
     * Tencent Captcha Solver/Tencent验证码解决器
     * # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.tencent.com/\&quot; proxy &#x3D; None
     * @param bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> tencentCaptchaApiV1CaptchaTencentCaptchaPost_0WithHttpInfo(BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost) throws ApiException {
        okhttp3.Call localVarCall = tencentCaptchaApiV1CaptchaTencentCaptchaPost_0ValidateBeforeCall(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tencent Captcha Solver/Tencent验证码解决器 (asynchronously)
     * # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id &#x3D; \&quot;10000000\&quot; url &#x3D; \&quot;https://www.tencent.com/\&quot; proxy &#x3D; None
     * @param bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tencentCaptchaApiV1CaptchaTencentCaptchaPost_0Async(BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = tencentCaptchaApiV1CaptchaTencentCaptchaPost_0ValidateBeforeCall(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
