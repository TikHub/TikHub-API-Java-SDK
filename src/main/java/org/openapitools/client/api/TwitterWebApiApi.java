/*
 * Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HttpValidationError;
import org.openapitools.client.model.ResponseModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TwitterWebApiApi {
    private ApiClient localVarApiClient;

    public TwitterWebApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TwitterWebApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet
     * @param tweetId 推文ID/Tweet ID (required)
     * @param rankingModel 排序模式/Sorting mode (optional, default to &quot;Relevance&quot;)
     * @param cursor 游标/Cursor (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostCommentsApiV1TwitterWebFetchPostCommentsGetCall(String tweetId, String rankingModel, String cursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/twitter/web/fetch_post_comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tweetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tweetId", tweetId));
        }

        if (rankingModel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rankingModel", rankingModel));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPostCommentsApiV1TwitterWebFetchPostCommentsGetValidateBeforeCall(String tweetId, String rankingModel, String cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tweetId' is set
        if (tweetId == null) {
            throw new ApiException("Missing the required parameter 'tweetId' when calling fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchPostCommentsApiV1TwitterWebFetchPostCommentsGetCall(tweetId, rankingModel, cursor, _callback);
        return localVarCall;

    }

    /**
     * 获取评论/Get comments
     * # [中文] ### 用途: - 获取推文下的评论 ### 参数: - tweetId: 推文ID - rankingModel: 排序模式，默认为Relevance，其他可选值为Latest，Likes - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.threaded_conversation_with_injections_v2.instructions.[0].entries.[-1].content.itemContent.value ### 返回: - 评论  # [English] ### Purpose: - Get comments under the tweet ### Parameters: - tweetId: Tweet ID - rankingModel: Sorting mode, default is Relevance, other optional values are Latest, Likes - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.threaded_conversation_with_injections_v2.instructions.[0].entries.[-1].content.itemContent.value ### Return: - Comments  # [示例/Example] tweetId &#x3D; \&quot;1835124037934367098\&quot; rankingModel &#x3D; \&quot;Relevance\&quot; cursor &#x3D; None
     * @param tweetId 推文ID/Tweet ID (required)
     * @param rankingModel 排序模式/Sorting mode (optional, default to &quot;Relevance&quot;)
     * @param cursor 游标/Cursor (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet(String tweetId, String rankingModel, String cursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchPostCommentsApiV1TwitterWebFetchPostCommentsGetWithHttpInfo(tweetId, rankingModel, cursor);
        return localVarResp.getData();
    }

    /**
     * 获取评论/Get comments
     * # [中文] ### 用途: - 获取推文下的评论 ### 参数: - tweetId: 推文ID - rankingModel: 排序模式，默认为Relevance，其他可选值为Latest，Likes - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.threaded_conversation_with_injections_v2.instructions.[0].entries.[-1].content.itemContent.value ### 返回: - 评论  # [English] ### Purpose: - Get comments under the tweet ### Parameters: - tweetId: Tweet ID - rankingModel: Sorting mode, default is Relevance, other optional values are Latest, Likes - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.threaded_conversation_with_injections_v2.instructions.[0].entries.[-1].content.itemContent.value ### Return: - Comments  # [示例/Example] tweetId &#x3D; \&quot;1835124037934367098\&quot; rankingModel &#x3D; \&quot;Relevance\&quot; cursor &#x3D; None
     * @param tweetId 推文ID/Tweet ID (required)
     * @param rankingModel 排序模式/Sorting mode (optional, default to &quot;Relevance&quot;)
     * @param cursor 游标/Cursor (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchPostCommentsApiV1TwitterWebFetchPostCommentsGetWithHttpInfo(String tweetId, String rankingModel, String cursor) throws ApiException {
        okhttp3.Call localVarCall = fetchPostCommentsApiV1TwitterWebFetchPostCommentsGetValidateBeforeCall(tweetId, rankingModel, cursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取评论/Get comments (asynchronously)
     * # [中文] ### 用途: - 获取推文下的评论 ### 参数: - tweetId: 推文ID - rankingModel: 排序模式，默认为Relevance，其他可选值为Latest，Likes - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.threaded_conversation_with_injections_v2.instructions.[0].entries.[-1].content.itemContent.value ### 返回: - 评论  # [English] ### Purpose: - Get comments under the tweet ### Parameters: - tweetId: Tweet ID - rankingModel: Sorting mode, default is Relevance, other optional values are Latest, Likes - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.threaded_conversation_with_injections_v2.instructions.[0].entries.[-1].content.itemContent.value ### Return: - Comments  # [示例/Example] tweetId &#x3D; \&quot;1835124037934367098\&quot; rankingModel &#x3D; \&quot;Relevance\&quot; cursor &#x3D; None
     * @param tweetId 推文ID/Tweet ID (required)
     * @param rankingModel 排序模式/Sorting mode (optional, default to &quot;Relevance&quot;)
     * @param cursor 游标/Cursor (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostCommentsApiV1TwitterWebFetchPostCommentsGetAsync(String tweetId, String rankingModel, String cursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPostCommentsApiV1TwitterWebFetchPostCommentsGetValidateBeforeCall(tweetId, rankingModel, cursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_0
     * @param tweetId 推文ID/Tweet ID (required)
     * @param rankingModel 排序模式/Sorting mode (optional, default to &quot;Relevance&quot;)
     * @param cursor 游标/Cursor (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_0Call(String tweetId, String rankingModel, String cursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/twitter/web/fetch_post_comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tweetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tweetId", tweetId));
        }

        if (rankingModel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rankingModel", rankingModel));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_0ValidateBeforeCall(String tweetId, String rankingModel, String cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tweetId' is set
        if (tweetId == null) {
            throw new ApiException("Missing the required parameter 'tweetId' when calling fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_0Call(tweetId, rankingModel, cursor, _callback);
        return localVarCall;

    }

    /**
     * 获取评论/Get comments
     * # [中文] ### 用途: - 获取推文下的评论 ### 参数: - tweetId: 推文ID - rankingModel: 排序模式，默认为Relevance，其他可选值为Latest，Likes - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.threaded_conversation_with_injections_v2.instructions.[0].entries.[-1].content.itemContent.value ### 返回: - 评论  # [English] ### Purpose: - Get comments under the tweet ### Parameters: - tweetId: Tweet ID - rankingModel: Sorting mode, default is Relevance, other optional values are Latest, Likes - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.threaded_conversation_with_injections_v2.instructions.[0].entries.[-1].content.itemContent.value ### Return: - Comments  # [示例/Example] tweetId &#x3D; \&quot;1835124037934367098\&quot; rankingModel &#x3D; \&quot;Relevance\&quot; cursor &#x3D; None
     * @param tweetId 推文ID/Tweet ID (required)
     * @param rankingModel 排序模式/Sorting mode (optional, default to &quot;Relevance&quot;)
     * @param cursor 游标/Cursor (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_0(String tweetId, String rankingModel, String cursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_0WithHttpInfo(tweetId, rankingModel, cursor);
        return localVarResp.getData();
    }

    /**
     * 获取评论/Get comments
     * # [中文] ### 用途: - 获取推文下的评论 ### 参数: - tweetId: 推文ID - rankingModel: 排序模式，默认为Relevance，其他可选值为Latest，Likes - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.threaded_conversation_with_injections_v2.instructions.[0].entries.[-1].content.itemContent.value ### 返回: - 评论  # [English] ### Purpose: - Get comments under the tweet ### Parameters: - tweetId: Tweet ID - rankingModel: Sorting mode, default is Relevance, other optional values are Latest, Likes - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.threaded_conversation_with_injections_v2.instructions.[0].entries.[-1].content.itemContent.value ### Return: - Comments  # [示例/Example] tweetId &#x3D; \&quot;1835124037934367098\&quot; rankingModel &#x3D; \&quot;Relevance\&quot; cursor &#x3D; None
     * @param tweetId 推文ID/Tweet ID (required)
     * @param rankingModel 排序模式/Sorting mode (optional, default to &quot;Relevance&quot;)
     * @param cursor 游标/Cursor (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_0WithHttpInfo(String tweetId, String rankingModel, String cursor) throws ApiException {
        okhttp3.Call localVarCall = fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_0ValidateBeforeCall(tweetId, rankingModel, cursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取评论/Get comments (asynchronously)
     * # [中文] ### 用途: - 获取推文下的评论 ### 参数: - tweetId: 推文ID - rankingModel: 排序模式，默认为Relevance，其他可选值为Latest，Likes - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.threaded_conversation_with_injections_v2.instructions.[0].entries.[-1].content.itemContent.value ### 返回: - 评论  # [English] ### Purpose: - Get comments under the tweet ### Parameters: - tweetId: Tweet ID - rankingModel: Sorting mode, default is Relevance, other optional values are Latest, Likes - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.threaded_conversation_with_injections_v2.instructions.[0].entries.[-1].content.itemContent.value ### Return: - Comments  # [示例/Example] tweetId &#x3D; \&quot;1835124037934367098\&quot; rankingModel &#x3D; \&quot;Relevance\&quot; cursor &#x3D; None
     * @param tweetId 推文ID/Tweet ID (required)
     * @param rankingModel 排序模式/Sorting mode (optional, default to &quot;Relevance&quot;)
     * @param cursor 游标/Cursor (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_0Async(String tweetId, String rankingModel, String cursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_0ValidateBeforeCall(tweetId, rankingModel, cursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet
     * @param rawQuery 搜索关键字/Search Keyword (required)
     * @param count 数量/Count (optional, default to 20)
     * @param product 产品/Product (optional, default to &quot;Top&quot;)
     * @param cursor 游标/Cursor (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGetCall(String rawQuery, Integer count, String product, String cursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/twitter/web/fetch_search_timeline";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (rawQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rawQuery", rawQuery));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (product != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product", product));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGetValidateBeforeCall(String rawQuery, Integer count, String product, String cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rawQuery' is set
        if (rawQuery == null) {
            throw new ApiException("Missing the required parameter 'rawQuery' when calling fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGetCall(rawQuery, count, product, cursor, _callback);
        return localVarCall;

    }

    /**
     * 搜索/Search
     * # [中文] ### 用途: - 搜索 ### 参数: - rawQuery: 搜索关键字 - count: 数量，默认为20 - product: 产品，默认为Top，其他可选值为Latest，People，Media，Lists - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的最后一个item中获取     - JSONPath: $.data.data.search_by_raw_query.search_timeline.timeline.instructions.[0].entries.[-1].content.value ### 返回: - 搜索结果  # [English] ### Purpose: - Search ### Parameters: - rawQuery: Search keyword - count: Count, default is 20 - product: Product, default is Top, other optional values are Latest, People, Media, Lists - cursor: Cursor, default is None, used for paging, obtained from the last item in the last request     - JSONPath: $.data.search_by_raw_query.search_timeline.timeline.instructions.[0].entries.[-1].content.value ### Return: - Search results  # [示例/Example] rawQuery &#x3D; \&quot;Elon Musk\&quot; count &#x3D; 20 product &#x3D; \&quot;Top\&quot; cursor &#x3D; None
     * @param rawQuery 搜索关键字/Search Keyword (required)
     * @param count 数量/Count (optional, default to 20)
     * @param product 产品/Product (optional, default to &quot;Top&quot;)
     * @param cursor 游标/Cursor (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet(String rawQuery, Integer count, String product, String cursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGetWithHttpInfo(rawQuery, count, product, cursor);
        return localVarResp.getData();
    }

    /**
     * 搜索/Search
     * # [中文] ### 用途: - 搜索 ### 参数: - rawQuery: 搜索关键字 - count: 数量，默认为20 - product: 产品，默认为Top，其他可选值为Latest，People，Media，Lists - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的最后一个item中获取     - JSONPath: $.data.data.search_by_raw_query.search_timeline.timeline.instructions.[0].entries.[-1].content.value ### 返回: - 搜索结果  # [English] ### Purpose: - Search ### Parameters: - rawQuery: Search keyword - count: Count, default is 20 - product: Product, default is Top, other optional values are Latest, People, Media, Lists - cursor: Cursor, default is None, used for paging, obtained from the last item in the last request     - JSONPath: $.data.search_by_raw_query.search_timeline.timeline.instructions.[0].entries.[-1].content.value ### Return: - Search results  # [示例/Example] rawQuery &#x3D; \&quot;Elon Musk\&quot; count &#x3D; 20 product &#x3D; \&quot;Top\&quot; cursor &#x3D; None
     * @param rawQuery 搜索关键字/Search Keyword (required)
     * @param count 数量/Count (optional, default to 20)
     * @param product 产品/Product (optional, default to &quot;Top&quot;)
     * @param cursor 游标/Cursor (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGetWithHttpInfo(String rawQuery, Integer count, String product, String cursor) throws ApiException {
        okhttp3.Call localVarCall = fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGetValidateBeforeCall(rawQuery, count, product, cursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 搜索/Search (asynchronously)
     * # [中文] ### 用途: - 搜索 ### 参数: - rawQuery: 搜索关键字 - count: 数量，默认为20 - product: 产品，默认为Top，其他可选值为Latest，People，Media，Lists - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的最后一个item中获取     - JSONPath: $.data.data.search_by_raw_query.search_timeline.timeline.instructions.[0].entries.[-1].content.value ### 返回: - 搜索结果  # [English] ### Purpose: - Search ### Parameters: - rawQuery: Search keyword - count: Count, default is 20 - product: Product, default is Top, other optional values are Latest, People, Media, Lists - cursor: Cursor, default is None, used for paging, obtained from the last item in the last request     - JSONPath: $.data.search_by_raw_query.search_timeline.timeline.instructions.[0].entries.[-1].content.value ### Return: - Search results  # [示例/Example] rawQuery &#x3D; \&quot;Elon Musk\&quot; count &#x3D; 20 product &#x3D; \&quot;Top\&quot; cursor &#x3D; None
     * @param rawQuery 搜索关键字/Search Keyword (required)
     * @param count 数量/Count (optional, default to 20)
     * @param product 产品/Product (optional, default to &quot;Top&quot;)
     * @param cursor 游标/Cursor (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGetAsync(String rawQuery, Integer count, String product, String cursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGetValidateBeforeCall(rawQuery, count, product, cursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_0
     * @param rawQuery 搜索关键字/Search Keyword (required)
     * @param count 数量/Count (optional, default to 20)
     * @param product 产品/Product (optional, default to &quot;Top&quot;)
     * @param cursor 游标/Cursor (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_0Call(String rawQuery, Integer count, String product, String cursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/twitter/web/fetch_search_timeline";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (rawQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rawQuery", rawQuery));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (product != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product", product));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_0ValidateBeforeCall(String rawQuery, Integer count, String product, String cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'rawQuery' is set
        if (rawQuery == null) {
            throw new ApiException("Missing the required parameter 'rawQuery' when calling fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_0Call(rawQuery, count, product, cursor, _callback);
        return localVarCall;

    }

    /**
     * 搜索/Search
     * # [中文] ### 用途: - 搜索 ### 参数: - rawQuery: 搜索关键字 - count: 数量，默认为20 - product: 产品，默认为Top，其他可选值为Latest，People，Media，Lists - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的最后一个item中获取     - JSONPath: $.data.data.search_by_raw_query.search_timeline.timeline.instructions.[0].entries.[-1].content.value ### 返回: - 搜索结果  # [English] ### Purpose: - Search ### Parameters: - rawQuery: Search keyword - count: Count, default is 20 - product: Product, default is Top, other optional values are Latest, People, Media, Lists - cursor: Cursor, default is None, used for paging, obtained from the last item in the last request     - JSONPath: $.data.search_by_raw_query.search_timeline.timeline.instructions.[0].entries.[-1].content.value ### Return: - Search results  # [示例/Example] rawQuery &#x3D; \&quot;Elon Musk\&quot; count &#x3D; 20 product &#x3D; \&quot;Top\&quot; cursor &#x3D; None
     * @param rawQuery 搜索关键字/Search Keyword (required)
     * @param count 数量/Count (optional, default to 20)
     * @param product 产品/Product (optional, default to &quot;Top&quot;)
     * @param cursor 游标/Cursor (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_0(String rawQuery, Integer count, String product, String cursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_0WithHttpInfo(rawQuery, count, product, cursor);
        return localVarResp.getData();
    }

    /**
     * 搜索/Search
     * # [中文] ### 用途: - 搜索 ### 参数: - rawQuery: 搜索关键字 - count: 数量，默认为20 - product: 产品，默认为Top，其他可选值为Latest，People，Media，Lists - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的最后一个item中获取     - JSONPath: $.data.data.search_by_raw_query.search_timeline.timeline.instructions.[0].entries.[-1].content.value ### 返回: - 搜索结果  # [English] ### Purpose: - Search ### Parameters: - rawQuery: Search keyword - count: Count, default is 20 - product: Product, default is Top, other optional values are Latest, People, Media, Lists - cursor: Cursor, default is None, used for paging, obtained from the last item in the last request     - JSONPath: $.data.search_by_raw_query.search_timeline.timeline.instructions.[0].entries.[-1].content.value ### Return: - Search results  # [示例/Example] rawQuery &#x3D; \&quot;Elon Musk\&quot; count &#x3D; 20 product &#x3D; \&quot;Top\&quot; cursor &#x3D; None
     * @param rawQuery 搜索关键字/Search Keyword (required)
     * @param count 数量/Count (optional, default to 20)
     * @param product 产品/Product (optional, default to &quot;Top&quot;)
     * @param cursor 游标/Cursor (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_0WithHttpInfo(String rawQuery, Integer count, String product, String cursor) throws ApiException {
        okhttp3.Call localVarCall = fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_0ValidateBeforeCall(rawQuery, count, product, cursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 搜索/Search (asynchronously)
     * # [中文] ### 用途: - 搜索 ### 参数: - rawQuery: 搜索关键字 - count: 数量，默认为20 - product: 产品，默认为Top，其他可选值为Latest，People，Media，Lists - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的最后一个item中获取     - JSONPath: $.data.data.search_by_raw_query.search_timeline.timeline.instructions.[0].entries.[-1].content.value ### 返回: - 搜索结果  # [English] ### Purpose: - Search ### Parameters: - rawQuery: Search keyword - count: Count, default is 20 - product: Product, default is Top, other optional values are Latest, People, Media, Lists - cursor: Cursor, default is None, used for paging, obtained from the last item in the last request     - JSONPath: $.data.search_by_raw_query.search_timeline.timeline.instructions.[0].entries.[-1].content.value ### Return: - Search results  # [示例/Example] rawQuery &#x3D; \&quot;Elon Musk\&quot; count &#x3D; 20 product &#x3D; \&quot;Top\&quot; cursor &#x3D; None
     * @param rawQuery 搜索关键字/Search Keyword (required)
     * @param count 数量/Count (optional, default to 20)
     * @param product 产品/Product (optional, default to &quot;Top&quot;)
     * @param cursor 游标/Cursor (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_0Async(String rawQuery, Integer count, String product, String cursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_0ValidateBeforeCall(rawQuery, count, product, cursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet
     * @param focalTweetId 推文ID/Tweet ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTweetDetailApiV1TwitterWebFetchTweetDetailGetCall(String focalTweetId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/twitter/web/fetch_tweet_detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (focalTweetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("focalTweetId", focalTweetId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchTweetDetailApiV1TwitterWebFetchTweetDetailGetValidateBeforeCall(String focalTweetId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'focalTweetId' is set
        if (focalTweetId == null) {
            throw new ApiException("Missing the required parameter 'focalTweetId' when calling fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchTweetDetailApiV1TwitterWebFetchTweetDetailGetCall(focalTweetId, _callback);
        return localVarCall;

    }

    /**
     * 获取单个推文数据/Get single tweet data
     * # [中文] ### 用途: - 获取单个推文数据 ### 参数: - focalTweetId: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 ### 返回: - 推文数据  # [English] ### Purpose: - Get single tweet data ### Parameters: - focalTweetId: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 ### Return: - Tweet data  # [示例/Example] focalTweetId &#x3D; \&quot;1808168603721650364\&quot;
     * @param focalTweetId 推文ID/Tweet ID (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet(String focalTweetId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchTweetDetailApiV1TwitterWebFetchTweetDetailGetWithHttpInfo(focalTweetId);
        return localVarResp.getData();
    }

    /**
     * 获取单个推文数据/Get single tweet data
     * # [中文] ### 用途: - 获取单个推文数据 ### 参数: - focalTweetId: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 ### 返回: - 推文数据  # [English] ### Purpose: - Get single tweet data ### Parameters: - focalTweetId: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 ### Return: - Tweet data  # [示例/Example] focalTweetId &#x3D; \&quot;1808168603721650364\&quot;
     * @param focalTweetId 推文ID/Tweet ID (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchTweetDetailApiV1TwitterWebFetchTweetDetailGetWithHttpInfo(String focalTweetId) throws ApiException {
        okhttp3.Call localVarCall = fetchTweetDetailApiV1TwitterWebFetchTweetDetailGetValidateBeforeCall(focalTweetId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取单个推文数据/Get single tweet data (asynchronously)
     * # [中文] ### 用途: - 获取单个推文数据 ### 参数: - focalTweetId: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 ### 返回: - 推文数据  # [English] ### Purpose: - Get single tweet data ### Parameters: - focalTweetId: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 ### Return: - Tweet data  # [示例/Example] focalTweetId &#x3D; \&quot;1808168603721650364\&quot;
     * @param focalTweetId 推文ID/Tweet ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTweetDetailApiV1TwitterWebFetchTweetDetailGetAsync(String focalTweetId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchTweetDetailApiV1TwitterWebFetchTweetDetailGetValidateBeforeCall(focalTweetId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_0
     * @param focalTweetId 推文ID/Tweet ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_0Call(String focalTweetId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/twitter/web/fetch_tweet_detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (focalTweetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("focalTweetId", focalTweetId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_0ValidateBeforeCall(String focalTweetId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'focalTweetId' is set
        if (focalTweetId == null) {
            throw new ApiException("Missing the required parameter 'focalTweetId' when calling fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_0Call(focalTweetId, _callback);
        return localVarCall;

    }

    /**
     * 获取单个推文数据/Get single tweet data
     * # [中文] ### 用途: - 获取单个推文数据 ### 参数: - focalTweetId: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 ### 返回: - 推文数据  # [English] ### Purpose: - Get single tweet data ### Parameters: - focalTweetId: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 ### Return: - Tweet data  # [示例/Example] focalTweetId &#x3D; \&quot;1808168603721650364\&quot;
     * @param focalTweetId 推文ID/Tweet ID (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_0(String focalTweetId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_0WithHttpInfo(focalTweetId);
        return localVarResp.getData();
    }

    /**
     * 获取单个推文数据/Get single tweet data
     * # [中文] ### 用途: - 获取单个推文数据 ### 参数: - focalTweetId: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 ### 返回: - 推文数据  # [English] ### Purpose: - Get single tweet data ### Parameters: - focalTweetId: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 ### Return: - Tweet data  # [示例/Example] focalTweetId &#x3D; \&quot;1808168603721650364\&quot;
     * @param focalTweetId 推文ID/Tweet ID (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_0WithHttpInfo(String focalTweetId) throws ApiException {
        okhttp3.Call localVarCall = fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_0ValidateBeforeCall(focalTweetId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取单个推文数据/Get single tweet data (asynchronously)
     * # [中文] ### 用途: - 获取单个推文数据 ### 参数: - focalTweetId: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 ### 返回: - 推文数据  # [English] ### Purpose: - Get single tweet data ### Parameters: - focalTweetId: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 ### Return: - Tweet data  # [示例/Example] focalTweetId &#x3D; \&quot;1808168603721650364\&quot;
     * @param focalTweetId 推文ID/Tweet ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_0Async(String focalTweetId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_0ValidateBeforeCall(focalTweetId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGetCall(String userId, Integer count, String cursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/twitter/web/fetch_user_highlights_tweets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGetValidateBeforeCall(String userId, Integer count, String cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGetCall(userId, count, cursor, _callback);
        return localVarCall;

    }

    /**
     * 获取用户高光推文/Get user highlights tweets
     * # [中文] ### 用途: - 获取用户高光推文 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户高光推文  # [English] ### Purpose: - Get user highlights tweets ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User highlights tweets  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet(String userId, Integer count, String cursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGetWithHttpInfo(userId, count, cursor);
        return localVarResp.getData();
    }

    /**
     * 获取用户高光推文/Get user highlights tweets
     * # [中文] ### 用途: - 获取用户高光推文 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户高光推文  # [English] ### Purpose: - Get user highlights tweets ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User highlights tweets  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGetWithHttpInfo(String userId, Integer count, String cursor) throws ApiException {
        okhttp3.Call localVarCall = fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGetValidateBeforeCall(userId, count, cursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户高光推文/Get user highlights tweets (asynchronously)
     * # [中文] ### 用途: - 获取用户高光推文 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户高光推文  # [English] ### Purpose: - Get user highlights tweets ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User highlights tweets  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGetAsync(String userId, Integer count, String cursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGetValidateBeforeCall(userId, count, cursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_0
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_0Call(String userId, Integer count, String cursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/twitter/web/fetch_user_highlights_tweets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_0ValidateBeforeCall(String userId, Integer count, String cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_0Call(userId, count, cursor, _callback);
        return localVarCall;

    }

    /**
     * 获取用户高光推文/Get user highlights tweets
     * # [中文] ### 用途: - 获取用户高光推文 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户高光推文  # [English] ### Purpose: - Get user highlights tweets ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User highlights tweets  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_0(String userId, Integer count, String cursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_0WithHttpInfo(userId, count, cursor);
        return localVarResp.getData();
    }

    /**
     * 获取用户高光推文/Get user highlights tweets
     * # [中文] ### 用途: - 获取用户高光推文 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户高光推文  # [English] ### Purpose: - Get user highlights tweets ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User highlights tweets  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_0WithHttpInfo(String userId, Integer count, String cursor) throws ApiException {
        okhttp3.Call localVarCall = fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_0ValidateBeforeCall(userId, count, cursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户高光推文/Get user highlights tweets (asynchronously)
     * # [中文] ### 用途: - 获取用户高光推文 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户高光推文  # [English] ### Purpose: - Get user highlights tweets ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User highlights tweets  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_0Async(String userId, Integer count, String cursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_0ValidateBeforeCall(userId, count, cursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserMediaApiV1TwitterWebFetchUserMediaGet
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserMediaApiV1TwitterWebFetchUserMediaGetCall(String userId, Integer count, String cursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/twitter/web/fetch_user_media";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserMediaApiV1TwitterWebFetchUserMediaGetValidateBeforeCall(String userId, Integer count, String cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserMediaApiV1TwitterWebFetchUserMediaGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserMediaApiV1TwitterWebFetchUserMediaGetCall(userId, count, cursor, _callback);
        return localVarCall;

    }

    /**
     * 获取用户媒体/Get user media
     * # [中文] ### 用途: - 获取用户媒体 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[-1].entries.[-1].content.value ### 返回: - 用户媒体  # [English] ### Purpose: - Get user media ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[-1].entries.[-1].content.value ### Return: - User media  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserMediaApiV1TwitterWebFetchUserMediaGet(String userId, Integer count, String cursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserMediaApiV1TwitterWebFetchUserMediaGetWithHttpInfo(userId, count, cursor);
        return localVarResp.getData();
    }

    /**
     * 获取用户媒体/Get user media
     * # [中文] ### 用途: - 获取用户媒体 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[-1].entries.[-1].content.value ### 返回: - 用户媒体  # [English] ### Purpose: - Get user media ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[-1].entries.[-1].content.value ### Return: - User media  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserMediaApiV1TwitterWebFetchUserMediaGetWithHttpInfo(String userId, Integer count, String cursor) throws ApiException {
        okhttp3.Call localVarCall = fetchUserMediaApiV1TwitterWebFetchUserMediaGetValidateBeforeCall(userId, count, cursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户媒体/Get user media (asynchronously)
     * # [中文] ### 用途: - 获取用户媒体 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[-1].entries.[-1].content.value ### 返回: - 用户媒体  # [English] ### Purpose: - Get user media ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[-1].entries.[-1].content.value ### Return: - User media  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserMediaApiV1TwitterWebFetchUserMediaGetAsync(String userId, Integer count, String cursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserMediaApiV1TwitterWebFetchUserMediaGetValidateBeforeCall(userId, count, cursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserMediaApiV1TwitterWebFetchUserMediaGet_0
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserMediaApiV1TwitterWebFetchUserMediaGet_0Call(String userId, Integer count, String cursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/twitter/web/fetch_user_media";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserMediaApiV1TwitterWebFetchUserMediaGet_0ValidateBeforeCall(String userId, Integer count, String cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserMediaApiV1TwitterWebFetchUserMediaGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserMediaApiV1TwitterWebFetchUserMediaGet_0Call(userId, count, cursor, _callback);
        return localVarCall;

    }

    /**
     * 获取用户媒体/Get user media
     * # [中文] ### 用途: - 获取用户媒体 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[-1].entries.[-1].content.value ### 返回: - 用户媒体  # [English] ### Purpose: - Get user media ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[-1].entries.[-1].content.value ### Return: - User media  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserMediaApiV1TwitterWebFetchUserMediaGet_0(String userId, Integer count, String cursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserMediaApiV1TwitterWebFetchUserMediaGet_0WithHttpInfo(userId, count, cursor);
        return localVarResp.getData();
    }

    /**
     * 获取用户媒体/Get user media
     * # [中文] ### 用途: - 获取用户媒体 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[-1].entries.[-1].content.value ### 返回: - 用户媒体  # [English] ### Purpose: - Get user media ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[-1].entries.[-1].content.value ### Return: - User media  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserMediaApiV1TwitterWebFetchUserMediaGet_0WithHttpInfo(String userId, Integer count, String cursor) throws ApiException {
        okhttp3.Call localVarCall = fetchUserMediaApiV1TwitterWebFetchUserMediaGet_0ValidateBeforeCall(userId, count, cursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户媒体/Get user media (asynchronously)
     * # [中文] ### 用途: - 获取用户媒体 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[-1].entries.[-1].content.value ### 返回: - 用户媒体  # [English] ### Purpose: - Get user media ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[-1].entries.[-1].content.value ### Return: - User media  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserMediaApiV1TwitterWebFetchUserMediaGet_0Async(String userId, Integer count, String cursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserMediaApiV1TwitterWebFetchUserMediaGet_0ValidateBeforeCall(userId, count, cursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGetCall(String userId, Integer count, String cursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/twitter/web/fetch_user_post_tweet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGetValidateBeforeCall(String userId, Integer count, String cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGetCall(userId, count, cursor, _callback);
        return localVarCall;

    }

    /**
     * 获取用户发帖/Get user post
     * # [中文] ### 用途: - 获取用户发帖 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的$.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value获取 ### 返回: - 用户发帖  # [English] ### Purpose: - Get user post ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the $.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value of the last request ### Return: - User post  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet(String userId, Integer count, String cursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGetWithHttpInfo(userId, count, cursor);
        return localVarResp.getData();
    }

    /**
     * 获取用户发帖/Get user post
     * # [中文] ### 用途: - 获取用户发帖 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的$.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value获取 ### 返回: - 用户发帖  # [English] ### Purpose: - Get user post ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the $.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value of the last request ### Return: - User post  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGetWithHttpInfo(String userId, Integer count, String cursor) throws ApiException {
        okhttp3.Call localVarCall = fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGetValidateBeforeCall(userId, count, cursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户发帖/Get user post (asynchronously)
     * # [中文] ### 用途: - 获取用户发帖 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的$.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value获取 ### 返回: - 用户发帖  # [English] ### Purpose: - Get user post ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the $.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value of the last request ### Return: - User post  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGetAsync(String userId, Integer count, String cursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGetValidateBeforeCall(userId, count, cursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet_0
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet_0Call(String userId, Integer count, String cursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/twitter/web/fetch_user_post_tweet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet_0ValidateBeforeCall(String userId, Integer count, String cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet_0Call(userId, count, cursor, _callback);
        return localVarCall;

    }

    /**
     * 获取用户发帖/Get user post
     * # [中文] ### 用途: - 获取用户发帖 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的$.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value获取 ### 返回: - 用户发帖  # [English] ### Purpose: - Get user post ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the $.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value of the last request ### Return: - User post  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet_0(String userId, Integer count, String cursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet_0WithHttpInfo(userId, count, cursor);
        return localVarResp.getData();
    }

    /**
     * 获取用户发帖/Get user post
     * # [中文] ### 用途: - 获取用户发帖 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的$.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value获取 ### 返回: - 用户发帖  # [English] ### Purpose: - Get user post ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the $.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value of the last request ### Return: - User post  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet_0WithHttpInfo(String userId, Integer count, String cursor) throws ApiException {
        okhttp3.Call localVarCall = fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet_0ValidateBeforeCall(userId, count, cursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户发帖/Get user post (asynchronously)
     * # [中文] ### 用途: - 获取用户发帖 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的$.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value获取 ### 返回: - 用户发帖  # [English] ### Purpose: - Get user post ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the $.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value of the last request ### Return: - User post  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet_0Async(String userId, Integer count, String cursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet_0ValidateBeforeCall(userId, count, cursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserProfileApiV1TwitterWebFetchUserProfileGet
     * @param screenName 用户名/Screen Name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserProfileApiV1TwitterWebFetchUserProfileGetCall(String screenName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/twitter/web/fetch_user_profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (screenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("screen_name", screenName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserProfileApiV1TwitterWebFetchUserProfileGetValidateBeforeCall(String screenName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'screenName' is set
        if (screenName == null) {
            throw new ApiException("Missing the required parameter 'screenName' when calling fetchUserProfileApiV1TwitterWebFetchUserProfileGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserProfileApiV1TwitterWebFetchUserProfileGetCall(screenName, _callback);
        return localVarCall;

    }

    /**
     * 获取用户资料/Get user profile
     * # [中文] ### 用途: - 获取用户资料 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 ### 返回: - 用户资料  # [English] ### Purpose: - Get user profile ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user&#39;s homepage link, for example: elonmusk in https://twitter.com/elonmusk ### Return: - User profile  # [示例/Example] screen_name &#x3D; \&quot;elonmusk\&quot;
     * @param screenName 用户名/Screen Name (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserProfileApiV1TwitterWebFetchUserProfileGet(String screenName) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserProfileApiV1TwitterWebFetchUserProfileGetWithHttpInfo(screenName);
        return localVarResp.getData();
    }

    /**
     * 获取用户资料/Get user profile
     * # [中文] ### 用途: - 获取用户资料 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 ### 返回: - 用户资料  # [English] ### Purpose: - Get user profile ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user&#39;s homepage link, for example: elonmusk in https://twitter.com/elonmusk ### Return: - User profile  # [示例/Example] screen_name &#x3D; \&quot;elonmusk\&quot;
     * @param screenName 用户名/Screen Name (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserProfileApiV1TwitterWebFetchUserProfileGetWithHttpInfo(String screenName) throws ApiException {
        okhttp3.Call localVarCall = fetchUserProfileApiV1TwitterWebFetchUserProfileGetValidateBeforeCall(screenName, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户资料/Get user profile (asynchronously)
     * # [中文] ### 用途: - 获取用户资料 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 ### 返回: - 用户资料  # [English] ### Purpose: - Get user profile ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user&#39;s homepage link, for example: elonmusk in https://twitter.com/elonmusk ### Return: - User profile  # [示例/Example] screen_name &#x3D; \&quot;elonmusk\&quot;
     * @param screenName 用户名/Screen Name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserProfileApiV1TwitterWebFetchUserProfileGetAsync(String screenName, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserProfileApiV1TwitterWebFetchUserProfileGetValidateBeforeCall(screenName, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserProfileApiV1TwitterWebFetchUserProfileGet_0
     * @param screenName 用户名/Screen Name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserProfileApiV1TwitterWebFetchUserProfileGet_0Call(String screenName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/twitter/web/fetch_user_profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (screenName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("screen_name", screenName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserProfileApiV1TwitterWebFetchUserProfileGet_0ValidateBeforeCall(String screenName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'screenName' is set
        if (screenName == null) {
            throw new ApiException("Missing the required parameter 'screenName' when calling fetchUserProfileApiV1TwitterWebFetchUserProfileGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserProfileApiV1TwitterWebFetchUserProfileGet_0Call(screenName, _callback);
        return localVarCall;

    }

    /**
     * 获取用户资料/Get user profile
     * # [中文] ### 用途: - 获取用户资料 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 ### 返回: - 用户资料  # [English] ### Purpose: - Get user profile ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user&#39;s homepage link, for example: elonmusk in https://twitter.com/elonmusk ### Return: - User profile  # [示例/Example] screen_name &#x3D; \&quot;elonmusk\&quot;
     * @param screenName 用户名/Screen Name (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserProfileApiV1TwitterWebFetchUserProfileGet_0(String screenName) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserProfileApiV1TwitterWebFetchUserProfileGet_0WithHttpInfo(screenName);
        return localVarResp.getData();
    }

    /**
     * 获取用户资料/Get user profile
     * # [中文] ### 用途: - 获取用户资料 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 ### 返回: - 用户资料  # [English] ### Purpose: - Get user profile ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user&#39;s homepage link, for example: elonmusk in https://twitter.com/elonmusk ### Return: - User profile  # [示例/Example] screen_name &#x3D; \&quot;elonmusk\&quot;
     * @param screenName 用户名/Screen Name (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserProfileApiV1TwitterWebFetchUserProfileGet_0WithHttpInfo(String screenName) throws ApiException {
        okhttp3.Call localVarCall = fetchUserProfileApiV1TwitterWebFetchUserProfileGet_0ValidateBeforeCall(screenName, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户资料/Get user profile (asynchronously)
     * # [中文] ### 用途: - 获取用户资料 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 ### 返回: - 用户资料  # [English] ### Purpose: - Get user profile ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user&#39;s homepage link, for example: elonmusk in https://twitter.com/elonmusk ### Return: - User profile  # [示例/Example] screen_name &#x3D; \&quot;elonmusk\&quot;
     * @param screenName 用户名/Screen Name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserProfileApiV1TwitterWebFetchUserProfileGet_0Async(String screenName, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserProfileApiV1TwitterWebFetchUserProfileGet_0ValidateBeforeCall(screenName, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGetCall(String userId, Integer count, String cursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/twitter/web/fetch_user_tweet_replies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGetValidateBeforeCall(String userId, Integer count, String cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGetCall(userId, count, cursor, _callback);
        return localVarCall;

    }

    /**
     * 获取用户推文回复/Get user tweet replies
     * # [中文] ### 用途: - 获取用户推文回复 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户推文回复  # [English] ### Purpose: - Get user tweet replies ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User tweet replies  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet(String userId, Integer count, String cursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGetWithHttpInfo(userId, count, cursor);
        return localVarResp.getData();
    }

    /**
     * 获取用户推文回复/Get user tweet replies
     * # [中文] ### 用途: - 获取用户推文回复 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户推文回复  # [English] ### Purpose: - Get user tweet replies ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User tweet replies  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGetWithHttpInfo(String userId, Integer count, String cursor) throws ApiException {
        okhttp3.Call localVarCall = fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGetValidateBeforeCall(userId, count, cursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户推文回复/Get user tweet replies (asynchronously)
     * # [中文] ### 用途: - 获取用户推文回复 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户推文回复  # [English] ### Purpose: - Get user tweet replies ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User tweet replies  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGetAsync(String userId, Integer count, String cursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGetValidateBeforeCall(userId, count, cursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_0
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_0Call(String userId, Integer count, String cursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/twitter/web/fetch_user_tweet_replies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_0ValidateBeforeCall(String userId, Integer count, String cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_0Call(userId, count, cursor, _callback);
        return localVarCall;

    }

    /**
     * 获取用户推文回复/Get user tweet replies
     * # [中文] ### 用途: - 获取用户推文回复 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户推文回复  # [English] ### Purpose: - Get user tweet replies ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User tweet replies  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_0(String userId, Integer count, String cursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_0WithHttpInfo(userId, count, cursor);
        return localVarResp.getData();
    }

    /**
     * 获取用户推文回复/Get user tweet replies
     * # [中文] ### 用途: - 获取用户推文回复 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户推文回复  # [English] ### Purpose: - Get user tweet replies ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User tweet replies  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_0WithHttpInfo(String userId, Integer count, String cursor) throws ApiException {
        okhttp3.Call localVarCall = fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_0ValidateBeforeCall(userId, count, cursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户推文回复/Get user tweet replies (asynchronously)
     * # [中文] ### 用途: - 获取用户推文回复 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户推文回复  # [English] ### Purpose: - Get user tweet replies ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User tweet replies  # [示例/Example] userId &#x3D; \&quot;44196397\&quot; count &#x3D; 20 cursor &#x3D; None
     * @param userId 用户ID/User ID (required)
     * @param count 数量/Count (optional, default to 20)
     * @param cursor 游标/Cursor (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_0Async(String userId, Integer count, String cursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_0ValidateBeforeCall(userId, count, cursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
