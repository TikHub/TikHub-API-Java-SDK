/*
 * Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HttpValidationError;
import org.openapitools.client.model.ResponseModel;
import org.openapitools.client.model.TikTokAppV3ContentTranslate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TikTokAppV3ApiApi {
    private ApiClient localVarApiClient;

    public TikTokAppV3ApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TikTokAppV3ApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet
     * @param roomId 直播间id/Live room id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGetCall(String roomId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/check_live_room_online";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (roomId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("room_id", roomId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGetValidateBeforeCall(String roomId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roomId' is set
        if (roomId == null) {
            throw new ApiException("Missing the required parameter 'roomId' when calling checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet(Async)");
        }
        

        okhttp3.Call localVarCall = checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGetCall(roomId, _callback);
        return localVarCall;

    }

    /**
     * 检测直播间是否在线/Check if live room is online
     * # [中文] ### 用途: - 检测直播间是否在线 - 直播间的Room ID可以通过直播间链接从&#x60;/api/v1/tiktok/web/get_live_room_id&#x60;接口获取 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online - The Room ID of the live room can be obtained from the &#x60;/api/v1/tiktok/web/get_live_room_id&#x60; interface through the live room link ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot;
     * @param roomId 直播间id/Live room id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet(String roomId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGetWithHttpInfo(roomId);
        return localVarResp.getData();
    }

    /**
     * 检测直播间是否在线/Check if live room is online
     * # [中文] ### 用途: - 检测直播间是否在线 - 直播间的Room ID可以通过直播间链接从&#x60;/api/v1/tiktok/web/get_live_room_id&#x60;接口获取 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online - The Room ID of the live room can be obtained from the &#x60;/api/v1/tiktok/web/get_live_room_id&#x60; interface through the live room link ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot;
     * @param roomId 直播间id/Live room id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGetWithHttpInfo(String roomId) throws ApiException {
        okhttp3.Call localVarCall = checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGetValidateBeforeCall(roomId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 检测直播间是否在线/Check if live room is online (asynchronously)
     * # [中文] ### 用途: - 检测直播间是否在线 - 直播间的Room ID可以通过直播间链接从&#x60;/api/v1/tiktok/web/get_live_room_id&#x60;接口获取 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online - The Room ID of the live room can be obtained from the &#x60;/api/v1/tiktok/web/get_live_room_id&#x60; interface through the live room link ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot;
     * @param roomId 直播间id/Live room id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGetAsync(String roomId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGetValidateBeforeCall(roomId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_0
     * @param roomId 直播间id/Live room id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_0Call(String roomId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/check_live_room_online";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (roomId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("room_id", roomId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_0ValidateBeforeCall(String roomId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roomId' is set
        if (roomId == null) {
            throw new ApiException("Missing the required parameter 'roomId' when calling checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_0Call(roomId, _callback);
        return localVarCall;

    }

    /**
     * 检测直播间是否在线/Check if live room is online
     * # [中文] ### 用途: - 检测直播间是否在线 - 直播间的Room ID可以通过直播间链接从&#x60;/api/v1/tiktok/web/get_live_room_id&#x60;接口获取 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online - The Room ID of the live room can be obtained from the &#x60;/api/v1/tiktok/web/get_live_room_id&#x60; interface through the live room link ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot;
     * @param roomId 直播间id/Live room id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_0(String roomId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_0WithHttpInfo(roomId);
        return localVarResp.getData();
    }

    /**
     * 检测直播间是否在线/Check if live room is online
     * # [中文] ### 用途: - 检测直播间是否在线 - 直播间的Room ID可以通过直播间链接从&#x60;/api/v1/tiktok/web/get_live_room_id&#x60;接口获取 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online - The Room ID of the live room can be obtained from the &#x60;/api/v1/tiktok/web/get_live_room_id&#x60; interface through the live room link ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot;
     * @param roomId 直播间id/Live room id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_0WithHttpInfo(String roomId) throws ApiException {
        okhttp3.Call localVarCall = checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_0ValidateBeforeCall(roomId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 检测直播间是否在线/Check if live room is online (asynchronously)
     * # [中文] ### 用途: - 检测直播间是否在线 - 直播间的Room ID可以通过直播间链接从&#x60;/api/v1/tiktok/web/get_live_room_id&#x60;接口获取 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online - The Room ID of the live room can be obtained from the &#x60;/api/v1/tiktok/web/get_live_room_id&#x60; interface through the live room link ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot;
     * @param roomId 直播间id/Live room id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_0Async(String roomId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_0ValidateBeforeCall(roomId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost
     * @param tikTokAppV3ContentTranslate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePostCall(TikTokAppV3ContentTranslate tikTokAppV3ContentTranslate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tikTokAppV3ContentTranslate;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_content_translate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePostValidateBeforeCall(TikTokAppV3ContentTranslate tikTokAppV3ContentTranslate, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePostCall(tikTokAppV3ContentTranslate, _callback);
        return localVarCall;

    }

    /**
     * 获取内容翻译数据/Get content translation data
     * # [中文] ### 用途: - 获取内容翻译数据 ### 参数: - trg_lang: 目标语言     - zh-Hans: 简体中文     - zh-Hant: 繁体中文     - en: 英语     - ja: 日语     - ko: 韩语     - fr: 法语     - de: 德语     - ru: 俄语     - es: 西班牙语     - pt: 葡萄牙语     - vi: 越南语     - th: 泰语     - id: 印尼语     - ar: 阿拉伯语     - it: 意大利语     - tr: 土耳其语     - he: 希伯来语     - pl: 波兰语     - nl: 荷兰语     - sv: 瑞典语     - da: 丹麦语     - fi: 芬兰语     - no: 挪威语     - cs: 捷克语     - hu: 匈牙利语 - src_content: 源内容，也就是需要翻译的内容，长度不超过5000个字符，如果超过5000个字符，只会翻译前5000个字符。 ### 返回: - 内容翻译数据  # [English] ### Purpose: - Get content translation data ### Parameters: - trg_lang: Target language     - zh-Hans: Simplified Chinese     - zh-Hant: Traditional Chinese     - en: English     - ja: Japanese     - ko: Korean     - fr: French     - de: German     - ru: Russian     - es: Spanish     - pt: Portuguese     - vi: Vietnamese     - th: Thai     - id: Indonesian     - ar: Arabic     - it: Italian     - tr: Turkish     - he: Hebrew     - pl: Polish     - nl: Dutch     - sv: Swedish     - da: Danish     - fi: Finnish     - no: Norwegian     - cs: Czech     - hu: Hungarian - src_content: Source content, that is, the content that needs to be translated, the length does not exceed 5000 characters, if it exceeds 5000 characters, only the first 5000 characters will be translated. ### Return: - Content translation data  # [示例/Example] trg_lang &#x3D; \&quot;zh-Hans\&quot; src_content &#x3D; \&quot;Hello, welcome to TikHub!\&quot;
     * @param tikTokAppV3ContentTranslate  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost(TikTokAppV3ContentTranslate tikTokAppV3ContentTranslate) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePostWithHttpInfo(tikTokAppV3ContentTranslate);
        return localVarResp.getData();
    }

    /**
     * 获取内容翻译数据/Get content translation data
     * # [中文] ### 用途: - 获取内容翻译数据 ### 参数: - trg_lang: 目标语言     - zh-Hans: 简体中文     - zh-Hant: 繁体中文     - en: 英语     - ja: 日语     - ko: 韩语     - fr: 法语     - de: 德语     - ru: 俄语     - es: 西班牙语     - pt: 葡萄牙语     - vi: 越南语     - th: 泰语     - id: 印尼语     - ar: 阿拉伯语     - it: 意大利语     - tr: 土耳其语     - he: 希伯来语     - pl: 波兰语     - nl: 荷兰语     - sv: 瑞典语     - da: 丹麦语     - fi: 芬兰语     - no: 挪威语     - cs: 捷克语     - hu: 匈牙利语 - src_content: 源内容，也就是需要翻译的内容，长度不超过5000个字符，如果超过5000个字符，只会翻译前5000个字符。 ### 返回: - 内容翻译数据  # [English] ### Purpose: - Get content translation data ### Parameters: - trg_lang: Target language     - zh-Hans: Simplified Chinese     - zh-Hant: Traditional Chinese     - en: English     - ja: Japanese     - ko: Korean     - fr: French     - de: German     - ru: Russian     - es: Spanish     - pt: Portuguese     - vi: Vietnamese     - th: Thai     - id: Indonesian     - ar: Arabic     - it: Italian     - tr: Turkish     - he: Hebrew     - pl: Polish     - nl: Dutch     - sv: Swedish     - da: Danish     - fi: Finnish     - no: Norwegian     - cs: Czech     - hu: Hungarian - src_content: Source content, that is, the content that needs to be translated, the length does not exceed 5000 characters, if it exceeds 5000 characters, only the first 5000 characters will be translated. ### Return: - Content translation data  # [示例/Example] trg_lang &#x3D; \&quot;zh-Hans\&quot; src_content &#x3D; \&quot;Hello, welcome to TikHub!\&quot;
     * @param tikTokAppV3ContentTranslate  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePostWithHttpInfo(TikTokAppV3ContentTranslate tikTokAppV3ContentTranslate) throws ApiException {
        okhttp3.Call localVarCall = fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePostValidateBeforeCall(tikTokAppV3ContentTranslate, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取内容翻译数据/Get content translation data (asynchronously)
     * # [中文] ### 用途: - 获取内容翻译数据 ### 参数: - trg_lang: 目标语言     - zh-Hans: 简体中文     - zh-Hant: 繁体中文     - en: 英语     - ja: 日语     - ko: 韩语     - fr: 法语     - de: 德语     - ru: 俄语     - es: 西班牙语     - pt: 葡萄牙语     - vi: 越南语     - th: 泰语     - id: 印尼语     - ar: 阿拉伯语     - it: 意大利语     - tr: 土耳其语     - he: 希伯来语     - pl: 波兰语     - nl: 荷兰语     - sv: 瑞典语     - da: 丹麦语     - fi: 芬兰语     - no: 挪威语     - cs: 捷克语     - hu: 匈牙利语 - src_content: 源内容，也就是需要翻译的内容，长度不超过5000个字符，如果超过5000个字符，只会翻译前5000个字符。 ### 返回: - 内容翻译数据  # [English] ### Purpose: - Get content translation data ### Parameters: - trg_lang: Target language     - zh-Hans: Simplified Chinese     - zh-Hant: Traditional Chinese     - en: English     - ja: Japanese     - ko: Korean     - fr: French     - de: German     - ru: Russian     - es: Spanish     - pt: Portuguese     - vi: Vietnamese     - th: Thai     - id: Indonesian     - ar: Arabic     - it: Italian     - tr: Turkish     - he: Hebrew     - pl: Polish     - nl: Dutch     - sv: Swedish     - da: Danish     - fi: Finnish     - no: Norwegian     - cs: Czech     - hu: Hungarian - src_content: Source content, that is, the content that needs to be translated, the length does not exceed 5000 characters, if it exceeds 5000 characters, only the first 5000 characters will be translated. ### Return: - Content translation data  # [示例/Example] trg_lang &#x3D; \&quot;zh-Hans\&quot; src_content &#x3D; \&quot;Hello, welcome to TikHub!\&quot;
     * @param tikTokAppV3ContentTranslate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePostAsync(TikTokAppV3ContentTranslate tikTokAppV3ContentTranslate, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePostValidateBeforeCall(tikTokAppV3ContentTranslate, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_0
     * @param tikTokAppV3ContentTranslate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_0Call(TikTokAppV3ContentTranslate tikTokAppV3ContentTranslate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = tikTokAppV3ContentTranslate;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_content_translate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_0ValidateBeforeCall(TikTokAppV3ContentTranslate tikTokAppV3ContentTranslate, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_0Call(tikTokAppV3ContentTranslate, _callback);
        return localVarCall;

    }

    /**
     * 获取内容翻译数据/Get content translation data
     * # [中文] ### 用途: - 获取内容翻译数据 ### 参数: - trg_lang: 目标语言     - zh-Hans: 简体中文     - zh-Hant: 繁体中文     - en: 英语     - ja: 日语     - ko: 韩语     - fr: 法语     - de: 德语     - ru: 俄语     - es: 西班牙语     - pt: 葡萄牙语     - vi: 越南语     - th: 泰语     - id: 印尼语     - ar: 阿拉伯语     - it: 意大利语     - tr: 土耳其语     - he: 希伯来语     - pl: 波兰语     - nl: 荷兰语     - sv: 瑞典语     - da: 丹麦语     - fi: 芬兰语     - no: 挪威语     - cs: 捷克语     - hu: 匈牙利语 - src_content: 源内容，也就是需要翻译的内容，长度不超过5000个字符，如果超过5000个字符，只会翻译前5000个字符。 ### 返回: - 内容翻译数据  # [English] ### Purpose: - Get content translation data ### Parameters: - trg_lang: Target language     - zh-Hans: Simplified Chinese     - zh-Hant: Traditional Chinese     - en: English     - ja: Japanese     - ko: Korean     - fr: French     - de: German     - ru: Russian     - es: Spanish     - pt: Portuguese     - vi: Vietnamese     - th: Thai     - id: Indonesian     - ar: Arabic     - it: Italian     - tr: Turkish     - he: Hebrew     - pl: Polish     - nl: Dutch     - sv: Swedish     - da: Danish     - fi: Finnish     - no: Norwegian     - cs: Czech     - hu: Hungarian - src_content: Source content, that is, the content that needs to be translated, the length does not exceed 5000 characters, if it exceeds 5000 characters, only the first 5000 characters will be translated. ### Return: - Content translation data  # [示例/Example] trg_lang &#x3D; \&quot;zh-Hans\&quot; src_content &#x3D; \&quot;Hello, welcome to TikHub!\&quot;
     * @param tikTokAppV3ContentTranslate  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_0(TikTokAppV3ContentTranslate tikTokAppV3ContentTranslate) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_0WithHttpInfo(tikTokAppV3ContentTranslate);
        return localVarResp.getData();
    }

    /**
     * 获取内容翻译数据/Get content translation data
     * # [中文] ### 用途: - 获取内容翻译数据 ### 参数: - trg_lang: 目标语言     - zh-Hans: 简体中文     - zh-Hant: 繁体中文     - en: 英语     - ja: 日语     - ko: 韩语     - fr: 法语     - de: 德语     - ru: 俄语     - es: 西班牙语     - pt: 葡萄牙语     - vi: 越南语     - th: 泰语     - id: 印尼语     - ar: 阿拉伯语     - it: 意大利语     - tr: 土耳其语     - he: 希伯来语     - pl: 波兰语     - nl: 荷兰语     - sv: 瑞典语     - da: 丹麦语     - fi: 芬兰语     - no: 挪威语     - cs: 捷克语     - hu: 匈牙利语 - src_content: 源内容，也就是需要翻译的内容，长度不超过5000个字符，如果超过5000个字符，只会翻译前5000个字符。 ### 返回: - 内容翻译数据  # [English] ### Purpose: - Get content translation data ### Parameters: - trg_lang: Target language     - zh-Hans: Simplified Chinese     - zh-Hant: Traditional Chinese     - en: English     - ja: Japanese     - ko: Korean     - fr: French     - de: German     - ru: Russian     - es: Spanish     - pt: Portuguese     - vi: Vietnamese     - th: Thai     - id: Indonesian     - ar: Arabic     - it: Italian     - tr: Turkish     - he: Hebrew     - pl: Polish     - nl: Dutch     - sv: Swedish     - da: Danish     - fi: Finnish     - no: Norwegian     - cs: Czech     - hu: Hungarian - src_content: Source content, that is, the content that needs to be translated, the length does not exceed 5000 characters, if it exceeds 5000 characters, only the first 5000 characters will be translated. ### Return: - Content translation data  # [示例/Example] trg_lang &#x3D; \&quot;zh-Hans\&quot; src_content &#x3D; \&quot;Hello, welcome to TikHub!\&quot;
     * @param tikTokAppV3ContentTranslate  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_0WithHttpInfo(TikTokAppV3ContentTranslate tikTokAppV3ContentTranslate) throws ApiException {
        okhttp3.Call localVarCall = fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_0ValidateBeforeCall(tikTokAppV3ContentTranslate, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取内容翻译数据/Get content translation data (asynchronously)
     * # [中文] ### 用途: - 获取内容翻译数据 ### 参数: - trg_lang: 目标语言     - zh-Hans: 简体中文     - zh-Hant: 繁体中文     - en: 英语     - ja: 日语     - ko: 韩语     - fr: 法语     - de: 德语     - ru: 俄语     - es: 西班牙语     - pt: 葡萄牙语     - vi: 越南语     - th: 泰语     - id: 印尼语     - ar: 阿拉伯语     - it: 意大利语     - tr: 土耳其语     - he: 希伯来语     - pl: 波兰语     - nl: 荷兰语     - sv: 瑞典语     - da: 丹麦语     - fi: 芬兰语     - no: 挪威语     - cs: 捷克语     - hu: 匈牙利语 - src_content: 源内容，也就是需要翻译的内容，长度不超过5000个字符，如果超过5000个字符，只会翻译前5000个字符。 ### 返回: - 内容翻译数据  # [English] ### Purpose: - Get content translation data ### Parameters: - trg_lang: Target language     - zh-Hans: Simplified Chinese     - zh-Hant: Traditional Chinese     - en: English     - ja: Japanese     - ko: Korean     - fr: French     - de: German     - ru: Russian     - es: Spanish     - pt: Portuguese     - vi: Vietnamese     - th: Thai     - id: Indonesian     - ar: Arabic     - it: Italian     - tr: Turkish     - he: Hebrew     - pl: Polish     - nl: Dutch     - sv: Swedish     - da: Danish     - fi: Finnish     - no: Norwegian     - cs: Czech     - hu: Hungarian - src_content: Source content, that is, the content that needs to be translated, the length does not exceed 5000 characters, if it exceeds 5000 characters, only the first 5000 characters will be translated. ### Return: - Content translation data  # [示例/Example] trg_lang &#x3D; \&quot;zh-Hans\&quot; src_content &#x3D; \&quot;Hello, welcome to TikHub!\&quot;
     * @param tikTokAppV3ContentTranslate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_0Async(TikTokAppV3ContentTranslate tikTokAppV3ContentTranslate, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_0ValidateBeforeCall(tikTokAppV3ContentTranslate, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param sortType 排序类型/Sort type (optional)
     * @param publishTime 发布时间/Publish time (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGetCall(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_general_search_result";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (sortType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_type", sortType));
        }

        if (publishTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publish_time", publishTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGetValidateBeforeCall(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGetCall(keyword, offset, count, sortType, publishTime, _callback);
        return localVarCall;

    }

    /**
     * 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param sortType 排序类型/Sort type (optional)
     * @param publishTime 发布时间/Publish time (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGetWithHttpInfo(keyword, offset, count, sortType, publishTime);
        return localVarResp.getData();
    }

    /**
     * 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param sortType 排序类型/Sort type (optional)
     * @param publishTime 发布时间/Publish time (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGetWithHttpInfo(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime) throws ApiException {
        okhttp3.Call localVarCall = fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGetValidateBeforeCall(keyword, offset, count, sortType, publishTime, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords (asynchronously)
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param sortType 排序类型/Sort type (optional)
     * @param publishTime 发布时间/Publish time (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGetAsync(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGetValidateBeforeCall(keyword, offset, count, sortType, publishTime, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_0
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param sortType 排序类型/Sort type (optional)
     * @param publishTime 发布时间/Publish time (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_0Call(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_general_search_result";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (sortType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_type", sortType));
        }

        if (publishTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publish_time", publishTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_0ValidateBeforeCall(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_0Call(keyword, offset, count, sortType, publishTime, _callback);
        return localVarCall;

    }

    /**
     * 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param sortType 排序类型/Sort type (optional)
     * @param publishTime 发布时间/Publish time (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_0(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_0WithHttpInfo(keyword, offset, count, sortType, publishTime);
        return localVarResp.getData();
    }

    /**
     * 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param sortType 排序类型/Sort type (optional)
     * @param publishTime 发布时间/Publish time (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_0WithHttpInfo(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime) throws ApiException {
        okhttp3.Call localVarCall = fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_0ValidateBeforeCall(keyword, offset, count, sortType, publishTime, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords (asynchronously)
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param sortType 排序类型/Sort type (optional)
     * @param publishTime 发布时间/Publish time (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_0Async(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_0ValidateBeforeCall(keyword, offset, count, sortType, publishTime, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet
     * @param chId 话题id/Hashtag id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGetCall(String chId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_hashtag_detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (chId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ch_id", chId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGetValidateBeforeCall(String chId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chId' is set
        if (chId == null) {
            throw new ApiException("Missing the required parameter 'chId' when calling fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGetCall(chId, _callback);
        return localVarCall;

    }

    /**
     * 获取指定话题的详情数据/Get details of specified hashtag
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot;
     * @param chId 话题id/Hashtag id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet(String chId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGetWithHttpInfo(chId);
        return localVarResp.getData();
    }

    /**
     * 获取指定话题的详情数据/Get details of specified hashtag
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot;
     * @param chId 话题id/Hashtag id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGetWithHttpInfo(String chId) throws ApiException {
        okhttp3.Call localVarCall = fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGetValidateBeforeCall(chId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定话题的详情数据/Get details of specified hashtag (asynchronously)
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot;
     * @param chId 话题id/Hashtag id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGetAsync(String chId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGetValidateBeforeCall(chId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_0
     * @param chId 话题id/Hashtag id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_0Call(String chId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_hashtag_detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (chId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ch_id", chId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_0ValidateBeforeCall(String chId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chId' is set
        if (chId == null) {
            throw new ApiException("Missing the required parameter 'chId' when calling fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_0Call(chId, _callback);
        return localVarCall;

    }

    /**
     * 获取指定话题的详情数据/Get details of specified hashtag
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot;
     * @param chId 话题id/Hashtag id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_0(String chId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_0WithHttpInfo(chId);
        return localVarResp.getData();
    }

    /**
     * 获取指定话题的详情数据/Get details of specified hashtag
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot;
     * @param chId 话题id/Hashtag id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_0WithHttpInfo(String chId) throws ApiException {
        okhttp3.Call localVarCall = fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_0ValidateBeforeCall(chId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定话题的详情数据/Get details of specified hashtag (asynchronously)
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot;
     * @param chId 话题id/Hashtag id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_0Async(String chId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_0ValidateBeforeCall(chId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGetCall(String keyword, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_hashtag_search_result";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGetValidateBeforeCall(String keyword, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGetCall(keyword, offset, count, _callback);
        return localVarCall;

    }

    /**
     * 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet(String keyword, Integer offset, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGetWithHttpInfo(keyword, offset, count);
        return localVarResp.getData();
    }

    /**
     * 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGetWithHttpInfo(String keyword, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGetValidateBeforeCall(keyword, offset, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords (asynchronously)
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGetAsync(String keyword, Integer offset, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGetValidateBeforeCall(keyword, offset, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_0
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_0Call(String keyword, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_hashtag_search_result";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_0ValidateBeforeCall(String keyword, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_0Call(keyword, offset, count, _callback);
        return localVarCall;

    }

    /**
     * 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_0(String keyword, Integer offset, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_0WithHttpInfo(keyword, offset, count);
        return localVarResp.getData();
    }

    /**
     * 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_0WithHttpInfo(String keyword, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_0ValidateBeforeCall(keyword, offset, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords (asynchronously)
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_0Async(String keyword, Integer offset, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_0ValidateBeforeCall(keyword, offset, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet
     * @param chId 话题id/Hashtag id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGetCall(String chId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_hashtag_video_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (chId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ch_id", chId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGetValidateBeforeCall(String chId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chId' is set
        if (chId == null) {
            throw new ApiException("Missing the required parameter 'chId' when calling fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGetCall(chId, cursor, count, _callback);
        return localVarCall;

    }

    /**
     * 获取指定话题的作品数据/Get video list of specified hashtag
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot; cursor &#x3D; 0 sort_type &#x3D; 0 count &#x3D; 10
     * @param chId 话题id/Hashtag id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet(String chId, Integer cursor, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGetWithHttpInfo(chId, cursor, count);
        return localVarResp.getData();
    }

    /**
     * 获取指定话题的作品数据/Get video list of specified hashtag
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot; cursor &#x3D; 0 sort_type &#x3D; 0 count &#x3D; 10
     * @param chId 话题id/Hashtag id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGetWithHttpInfo(String chId, Integer cursor, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGetValidateBeforeCall(chId, cursor, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定话题的作品数据/Get video list of specified hashtag (asynchronously)
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot; cursor &#x3D; 0 sort_type &#x3D; 0 count &#x3D; 10
     * @param chId 话题id/Hashtag id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGetAsync(String chId, Integer cursor, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGetValidateBeforeCall(chId, cursor, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_0
     * @param chId 话题id/Hashtag id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_0Call(String chId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_hashtag_video_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (chId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ch_id", chId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_0ValidateBeforeCall(String chId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'chId' is set
        if (chId == null) {
            throw new ApiException("Missing the required parameter 'chId' when calling fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_0Call(chId, cursor, count, _callback);
        return localVarCall;

    }

    /**
     * 获取指定话题的作品数据/Get video list of specified hashtag
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot; cursor &#x3D; 0 sort_type &#x3D; 0 count &#x3D; 10
     * @param chId 话题id/Hashtag id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_0(String chId, Integer cursor, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_0WithHttpInfo(chId, cursor, count);
        return localVarResp.getData();
    }

    /**
     * 获取指定话题的作品数据/Get video list of specified hashtag
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot; cursor &#x3D; 0 sort_type &#x3D; 0 count &#x3D; 10
     * @param chId 话题id/Hashtag id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_0WithHttpInfo(String chId, Integer cursor, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_0ValidateBeforeCall(chId, cursor, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定话题的作品数据/Get video list of specified hashtag (asynchronously)
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot; cursor &#x3D; 0 sort_type &#x3D; 0 count &#x3D; 10
     * @param chId 话题id/Hashtag id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_0Async(String chId, Integer cursor, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_0ValidateBeforeCall(chId, cursor, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_home_feed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGetCall(_callback);
        return localVarCall;

    }

    /**
     * 获取主页视频推荐数据/Get home feed(recommend) video data
     * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGet() throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 获取主页视频推荐数据/Get home feed(recommend) video data
     * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取主页视频推荐数据/Get home feed(recommend) video data (asynchronously)
     * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGetAsync(final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGet_0
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGet_0Call(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_home_feed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGet_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGet_0Call(_callback);
        return localVarCall;

    }

    /**
     * 获取主页视频推荐数据/Get home feed(recommend) video data
     * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGet_0() throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGet_0WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 获取主页视频推荐数据/Get home feed(recommend) video data
     * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGet_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGet_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取主页视频推荐数据/Get home feed(recommend) video data (asynchronously)
     * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGet_0Async(final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedGet_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet
     * @param anchorId 主播id/Anchor id (optional, default to &quot;6952422426752205830&quot;)
     * @param roomId 直播间id/Live room id (optional, default to &quot;7380221319910312750&quot;)
     * @param rankType 榜单类型/Rank type (optional, default to 8)
     * @param regionType 地区类型/Region type (optional, default to 1)
     * @param gapInterval 时间间隔/Time interval (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGetCall(String anchorId, String roomId, Integer rankType, Integer regionType, Integer gapInterval, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_live_daily_rank";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (anchorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("anchor_id", anchorId));
        }

        if (roomId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("room_id", roomId));
        }

        if (rankType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rank_type", rankType));
        }

        if (regionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_type", regionType));
        }

        if (gapInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gap_interval", gapInterval));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGetValidateBeforeCall(String anchorId, String roomId, Integer rankType, Integer regionType, Integer gapInterval, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGetCall(anchorId, roomId, rankType, regionType, gapInterval, _callback);
        return localVarCall;

    }

    /**
     * 获取直播每日榜单数据/Get live daily rank data
     * # [中文] ### 用途: - 获取直播每日榜单数据 ### 参数: - anchor_id: 主播id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的主播id。 - room_id: 直播间id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的id。 - rank_type: 榜单类型     - 8: 每日排行榜     - 10: 游戏排行榜     - 15: 人气直播榜     - 16: D5段位榜 - region_type: 地区类型，使用默认值即可，具体含义不明。 - gap_interval: 时间间隔，使用默认值代表当天，使用-1代表排名记录。 ### 返回: - 直播每日榜单数据  # [English] ### Purpose: - Get live daily rank data ### Parameters: - anchor_id: Anchor id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different anchor ids of different live rooms. - room_id: Live room id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different room ids of different live rooms. - rank_type: Rank type     - 8: Daily ranking list     - 10: Game ranking list     - 15: Popular live broadcast list     - 16: D5 rank list - region_type: Region type, use the default value, the specific meaning is unknown. - gap_interval: Time interval, use the default value to represent the current day, use -1 to represent the ranking record. ### Return: - Live daily rank data
     * @param anchorId 主播id/Anchor id (optional, default to &quot;6952422426752205830&quot;)
     * @param roomId 直播间id/Live room id (optional, default to &quot;7380221319910312750&quot;)
     * @param rankType 榜单类型/Rank type (optional, default to 8)
     * @param regionType 地区类型/Region type (optional, default to 1)
     * @param gapInterval 时间间隔/Time interval (optional, default to 0)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet(String anchorId, String roomId, Integer rankType, Integer regionType, Integer gapInterval) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGetWithHttpInfo(anchorId, roomId, rankType, regionType, gapInterval);
        return localVarResp.getData();
    }

    /**
     * 获取直播每日榜单数据/Get live daily rank data
     * # [中文] ### 用途: - 获取直播每日榜单数据 ### 参数: - anchor_id: 主播id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的主播id。 - room_id: 直播间id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的id。 - rank_type: 榜单类型     - 8: 每日排行榜     - 10: 游戏排行榜     - 15: 人气直播榜     - 16: D5段位榜 - region_type: 地区类型，使用默认值即可，具体含义不明。 - gap_interval: 时间间隔，使用默认值代表当天，使用-1代表排名记录。 ### 返回: - 直播每日榜单数据  # [English] ### Purpose: - Get live daily rank data ### Parameters: - anchor_id: Anchor id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different anchor ids of different live rooms. - room_id: Live room id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different room ids of different live rooms. - rank_type: Rank type     - 8: Daily ranking list     - 10: Game ranking list     - 15: Popular live broadcast list     - 16: D5 rank list - region_type: Region type, use the default value, the specific meaning is unknown. - gap_interval: Time interval, use the default value to represent the current day, use -1 to represent the ranking record. ### Return: - Live daily rank data
     * @param anchorId 主播id/Anchor id (optional, default to &quot;6952422426752205830&quot;)
     * @param roomId 直播间id/Live room id (optional, default to &quot;7380221319910312750&quot;)
     * @param rankType 榜单类型/Rank type (optional, default to 8)
     * @param regionType 地区类型/Region type (optional, default to 1)
     * @param gapInterval 时间间隔/Time interval (optional, default to 0)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGetWithHttpInfo(String anchorId, String roomId, Integer rankType, Integer regionType, Integer gapInterval) throws ApiException {
        okhttp3.Call localVarCall = fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGetValidateBeforeCall(anchorId, roomId, rankType, regionType, gapInterval, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取直播每日榜单数据/Get live daily rank data (asynchronously)
     * # [中文] ### 用途: - 获取直播每日榜单数据 ### 参数: - anchor_id: 主播id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的主播id。 - room_id: 直播间id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的id。 - rank_type: 榜单类型     - 8: 每日排行榜     - 10: 游戏排行榜     - 15: 人气直播榜     - 16: D5段位榜 - region_type: 地区类型，使用默认值即可，具体含义不明。 - gap_interval: 时间间隔，使用默认值代表当天，使用-1代表排名记录。 ### 返回: - 直播每日榜单数据  # [English] ### Purpose: - Get live daily rank data ### Parameters: - anchor_id: Anchor id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different anchor ids of different live rooms. - room_id: Live room id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different room ids of different live rooms. - rank_type: Rank type     - 8: Daily ranking list     - 10: Game ranking list     - 15: Popular live broadcast list     - 16: D5 rank list - region_type: Region type, use the default value, the specific meaning is unknown. - gap_interval: Time interval, use the default value to represent the current day, use -1 to represent the ranking record. ### Return: - Live daily rank data
     * @param anchorId 主播id/Anchor id (optional, default to &quot;6952422426752205830&quot;)
     * @param roomId 直播间id/Live room id (optional, default to &quot;7380221319910312750&quot;)
     * @param rankType 榜单类型/Rank type (optional, default to 8)
     * @param regionType 地区类型/Region type (optional, default to 1)
     * @param gapInterval 时间间隔/Time interval (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGetAsync(String anchorId, String roomId, Integer rankType, Integer regionType, Integer gapInterval, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGetValidateBeforeCall(anchorId, roomId, rankType, regionType, gapInterval, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_0
     * @param anchorId 主播id/Anchor id (optional, default to &quot;6952422426752205830&quot;)
     * @param roomId 直播间id/Live room id (optional, default to &quot;7380221319910312750&quot;)
     * @param rankType 榜单类型/Rank type (optional, default to 8)
     * @param regionType 地区类型/Region type (optional, default to 1)
     * @param gapInterval 时间间隔/Time interval (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_0Call(String anchorId, String roomId, Integer rankType, Integer regionType, Integer gapInterval, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_live_daily_rank";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (anchorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("anchor_id", anchorId));
        }

        if (roomId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("room_id", roomId));
        }

        if (rankType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rank_type", rankType));
        }

        if (regionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region_type", regionType));
        }

        if (gapInterval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gap_interval", gapInterval));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_0ValidateBeforeCall(String anchorId, String roomId, Integer rankType, Integer regionType, Integer gapInterval, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_0Call(anchorId, roomId, rankType, regionType, gapInterval, _callback);
        return localVarCall;

    }

    /**
     * 获取直播每日榜单数据/Get live daily rank data
     * # [中文] ### 用途: - 获取直播每日榜单数据 ### 参数: - anchor_id: 主播id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的主播id。 - room_id: 直播间id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的id。 - rank_type: 榜单类型     - 8: 每日排行榜     - 10: 游戏排行榜     - 15: 人气直播榜     - 16: D5段位榜 - region_type: 地区类型，使用默认值即可，具体含义不明。 - gap_interval: 时间间隔，使用默认值代表当天，使用-1代表排名记录。 ### 返回: - 直播每日榜单数据  # [English] ### Purpose: - Get live daily rank data ### Parameters: - anchor_id: Anchor id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different anchor ids of different live rooms. - room_id: Live room id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different room ids of different live rooms. - rank_type: Rank type     - 8: Daily ranking list     - 10: Game ranking list     - 15: Popular live broadcast list     - 16: D5 rank list - region_type: Region type, use the default value, the specific meaning is unknown. - gap_interval: Time interval, use the default value to represent the current day, use -1 to represent the ranking record. ### Return: - Live daily rank data
     * @param anchorId 主播id/Anchor id (optional, default to &quot;6952422426752205830&quot;)
     * @param roomId 直播间id/Live room id (optional, default to &quot;7380221319910312750&quot;)
     * @param rankType 榜单类型/Rank type (optional, default to 8)
     * @param regionType 地区类型/Region type (optional, default to 1)
     * @param gapInterval 时间间隔/Time interval (optional, default to 0)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_0(String anchorId, String roomId, Integer rankType, Integer regionType, Integer gapInterval) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_0WithHttpInfo(anchorId, roomId, rankType, regionType, gapInterval);
        return localVarResp.getData();
    }

    /**
     * 获取直播每日榜单数据/Get live daily rank data
     * # [中文] ### 用途: - 获取直播每日榜单数据 ### 参数: - anchor_id: 主播id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的主播id。 - room_id: 直播间id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的id。 - rank_type: 榜单类型     - 8: 每日排行榜     - 10: 游戏排行榜     - 15: 人气直播榜     - 16: D5段位榜 - region_type: 地区类型，使用默认值即可，具体含义不明。 - gap_interval: 时间间隔，使用默认值代表当天，使用-1代表排名记录。 ### 返回: - 直播每日榜单数据  # [English] ### Purpose: - Get live daily rank data ### Parameters: - anchor_id: Anchor id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different anchor ids of different live rooms. - room_id: Live room id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different room ids of different live rooms. - rank_type: Rank type     - 8: Daily ranking list     - 10: Game ranking list     - 15: Popular live broadcast list     - 16: D5 rank list - region_type: Region type, use the default value, the specific meaning is unknown. - gap_interval: Time interval, use the default value to represent the current day, use -1 to represent the ranking record. ### Return: - Live daily rank data
     * @param anchorId 主播id/Anchor id (optional, default to &quot;6952422426752205830&quot;)
     * @param roomId 直播间id/Live room id (optional, default to &quot;7380221319910312750&quot;)
     * @param rankType 榜单类型/Rank type (optional, default to 8)
     * @param regionType 地区类型/Region type (optional, default to 1)
     * @param gapInterval 时间间隔/Time interval (optional, default to 0)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_0WithHttpInfo(String anchorId, String roomId, Integer rankType, Integer regionType, Integer gapInterval) throws ApiException {
        okhttp3.Call localVarCall = fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_0ValidateBeforeCall(anchorId, roomId, rankType, regionType, gapInterval, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取直播每日榜单数据/Get live daily rank data (asynchronously)
     * # [中文] ### 用途: - 获取直播每日榜单数据 ### 参数: - anchor_id: 主播id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的主播id。 - room_id: 直播间id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的id。 - rank_type: 榜单类型     - 8: 每日排行榜     - 10: 游戏排行榜     - 15: 人气直播榜     - 16: D5段位榜 - region_type: 地区类型，使用默认值即可，具体含义不明。 - gap_interval: 时间间隔，使用默认值代表当天，使用-1代表排名记录。 ### 返回: - 直播每日榜单数据  # [English] ### Purpose: - Get live daily rank data ### Parameters: - anchor_id: Anchor id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different anchor ids of different live rooms. - room_id: Live room id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different room ids of different live rooms. - rank_type: Rank type     - 8: Daily ranking list     - 10: Game ranking list     - 15: Popular live broadcast list     - 16: D5 rank list - region_type: Region type, use the default value, the specific meaning is unknown. - gap_interval: Time interval, use the default value to represent the current day, use -1 to represent the ranking record. ### Return: - Live daily rank data
     * @param anchorId 主播id/Anchor id (optional, default to &quot;6952422426752205830&quot;)
     * @param roomId 直播间id/Live room id (optional, default to &quot;7380221319910312750&quot;)
     * @param rankType 榜单类型/Rank type (optional, default to 8)
     * @param regionType 地区类型/Region type (optional, default to 1)
     * @param gapInterval 时间间隔/Time interval (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_0Async(String anchorId, String roomId, Integer rankType, Integer regionType, Integer gapInterval, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_0ValidateBeforeCall(anchorId, roomId, rankType, regionType, gapInterval, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet
     * @param roomId 直播间id/Live room id (required)
     * @param anchorId 主播id/Anchor id (optional, default to &quot;7222941468722758702&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGetCall(String roomId, String anchorId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_live_ranking_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (roomId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("room_id", roomId));
        }

        if (anchorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("anchor_id", anchorId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGetValidateBeforeCall(String roomId, String anchorId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roomId' is set
        if (roomId == null) {
            throw new ApiException("Missing the required parameter 'roomId' when calling fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGetCall(roomId, anchorId, _callback);
        return localVarCall;

    }

    /**
     * 获取直播间排行榜数据/Get live room ranking list
     * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot; anchor_id &#x3D; \&quot;7222941468722758702\&quot;
     * @param roomId 直播间id/Live room id (required)
     * @param anchorId 主播id/Anchor id (optional, default to &quot;7222941468722758702&quot;)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet(String roomId, String anchorId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGetWithHttpInfo(roomId, anchorId);
        return localVarResp.getData();
    }

    /**
     * 获取直播间排行榜数据/Get live room ranking list
     * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot; anchor_id &#x3D; \&quot;7222941468722758702\&quot;
     * @param roomId 直播间id/Live room id (required)
     * @param anchorId 主播id/Anchor id (optional, default to &quot;7222941468722758702&quot;)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGetWithHttpInfo(String roomId, String anchorId) throws ApiException {
        okhttp3.Call localVarCall = fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGetValidateBeforeCall(roomId, anchorId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取直播间排行榜数据/Get live room ranking list (asynchronously)
     * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot; anchor_id &#x3D; \&quot;7222941468722758702\&quot;
     * @param roomId 直播间id/Live room id (required)
     * @param anchorId 主播id/Anchor id (optional, default to &quot;7222941468722758702&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGetAsync(String roomId, String anchorId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGetValidateBeforeCall(roomId, anchorId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_0
     * @param roomId 直播间id/Live room id (required)
     * @param anchorId 主播id/Anchor id (optional, default to &quot;7222941468722758702&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_0Call(String roomId, String anchorId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_live_ranking_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (roomId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("room_id", roomId));
        }

        if (anchorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("anchor_id", anchorId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_0ValidateBeforeCall(String roomId, String anchorId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roomId' is set
        if (roomId == null) {
            throw new ApiException("Missing the required parameter 'roomId' when calling fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_0Call(roomId, anchorId, _callback);
        return localVarCall;

    }

    /**
     * 获取直播间排行榜数据/Get live room ranking list
     * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot; anchor_id &#x3D; \&quot;7222941468722758702\&quot;
     * @param roomId 直播间id/Live room id (required)
     * @param anchorId 主播id/Anchor id (optional, default to &quot;7222941468722758702&quot;)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_0(String roomId, String anchorId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_0WithHttpInfo(roomId, anchorId);
        return localVarResp.getData();
    }

    /**
     * 获取直播间排行榜数据/Get live room ranking list
     * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot; anchor_id &#x3D; \&quot;7222941468722758702\&quot;
     * @param roomId 直播间id/Live room id (required)
     * @param anchorId 主播id/Anchor id (optional, default to &quot;7222941468722758702&quot;)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_0WithHttpInfo(String roomId, String anchorId) throws ApiException {
        okhttp3.Call localVarCall = fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_0ValidateBeforeCall(roomId, anchorId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取直播间排行榜数据/Get live room ranking list (asynchronously)
     * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot; anchor_id &#x3D; \&quot;7222941468722758702\&quot;
     * @param roomId 直播间id/Live room id (required)
     * @param anchorId 主播id/Anchor id (optional, default to &quot;7222941468722758702&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_0Async(String roomId, String anchorId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_0ValidateBeforeCall(roomId, anchorId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet
     * @param roomId 直播间id/Live room id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGetCall(String roomId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_live_room_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (roomId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("room_id", roomId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGetValidateBeforeCall(String roomId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roomId' is set
        if (roomId == null) {
            throw new ApiException("Missing the required parameter 'roomId' when calling fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGetCall(roomId, _callback);
        return localVarCall;

    }

    /**
     * 获取指定直播间的数据/Get data of specified live room
     * # [中文] ### 用途: - 获取指定直播间的数据 ### 参数: - room_id: 直播间id ### 返回: - 直播间数据  # [English] ### Purpose: - Get data of specified live room ### Parameters: - room_id: Live room id ### Return: - Live room data  # [示例/Example] room_id &#x3D; \&quot;7385461256746060575\&quot;
     * @param roomId 直播间id/Live room id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet(String roomId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGetWithHttpInfo(roomId);
        return localVarResp.getData();
    }

    /**
     * 获取指定直播间的数据/Get data of specified live room
     * # [中文] ### 用途: - 获取指定直播间的数据 ### 参数: - room_id: 直播间id ### 返回: - 直播间数据  # [English] ### Purpose: - Get data of specified live room ### Parameters: - room_id: Live room id ### Return: - Live room data  # [示例/Example] room_id &#x3D; \&quot;7385461256746060575\&quot;
     * @param roomId 直播间id/Live room id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGetWithHttpInfo(String roomId) throws ApiException {
        okhttp3.Call localVarCall = fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGetValidateBeforeCall(roomId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定直播间的数据/Get data of specified live room (asynchronously)
     * # [中文] ### 用途: - 获取指定直播间的数据 ### 参数: - room_id: 直播间id ### 返回: - 直播间数据  # [English] ### Purpose: - Get data of specified live room ### Parameters: - room_id: Live room id ### Return: - Live room data  # [示例/Example] room_id &#x3D; \&quot;7385461256746060575\&quot;
     * @param roomId 直播间id/Live room id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGetAsync(String roomId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGetValidateBeforeCall(roomId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_0
     * @param roomId 直播间id/Live room id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_0Call(String roomId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_live_room_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (roomId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("room_id", roomId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_0ValidateBeforeCall(String roomId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roomId' is set
        if (roomId == null) {
            throw new ApiException("Missing the required parameter 'roomId' when calling fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_0Call(roomId, _callback);
        return localVarCall;

    }

    /**
     * 获取指定直播间的数据/Get data of specified live room
     * # [中文] ### 用途: - 获取指定直播间的数据 ### 参数: - room_id: 直播间id ### 返回: - 直播间数据  # [English] ### Purpose: - Get data of specified live room ### Parameters: - room_id: Live room id ### Return: - Live room data  # [示例/Example] room_id &#x3D; \&quot;7385461256746060575\&quot;
     * @param roomId 直播间id/Live room id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_0(String roomId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_0WithHttpInfo(roomId);
        return localVarResp.getData();
    }

    /**
     * 获取指定直播间的数据/Get data of specified live room
     * # [中文] ### 用途: - 获取指定直播间的数据 ### 参数: - room_id: 直播间id ### 返回: - 直播间数据  # [English] ### Purpose: - Get data of specified live room ### Parameters: - room_id: Live room id ### Return: - Live room data  # [示例/Example] room_id &#x3D; \&quot;7385461256746060575\&quot;
     * @param roomId 直播间id/Live room id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_0WithHttpInfo(String roomId) throws ApiException {
        okhttp3.Call localVarCall = fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_0ValidateBeforeCall(roomId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定直播间的数据/Get data of specified live room (asynchronously)
     * # [中文] ### 用途: - 获取指定直播间的数据 ### 参数: - room_id: 直播间id ### 返回: - 直播间数据  # [English] ### Purpose: - Get data of specified live room ### Parameters: - room_id: Live room id ### Return: - Live room data  # [示例/Example] room_id &#x3D; \&quot;7385461256746060575\&quot;
     * @param roomId 直播间id/Live room id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_0Async(String roomId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_0ValidateBeforeCall(roomId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGetCall(String keyword, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_live_search_result";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGetValidateBeforeCall(String keyword, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGetCall(keyword, offset, count, _callback);
        return localVarCall;

    }

    /**
     * 获取指定关键词的直播搜索结果/Get live search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet(String keyword, Integer offset, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGetWithHttpInfo(keyword, offset, count);
        return localVarResp.getData();
    }

    /**
     * 获取指定关键词的直播搜索结果/Get live search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGetWithHttpInfo(String keyword, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGetValidateBeforeCall(keyword, offset, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定关键词的直播搜索结果/Get live search results of specified keywords (asynchronously)
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGetAsync(String keyword, Integer offset, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGetValidateBeforeCall(keyword, offset, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_0
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_0Call(String keyword, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_live_search_result";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_0ValidateBeforeCall(String keyword, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_0Call(keyword, offset, count, _callback);
        return localVarCall;

    }

    /**
     * 获取指定关键词的直播搜索结果/Get live search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_0(String keyword, Integer offset, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_0WithHttpInfo(keyword, offset, count);
        return localVarResp.getData();
    }

    /**
     * 获取指定关键词的直播搜索结果/Get live search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_0WithHttpInfo(String keyword, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_0ValidateBeforeCall(keyword, offset, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定关键词的直播搜索结果/Get live search results of specified keywords (asynchronously)
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_0Async(String keyword, Integer offset, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_0ValidateBeforeCall(keyword, offset, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGetCall(String keyword, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_location_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGetValidateBeforeCall(String keyword, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGetCall(keyword, offset, count, _callback);
        return localVarCall;

    }

    /**
     * 获取地点搜索结果/Get location search results
     * # [中文] ### 用途: - 获取地点搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 地点搜索结果  # [English] ### Purpose: - Get location search results ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Location search results  # [示例/Example] keyword &#x3D; \&quot;Shanghai\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet(String keyword, Integer offset, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGetWithHttpInfo(keyword, offset, count);
        return localVarResp.getData();
    }

    /**
     * 获取地点搜索结果/Get location search results
     * # [中文] ### 用途: - 获取地点搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 地点搜索结果  # [English] ### Purpose: - Get location search results ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Location search results  # [示例/Example] keyword &#x3D; \&quot;Shanghai\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGetWithHttpInfo(String keyword, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGetValidateBeforeCall(keyword, offset, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取地点搜索结果/Get location search results (asynchronously)
     * # [中文] ### 用途: - 获取地点搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 地点搜索结果  # [English] ### Purpose: - Get location search results ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Location search results  # [示例/Example] keyword &#x3D; \&quot;Shanghai\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGetAsync(String keyword, Integer offset, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGetValidateBeforeCall(keyword, offset, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_0
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_0Call(String keyword, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_location_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_0ValidateBeforeCall(String keyword, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_0Call(keyword, offset, count, _callback);
        return localVarCall;

    }

    /**
     * 获取地点搜索结果/Get location search results
     * # [中文] ### 用途: - 获取地点搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 地点搜索结果  # [English] ### Purpose: - Get location search results ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Location search results  # [示例/Example] keyword &#x3D; \&quot;Shanghai\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_0(String keyword, Integer offset, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_0WithHttpInfo(keyword, offset, count);
        return localVarResp.getData();
    }

    /**
     * 获取地点搜索结果/Get location search results
     * # [中文] ### 用途: - 获取地点搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 地点搜索结果  # [English] ### Purpose: - Get location search results ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Location search results  # [示例/Example] keyword &#x3D; \&quot;Shanghai\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_0WithHttpInfo(String keyword, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_0ValidateBeforeCall(keyword, offset, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取地点搜索结果/Get location search results (asynchronously)
     * # [中文] ### 用途: - 获取地点搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 地点搜索结果  # [English] ### Purpose: - Get location search results ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Location search results  # [示例/Example] keyword &#x3D; \&quot;Shanghai\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_0Async(String keyword, Integer offset, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_0ValidateBeforeCall(keyword, offset, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPostCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_multi_video";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPostValidateBeforeCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPostCall(requestBody, _callback);
        return localVarCall;

    }

    /**
     * 批量获取视频信息/Batch Get Video Information
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 &#x3D; 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 &#x3D; 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids &#x3D; [         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,     ]
     * @param requestBody  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost(List<String> requestBody) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPostWithHttpInfo(requestBody);
        return localVarResp.getData();
    }

    /**
     * 批量获取视频信息/Batch Get Video Information
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 &#x3D; 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 &#x3D; 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids &#x3D; [         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,     ]
     * @param requestBody  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPostWithHttpInfo(List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPostValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 批量获取视频信息/Batch Get Video Information (asynchronously)
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 &#x3D; 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 &#x3D; 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids &#x3D; [         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,     ]
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPostAsync(List<String> requestBody, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPostValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_0
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_0Call(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_multi_video";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_0ValidateBeforeCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_0Call(requestBody, _callback);
        return localVarCall;

    }

    /**
     * 批量获取视频信息/Batch Get Video Information
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 &#x3D; 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 &#x3D; 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids &#x3D; [         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,     ]
     * @param requestBody  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_0(List<String> requestBody) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_0WithHttpInfo(requestBody);
        return localVarResp.getData();
    }

    /**
     * 批量获取视频信息/Batch Get Video Information
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 &#x3D; 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 &#x3D; 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids &#x3D; [         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,     ]
     * @param requestBody  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_0WithHttpInfo(List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_0ValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 批量获取视频信息/Batch Get Video Information (asynchronously)
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 &#x3D; 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 &#x3D; 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids &#x3D; [         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,         \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;, \&quot;7339393672959757570\&quot;,     ]
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_0Async(List<String> requestBody, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_0ValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet
     * @param musicId 音乐id/Music id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGetCall(String musicId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_music_detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (musicId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_id", musicId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGetValidateBeforeCall(String musicId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'musicId' is set
        if (musicId == null) {
            throw new ApiException("Missing the required parameter 'musicId' when calling fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGetCall(musicId, _callback);
        return localVarCall;

    }

    /**
     * 获取指定音乐的详情数据/Get details of specified music
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot;
     * @param musicId 音乐id/Music id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet(String musicId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGetWithHttpInfo(musicId);
        return localVarResp.getData();
    }

    /**
     * 获取指定音乐的详情数据/Get details of specified music
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot;
     * @param musicId 音乐id/Music id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGetWithHttpInfo(String musicId) throws ApiException {
        okhttp3.Call localVarCall = fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGetValidateBeforeCall(musicId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定音乐的详情数据/Get details of specified music (asynchronously)
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot;
     * @param musicId 音乐id/Music id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGetAsync(String musicId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGetValidateBeforeCall(musicId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_0
     * @param musicId 音乐id/Music id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_0Call(String musicId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_music_detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (musicId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_id", musicId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_0ValidateBeforeCall(String musicId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'musicId' is set
        if (musicId == null) {
            throw new ApiException("Missing the required parameter 'musicId' when calling fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_0Call(musicId, _callback);
        return localVarCall;

    }

    /**
     * 获取指定音乐的详情数据/Get details of specified music
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot;
     * @param musicId 音乐id/Music id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_0(String musicId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_0WithHttpInfo(musicId);
        return localVarResp.getData();
    }

    /**
     * 获取指定音乐的详情数据/Get details of specified music
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot;
     * @param musicId 音乐id/Music id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_0WithHttpInfo(String musicId) throws ApiException {
        okhttp3.Call localVarCall = fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_0ValidateBeforeCall(musicId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定音乐的详情数据/Get details of specified music (asynchronously)
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot;
     * @param musicId 音乐id/Music id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_0Async(String musicId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_0ValidateBeforeCall(musicId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGetCall(String keyword, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_music_search_result";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGetValidateBeforeCall(String keyword, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGetCall(keyword, offset, count, _callback);
        return localVarCall;

    }

    /**
     * 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet(String keyword, Integer offset, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGetWithHttpInfo(keyword, offset, count);
        return localVarResp.getData();
    }

    /**
     * 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGetWithHttpInfo(String keyword, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGetValidateBeforeCall(keyword, offset, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定关键词的音乐搜索结果/Get music search results of specified keywords (asynchronously)
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGetAsync(String keyword, Integer offset, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGetValidateBeforeCall(keyword, offset, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_0
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_0Call(String keyword, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_music_search_result";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_0ValidateBeforeCall(String keyword, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_0Call(keyword, offset, count, _callback);
        return localVarCall;

    }

    /**
     * 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_0(String keyword, Integer offset, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_0WithHttpInfo(keyword, offset, count);
        return localVarResp.getData();
    }

    /**
     * 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_0WithHttpInfo(String keyword, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_0ValidateBeforeCall(keyword, offset, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定关键词的音乐搜索结果/Get music search results of specified keywords (asynchronously)
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_0Async(String keyword, Integer offset, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_0ValidateBeforeCall(keyword, offset, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet
     * @param musicId 音乐id/Music id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGetCall(String musicId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_music_video_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (musicId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_id", musicId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGetValidateBeforeCall(String musicId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'musicId' is set
        if (musicId == null) {
            throw new ApiException("Missing the required parameter 'musicId' when calling fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGetCall(musicId, cursor, count, _callback);
        return localVarCall;

    }

    /**
     * 获取指定音乐的视频列表数据/Get video list of specified music
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot; cursor &#x3D; 0 count &#x3D; 10
     * @param musicId 音乐id/Music id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet(String musicId, Integer cursor, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGetWithHttpInfo(musicId, cursor, count);
        return localVarResp.getData();
    }

    /**
     * 获取指定音乐的视频列表数据/Get video list of specified music
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot; cursor &#x3D; 0 count &#x3D; 10
     * @param musicId 音乐id/Music id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGetWithHttpInfo(String musicId, Integer cursor, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGetValidateBeforeCall(musicId, cursor, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定音乐的视频列表数据/Get video list of specified music (asynchronously)
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot; cursor &#x3D; 0 count &#x3D; 10
     * @param musicId 音乐id/Music id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGetAsync(String musicId, Integer cursor, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGetValidateBeforeCall(musicId, cursor, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_0
     * @param musicId 音乐id/Music id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_0Call(String musicId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_music_video_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (musicId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_id", musicId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_0ValidateBeforeCall(String musicId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'musicId' is set
        if (musicId == null) {
            throw new ApiException("Missing the required parameter 'musicId' when calling fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_0Call(musicId, cursor, count, _callback);
        return localVarCall;

    }

    /**
     * 获取指定音乐的视频列表数据/Get video list of specified music
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot; cursor &#x3D; 0 count &#x3D; 10
     * @param musicId 音乐id/Music id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_0(String musicId, Integer cursor, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_0WithHttpInfo(musicId, cursor, count);
        return localVarResp.getData();
    }

    /**
     * 获取指定音乐的视频列表数据/Get video list of specified music
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot; cursor &#x3D; 0 count &#x3D; 10
     * @param musicId 音乐id/Music id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_0WithHttpInfo(String musicId, Integer cursor, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_0ValidateBeforeCall(musicId, cursor, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定音乐的视频列表数据/Get video list of specified music (asynchronously)
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot; cursor &#x3D; 0 count &#x3D; 10
     * @param musicId 音乐id/Music id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_0Async(String musicId, Integer cursor, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_0ValidateBeforeCall(musicId, cursor, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet
     * @param awemeId 作品id/Video id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchOneVideoApiV1TiktokAppV3FetchOneVideoGetCall(String awemeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_one_video";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (awemeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aweme_id", awemeId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchOneVideoApiV1TiktokAppV3FetchOneVideoGetValidateBeforeCall(String awemeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'awemeId' is set
        if (awemeId == null) {
            throw new ApiException("Missing the required parameter 'awemeId' when calling fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchOneVideoApiV1TiktokAppV3FetchOneVideoGetCall(awemeId, _callback);
        return localVarCall;

    }

    /**
     * 获取单个作品数据/Get single video data
     * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7350810998023949599\&quot;
     * @param awemeId 作品id/Video id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet(String awemeId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchOneVideoApiV1TiktokAppV3FetchOneVideoGetWithHttpInfo(awemeId);
        return localVarResp.getData();
    }

    /**
     * 获取单个作品数据/Get single video data
     * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7350810998023949599\&quot;
     * @param awemeId 作品id/Video id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchOneVideoApiV1TiktokAppV3FetchOneVideoGetWithHttpInfo(String awemeId) throws ApiException {
        okhttp3.Call localVarCall = fetchOneVideoApiV1TiktokAppV3FetchOneVideoGetValidateBeforeCall(awemeId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取单个作品数据/Get single video data (asynchronously)
     * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7350810998023949599\&quot;
     * @param awemeId 作品id/Video id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchOneVideoApiV1TiktokAppV3FetchOneVideoGetAsync(String awemeId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchOneVideoApiV1TiktokAppV3FetchOneVideoGetValidateBeforeCall(awemeId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_0
     * @param awemeId 作品id/Video id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_0Call(String awemeId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_one_video";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (awemeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aweme_id", awemeId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_0ValidateBeforeCall(String awemeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'awemeId' is set
        if (awemeId == null) {
            throw new ApiException("Missing the required parameter 'awemeId' when calling fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_0Call(awemeId, _callback);
        return localVarCall;

    }

    /**
     * 获取单个作品数据/Get single video data
     * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7350810998023949599\&quot;
     * @param awemeId 作品id/Video id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_0(String awemeId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_0WithHttpInfo(awemeId);
        return localVarResp.getData();
    }

    /**
     * 获取单个作品数据/Get single video data
     * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7350810998023949599\&quot;
     * @param awemeId 作品id/Video id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_0WithHttpInfo(String awemeId) throws ApiException {
        okhttp3.Call localVarCall = fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_0ValidateBeforeCall(awemeId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取单个作品数据/Get single video data (asynchronously)
     * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7350810998023949599\&quot;
     * @param awemeId 作品id/Video id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_0Async(String awemeId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_0ValidateBeforeCall(awemeId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet
     * @param shareUrl 分享链接/Share link (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGetCall(String shareUrl, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_one_video_by_share_url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (shareUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("share_url", shareUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGetValidateBeforeCall(String shareUrl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shareUrl' is set
        if (shareUrl == null) {
            throw new ApiException("Missing the required parameter 'shareUrl' when calling fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGetCall(shareUrl, _callback);
        return localVarCall;

    }

    /**
     * 根据分享链接获取单个作品数据/Get single video data by sharing link
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url &#x3D; \&quot;https://www.tiktok.com/t/ZTFNEj8Hk/\&quot;
     * @param shareUrl 分享链接/Share link (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet(String shareUrl) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGetWithHttpInfo(shareUrl);
        return localVarResp.getData();
    }

    /**
     * 根据分享链接获取单个作品数据/Get single video data by sharing link
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url &#x3D; \&quot;https://www.tiktok.com/t/ZTFNEj8Hk/\&quot;
     * @param shareUrl 分享链接/Share link (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGetWithHttpInfo(String shareUrl) throws ApiException {
        okhttp3.Call localVarCall = fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGetValidateBeforeCall(shareUrl, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据分享链接获取单个作品数据/Get single video data by sharing link (asynchronously)
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url &#x3D; \&quot;https://www.tiktok.com/t/ZTFNEj8Hk/\&quot;
     * @param shareUrl 分享链接/Share link (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGetAsync(String shareUrl, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGetValidateBeforeCall(shareUrl, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_0
     * @param shareUrl 分享链接/Share link (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_0Call(String shareUrl, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_one_video_by_share_url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (shareUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("share_url", shareUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_0ValidateBeforeCall(String shareUrl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shareUrl' is set
        if (shareUrl == null) {
            throw new ApiException("Missing the required parameter 'shareUrl' when calling fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_0Call(shareUrl, _callback);
        return localVarCall;

    }

    /**
     * 根据分享链接获取单个作品数据/Get single video data by sharing link
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url &#x3D; \&quot;https://www.tiktok.com/t/ZTFNEj8Hk/\&quot;
     * @param shareUrl 分享链接/Share link (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_0(String shareUrl) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_0WithHttpInfo(shareUrl);
        return localVarResp.getData();
    }

    /**
     * 根据分享链接获取单个作品数据/Get single video data by sharing link
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url &#x3D; \&quot;https://www.tiktok.com/t/ZTFNEj8Hk/\&quot;
     * @param shareUrl 分享链接/Share link (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_0WithHttpInfo(String shareUrl) throws ApiException {
        okhttp3.Call localVarCall = fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_0ValidateBeforeCall(shareUrl, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据分享链接获取单个作品数据/Get single video data by sharing link (asynchronously)
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url &#x3D; \&quot;https://www.tiktok.com/t/ZTFNEj8Hk/\&quot;
     * @param shareUrl 分享链接/Share link (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_0Async(String shareUrl, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_0ValidateBeforeCall(shareUrl, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet
     * @param productId 商品id/Product id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchProductDetailApiV1TiktokAppV3FetchProductDetailGetCall(String productId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_product_detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchProductDetailApiV1TiktokAppV3FetchProductDetailGetValidateBeforeCall(String productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchProductDetailApiV1TiktokAppV3FetchProductDetailGetCall(productId, _callback);
        return localVarCall;

    }

    /**
     * 获取商品详情数据/Get product detail data
     * # [中文] ### 用途: - 获取商品详情数据 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据  # [English] ### Purpose: - Get product detail data ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data  # [示例/Example] product_id &#x3D; \&quot;1729395826843881606\&quot;
     * @param productId 商品id/Product id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet(String productId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchProductDetailApiV1TiktokAppV3FetchProductDetailGetWithHttpInfo(productId);
        return localVarResp.getData();
    }

    /**
     * 获取商品详情数据/Get product detail data
     * # [中文] ### 用途: - 获取商品详情数据 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据  # [English] ### Purpose: - Get product detail data ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data  # [示例/Example] product_id &#x3D; \&quot;1729395826843881606\&quot;
     * @param productId 商品id/Product id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchProductDetailApiV1TiktokAppV3FetchProductDetailGetWithHttpInfo(String productId) throws ApiException {
        okhttp3.Call localVarCall = fetchProductDetailApiV1TiktokAppV3FetchProductDetailGetValidateBeforeCall(productId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取商品详情数据/Get product detail data (asynchronously)
     * # [中文] ### 用途: - 获取商品详情数据 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据  # [English] ### Purpose: - Get product detail data ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data  # [示例/Example] product_id &#x3D; \&quot;1729395826843881606\&quot;
     * @param productId 商品id/Product id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchProductDetailApiV1TiktokAppV3FetchProductDetailGetAsync(String productId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchProductDetailApiV1TiktokAppV3FetchProductDetailGetValidateBeforeCall(productId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_0
     * @param productId 商品id/Product id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_0Call(String productId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_product_detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_0ValidateBeforeCall(String productId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_0Call(productId, _callback);
        return localVarCall;

    }

    /**
     * 获取商品详情数据/Get product detail data
     * # [中文] ### 用途: - 获取商品详情数据 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据  # [English] ### Purpose: - Get product detail data ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data  # [示例/Example] product_id &#x3D; \&quot;1729395826843881606\&quot;
     * @param productId 商品id/Product id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_0(String productId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_0WithHttpInfo(productId);
        return localVarResp.getData();
    }

    /**
     * 获取商品详情数据/Get product detail data
     * # [中文] ### 用途: - 获取商品详情数据 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据  # [English] ### Purpose: - Get product detail data ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data  # [示例/Example] product_id &#x3D; \&quot;1729395826843881606\&quot;
     * @param productId 商品id/Product id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_0WithHttpInfo(String productId) throws ApiException {
        okhttp3.Call localVarCall = fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_0ValidateBeforeCall(productId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取商品详情数据/Get product detail data (asynchronously)
     * # [中文] ### 用途: - 获取商品详情数据 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据  # [English] ### Purpose: - Get product detail data ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data  # [示例/Example] product_id &#x3D; \&quot;1729395826843881606\&quot;
     * @param productId 商品id/Product id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_0Async(String productId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_0ValidateBeforeCall(productId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet
     * @param productId 商品id/Product id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param size 数量/Number (optional, default to 10)
     * @param filterId 筛选条件/Filter condition (optional, default to 0)
     * @param sortType 排序条件/Sorting conditions (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchProductReviewApiV1TiktokAppV3FetchProductReviewGetCall(String productId, Integer cursor, Integer size, Integer filterId, Integer sortType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_product_review";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (filterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_id", filterId));
        }

        if (sortType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_type", sortType));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchProductReviewApiV1TiktokAppV3FetchProductReviewGetValidateBeforeCall(String productId, Integer cursor, Integer size, Integer filterId, Integer sortType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchProductReviewApiV1TiktokAppV3FetchProductReviewGetCall(productId, cursor, size, filterId, sortType, _callback);
        return localVarCall;

    }

    /**
     * 获取商品评价数据/Get product review data
     * # [中文] ### 用途: - 获取商品评价数据 ### 参数: - product_id: 商品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - size: 数量 - filter_id: 筛选条件     - 0: 全部评价     - 1: 1星评价     - 2: 2星评价     - 3: 3星评价     - 4: 4星评价     - 5: 5星评价     - 102: 有图评价     - 104: 已购买的评价 - sort_type: 排序条件     - 1: 相关度     - 2: 从新到旧 ### 返回: - 商品评价数据  # [English] ### Purpose: - Get product review data ### Parameters: - product_id: Product id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - size: Count number - filter_id: Filter condition     - 0: All reviews     - 1: 1-star review     - 2: 2-star review     - 3: 3-star review     - 4: 4-star review     - 5: 5-star review     - 102: Reviews with pictures     - 104: Reviews of purchased products - sort_type: Sorting conditions     - 1: Relevance     - 2: New to old ### Return: - Product review data  # [示例/Example] product_id &#x3D; \&quot;1729448812983194615\&quot; cursor &#x3D; 0 size &#x3D; 10 filter_id &#x3D; 0 sort_type &#x3D; 0
     * @param productId 商品id/Product id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param size 数量/Number (optional, default to 10)
     * @param filterId 筛选条件/Filter condition (optional, default to 0)
     * @param sortType 排序条件/Sorting conditions (optional, default to 0)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet(String productId, Integer cursor, Integer size, Integer filterId, Integer sortType) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchProductReviewApiV1TiktokAppV3FetchProductReviewGetWithHttpInfo(productId, cursor, size, filterId, sortType);
        return localVarResp.getData();
    }

    /**
     * 获取商品评价数据/Get product review data
     * # [中文] ### 用途: - 获取商品评价数据 ### 参数: - product_id: 商品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - size: 数量 - filter_id: 筛选条件     - 0: 全部评价     - 1: 1星评价     - 2: 2星评价     - 3: 3星评价     - 4: 4星评价     - 5: 5星评价     - 102: 有图评价     - 104: 已购买的评价 - sort_type: 排序条件     - 1: 相关度     - 2: 从新到旧 ### 返回: - 商品评价数据  # [English] ### Purpose: - Get product review data ### Parameters: - product_id: Product id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - size: Count number - filter_id: Filter condition     - 0: All reviews     - 1: 1-star review     - 2: 2-star review     - 3: 3-star review     - 4: 4-star review     - 5: 5-star review     - 102: Reviews with pictures     - 104: Reviews of purchased products - sort_type: Sorting conditions     - 1: Relevance     - 2: New to old ### Return: - Product review data  # [示例/Example] product_id &#x3D; \&quot;1729448812983194615\&quot; cursor &#x3D; 0 size &#x3D; 10 filter_id &#x3D; 0 sort_type &#x3D; 0
     * @param productId 商品id/Product id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param size 数量/Number (optional, default to 10)
     * @param filterId 筛选条件/Filter condition (optional, default to 0)
     * @param sortType 排序条件/Sorting conditions (optional, default to 0)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchProductReviewApiV1TiktokAppV3FetchProductReviewGetWithHttpInfo(String productId, Integer cursor, Integer size, Integer filterId, Integer sortType) throws ApiException {
        okhttp3.Call localVarCall = fetchProductReviewApiV1TiktokAppV3FetchProductReviewGetValidateBeforeCall(productId, cursor, size, filterId, sortType, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取商品评价数据/Get product review data (asynchronously)
     * # [中文] ### 用途: - 获取商品评价数据 ### 参数: - product_id: 商品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - size: 数量 - filter_id: 筛选条件     - 0: 全部评价     - 1: 1星评价     - 2: 2星评价     - 3: 3星评价     - 4: 4星评价     - 5: 5星评价     - 102: 有图评价     - 104: 已购买的评价 - sort_type: 排序条件     - 1: 相关度     - 2: 从新到旧 ### 返回: - 商品评价数据  # [English] ### Purpose: - Get product review data ### Parameters: - product_id: Product id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - size: Count number - filter_id: Filter condition     - 0: All reviews     - 1: 1-star review     - 2: 2-star review     - 3: 3-star review     - 4: 4-star review     - 5: 5-star review     - 102: Reviews with pictures     - 104: Reviews of purchased products - sort_type: Sorting conditions     - 1: Relevance     - 2: New to old ### Return: - Product review data  # [示例/Example] product_id &#x3D; \&quot;1729448812983194615\&quot; cursor &#x3D; 0 size &#x3D; 10 filter_id &#x3D; 0 sort_type &#x3D; 0
     * @param productId 商品id/Product id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param size 数量/Number (optional, default to 10)
     * @param filterId 筛选条件/Filter condition (optional, default to 0)
     * @param sortType 排序条件/Sorting conditions (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchProductReviewApiV1TiktokAppV3FetchProductReviewGetAsync(String productId, Integer cursor, Integer size, Integer filterId, Integer sortType, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchProductReviewApiV1TiktokAppV3FetchProductReviewGetValidateBeforeCall(productId, cursor, size, filterId, sortType, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_0
     * @param productId 商品id/Product id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param size 数量/Number (optional, default to 10)
     * @param filterId 筛选条件/Filter condition (optional, default to 0)
     * @param sortType 排序条件/Sorting conditions (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_0Call(String productId, Integer cursor, Integer size, Integer filterId, Integer sortType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_product_review";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_id", productId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (filterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_id", filterId));
        }

        if (sortType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_type", sortType));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_0ValidateBeforeCall(String productId, Integer cursor, Integer size, Integer filterId, Integer sortType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_0Call(productId, cursor, size, filterId, sortType, _callback);
        return localVarCall;

    }

    /**
     * 获取商品评价数据/Get product review data
     * # [中文] ### 用途: - 获取商品评价数据 ### 参数: - product_id: 商品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - size: 数量 - filter_id: 筛选条件     - 0: 全部评价     - 1: 1星评价     - 2: 2星评价     - 3: 3星评价     - 4: 4星评价     - 5: 5星评价     - 102: 有图评价     - 104: 已购买的评价 - sort_type: 排序条件     - 1: 相关度     - 2: 从新到旧 ### 返回: - 商品评价数据  # [English] ### Purpose: - Get product review data ### Parameters: - product_id: Product id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - size: Count number - filter_id: Filter condition     - 0: All reviews     - 1: 1-star review     - 2: 2-star review     - 3: 3-star review     - 4: 4-star review     - 5: 5-star review     - 102: Reviews with pictures     - 104: Reviews of purchased products - sort_type: Sorting conditions     - 1: Relevance     - 2: New to old ### Return: - Product review data  # [示例/Example] product_id &#x3D; \&quot;1729448812983194615\&quot; cursor &#x3D; 0 size &#x3D; 10 filter_id &#x3D; 0 sort_type &#x3D; 0
     * @param productId 商品id/Product id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param size 数量/Number (optional, default to 10)
     * @param filterId 筛选条件/Filter condition (optional, default to 0)
     * @param sortType 排序条件/Sorting conditions (optional, default to 0)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_0(String productId, Integer cursor, Integer size, Integer filterId, Integer sortType) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_0WithHttpInfo(productId, cursor, size, filterId, sortType);
        return localVarResp.getData();
    }

    /**
     * 获取商品评价数据/Get product review data
     * # [中文] ### 用途: - 获取商品评价数据 ### 参数: - product_id: 商品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - size: 数量 - filter_id: 筛选条件     - 0: 全部评价     - 1: 1星评价     - 2: 2星评价     - 3: 3星评价     - 4: 4星评价     - 5: 5星评价     - 102: 有图评价     - 104: 已购买的评价 - sort_type: 排序条件     - 1: 相关度     - 2: 从新到旧 ### 返回: - 商品评价数据  # [English] ### Purpose: - Get product review data ### Parameters: - product_id: Product id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - size: Count number - filter_id: Filter condition     - 0: All reviews     - 1: 1-star review     - 2: 2-star review     - 3: 3-star review     - 4: 4-star review     - 5: 5-star review     - 102: Reviews with pictures     - 104: Reviews of purchased products - sort_type: Sorting conditions     - 1: Relevance     - 2: New to old ### Return: - Product review data  # [示例/Example] product_id &#x3D; \&quot;1729448812983194615\&quot; cursor &#x3D; 0 size &#x3D; 10 filter_id &#x3D; 0 sort_type &#x3D; 0
     * @param productId 商品id/Product id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param size 数量/Number (optional, default to 10)
     * @param filterId 筛选条件/Filter condition (optional, default to 0)
     * @param sortType 排序条件/Sorting conditions (optional, default to 0)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_0WithHttpInfo(String productId, Integer cursor, Integer size, Integer filterId, Integer sortType) throws ApiException {
        okhttp3.Call localVarCall = fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_0ValidateBeforeCall(productId, cursor, size, filterId, sortType, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取商品评价数据/Get product review data (asynchronously)
     * # [中文] ### 用途: - 获取商品评价数据 ### 参数: - product_id: 商品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - size: 数量 - filter_id: 筛选条件     - 0: 全部评价     - 1: 1星评价     - 2: 2星评价     - 3: 3星评价     - 4: 4星评价     - 5: 5星评价     - 102: 有图评价     - 104: 已购买的评价 - sort_type: 排序条件     - 1: 相关度     - 2: 从新到旧 ### 返回: - 商品评价数据  # [English] ### Purpose: - Get product review data ### Parameters: - product_id: Product id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - size: Count number - filter_id: Filter condition     - 0: All reviews     - 1: 1-star review     - 2: 2-star review     - 3: 3-star review     - 4: 4-star review     - 5: 5-star review     - 102: Reviews with pictures     - 104: Reviews of purchased products - sort_type: Sorting conditions     - 1: Relevance     - 2: New to old ### Return: - Product review data  # [示例/Example] product_id &#x3D; \&quot;1729448812983194615\&quot; cursor &#x3D; 0 size &#x3D; 10 filter_id &#x3D; 0 sort_type &#x3D; 0
     * @param productId 商品id/Product id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param size 数量/Number (optional, default to 10)
     * @param filterId 筛选条件/Filter condition (optional, default to 0)
     * @param sortType 排序条件/Sorting conditions (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_0Async(String productId, Integer cursor, Integer size, Integer filterId, Integer sortType, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_0ValidateBeforeCall(productId, cursor, size, filterId, sortType, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet
     * @param keyword 关键词/Keyword (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 12)
     * @param sortType 商品排序条件/Product sorting conditions (optional, default to 1)
     * @param customerReviewFourStar 四星以上评价/Four-star or more reviews (optional, default to false)
     * @param haveDiscount 有优惠/Having discount (optional, default to false)
     * @param minPrice 最低价格/Minimum price (optional, default to &quot;&quot;)
     * @param maxPrice 最高价格/Maximum price (optional, default to &quot;&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchProductSearchApiV1TiktokAppV3FetchProductSearchGetCall(String keyword, Integer cursor, Integer count, Integer sortType, Boolean customerReviewFourStar, Boolean haveDiscount, String minPrice, String maxPrice, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_product_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (sortType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_type", sortType));
        }

        if (customerReviewFourStar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_review_four_star", customerReviewFourStar));
        }

        if (haveDiscount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("have_discount", haveDiscount));
        }

        if (minPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_price", minPrice));
        }

        if (maxPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_price", maxPrice));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchProductSearchApiV1TiktokAppV3FetchProductSearchGetValidateBeforeCall(String keyword, Integer cursor, Integer count, Integer sortType, Boolean customerReviewFourStar, Boolean haveDiscount, String minPrice, String maxPrice, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchProductSearchApiV1TiktokAppV3FetchProductSearchGetCall(keyword, cursor, count, sortType, customerReviewFourStar, haveDiscount, minPrice, maxPrice, _callback);
        return localVarCall;

    }

    /**
     * 获取商品搜索结果/Get product search results
     * # [中文] ### 用途: - 获取商品搜索结果 ### 参数: - keyword: 关键词 - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 - sort_type: 商品排序条件     - 1: 综合排序     - 2: 销量排序     - 3: 价格从高到低     - 4: 价格从低到高     - 5: 最新发布 - customer_review_four_star: 四星以上评价 - have_discount: 有优惠 - min_price: 最低价格 - max_price: 最高价格 ### 返回: - 商品搜索结果  # [English] ### Purpose: - Get product search results ### Parameters: - keyword: Keyword - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number - sort_type: Product sorting conditions     - 1: Comprehensive sorting     - 2: Sales volume sorting     - 3: Price high to low     - 4: Price low to high     - 5: Latest release - customer_review_four_star: Four-star or more reviews - have_discount: Having discount - min_price: Minimum price - max_price: Maximum price ### Return: - Product search results  # [示例/Example] keyword &#x3D; \&quot;Cat Toy\&quot; cursor &#x3D; 0 count &#x3D; 12 sort_type &#x3D; 1 customer_review_four_star &#x3D; False have_discount &#x3D; False min_price &#x3D; \&quot;10\&quot; max_price &#x3D; \&quot;25\&quot;
     * @param keyword 关键词/Keyword (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 12)
     * @param sortType 商品排序条件/Product sorting conditions (optional, default to 1)
     * @param customerReviewFourStar 四星以上评价/Four-star or more reviews (optional, default to false)
     * @param haveDiscount 有优惠/Having discount (optional, default to false)
     * @param minPrice 最低价格/Minimum price (optional, default to &quot;&quot;)
     * @param maxPrice 最高价格/Maximum price (optional, default to &quot;&quot;)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet(String keyword, Integer cursor, Integer count, Integer sortType, Boolean customerReviewFourStar, Boolean haveDiscount, String minPrice, String maxPrice) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchProductSearchApiV1TiktokAppV3FetchProductSearchGetWithHttpInfo(keyword, cursor, count, sortType, customerReviewFourStar, haveDiscount, minPrice, maxPrice);
        return localVarResp.getData();
    }

    /**
     * 获取商品搜索结果/Get product search results
     * # [中文] ### 用途: - 获取商品搜索结果 ### 参数: - keyword: 关键词 - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 - sort_type: 商品排序条件     - 1: 综合排序     - 2: 销量排序     - 3: 价格从高到低     - 4: 价格从低到高     - 5: 最新发布 - customer_review_four_star: 四星以上评价 - have_discount: 有优惠 - min_price: 最低价格 - max_price: 最高价格 ### 返回: - 商品搜索结果  # [English] ### Purpose: - Get product search results ### Parameters: - keyword: Keyword - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number - sort_type: Product sorting conditions     - 1: Comprehensive sorting     - 2: Sales volume sorting     - 3: Price high to low     - 4: Price low to high     - 5: Latest release - customer_review_four_star: Four-star or more reviews - have_discount: Having discount - min_price: Minimum price - max_price: Maximum price ### Return: - Product search results  # [示例/Example] keyword &#x3D; \&quot;Cat Toy\&quot; cursor &#x3D; 0 count &#x3D; 12 sort_type &#x3D; 1 customer_review_four_star &#x3D; False have_discount &#x3D; False min_price &#x3D; \&quot;10\&quot; max_price &#x3D; \&quot;25\&quot;
     * @param keyword 关键词/Keyword (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 12)
     * @param sortType 商品排序条件/Product sorting conditions (optional, default to 1)
     * @param customerReviewFourStar 四星以上评价/Four-star or more reviews (optional, default to false)
     * @param haveDiscount 有优惠/Having discount (optional, default to false)
     * @param minPrice 最低价格/Minimum price (optional, default to &quot;&quot;)
     * @param maxPrice 最高价格/Maximum price (optional, default to &quot;&quot;)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchProductSearchApiV1TiktokAppV3FetchProductSearchGetWithHttpInfo(String keyword, Integer cursor, Integer count, Integer sortType, Boolean customerReviewFourStar, Boolean haveDiscount, String minPrice, String maxPrice) throws ApiException {
        okhttp3.Call localVarCall = fetchProductSearchApiV1TiktokAppV3FetchProductSearchGetValidateBeforeCall(keyword, cursor, count, sortType, customerReviewFourStar, haveDiscount, minPrice, maxPrice, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取商品搜索结果/Get product search results (asynchronously)
     * # [中文] ### 用途: - 获取商品搜索结果 ### 参数: - keyword: 关键词 - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 - sort_type: 商品排序条件     - 1: 综合排序     - 2: 销量排序     - 3: 价格从高到低     - 4: 价格从低到高     - 5: 最新发布 - customer_review_four_star: 四星以上评价 - have_discount: 有优惠 - min_price: 最低价格 - max_price: 最高价格 ### 返回: - 商品搜索结果  # [English] ### Purpose: - Get product search results ### Parameters: - keyword: Keyword - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number - sort_type: Product sorting conditions     - 1: Comprehensive sorting     - 2: Sales volume sorting     - 3: Price high to low     - 4: Price low to high     - 5: Latest release - customer_review_four_star: Four-star or more reviews - have_discount: Having discount - min_price: Minimum price - max_price: Maximum price ### Return: - Product search results  # [示例/Example] keyword &#x3D; \&quot;Cat Toy\&quot; cursor &#x3D; 0 count &#x3D; 12 sort_type &#x3D; 1 customer_review_four_star &#x3D; False have_discount &#x3D; False min_price &#x3D; \&quot;10\&quot; max_price &#x3D; \&quot;25\&quot;
     * @param keyword 关键词/Keyword (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 12)
     * @param sortType 商品排序条件/Product sorting conditions (optional, default to 1)
     * @param customerReviewFourStar 四星以上评价/Four-star or more reviews (optional, default to false)
     * @param haveDiscount 有优惠/Having discount (optional, default to false)
     * @param minPrice 最低价格/Minimum price (optional, default to &quot;&quot;)
     * @param maxPrice 最高价格/Maximum price (optional, default to &quot;&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchProductSearchApiV1TiktokAppV3FetchProductSearchGetAsync(String keyword, Integer cursor, Integer count, Integer sortType, Boolean customerReviewFourStar, Boolean haveDiscount, String minPrice, String maxPrice, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchProductSearchApiV1TiktokAppV3FetchProductSearchGetValidateBeforeCall(keyword, cursor, count, sortType, customerReviewFourStar, haveDiscount, minPrice, maxPrice, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_0
     * @param keyword 关键词/Keyword (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 12)
     * @param sortType 商品排序条件/Product sorting conditions (optional, default to 1)
     * @param customerReviewFourStar 四星以上评价/Four-star or more reviews (optional, default to false)
     * @param haveDiscount 有优惠/Having discount (optional, default to false)
     * @param minPrice 最低价格/Minimum price (optional, default to &quot;&quot;)
     * @param maxPrice 最高价格/Maximum price (optional, default to &quot;&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_0Call(String keyword, Integer cursor, Integer count, Integer sortType, Boolean customerReviewFourStar, Boolean haveDiscount, String minPrice, String maxPrice, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_product_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (sortType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_type", sortType));
        }

        if (customerReviewFourStar != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customer_review_four_star", customerReviewFourStar));
        }

        if (haveDiscount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("have_discount", haveDiscount));
        }

        if (minPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_price", minPrice));
        }

        if (maxPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_price", maxPrice));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_0ValidateBeforeCall(String keyword, Integer cursor, Integer count, Integer sortType, Boolean customerReviewFourStar, Boolean haveDiscount, String minPrice, String maxPrice, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_0Call(keyword, cursor, count, sortType, customerReviewFourStar, haveDiscount, minPrice, maxPrice, _callback);
        return localVarCall;

    }

    /**
     * 获取商品搜索结果/Get product search results
     * # [中文] ### 用途: - 获取商品搜索结果 ### 参数: - keyword: 关键词 - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 - sort_type: 商品排序条件     - 1: 综合排序     - 2: 销量排序     - 3: 价格从高到低     - 4: 价格从低到高     - 5: 最新发布 - customer_review_four_star: 四星以上评价 - have_discount: 有优惠 - min_price: 最低价格 - max_price: 最高价格 ### 返回: - 商品搜索结果  # [English] ### Purpose: - Get product search results ### Parameters: - keyword: Keyword - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number - sort_type: Product sorting conditions     - 1: Comprehensive sorting     - 2: Sales volume sorting     - 3: Price high to low     - 4: Price low to high     - 5: Latest release - customer_review_four_star: Four-star or more reviews - have_discount: Having discount - min_price: Minimum price - max_price: Maximum price ### Return: - Product search results  # [示例/Example] keyword &#x3D; \&quot;Cat Toy\&quot; cursor &#x3D; 0 count &#x3D; 12 sort_type &#x3D; 1 customer_review_four_star &#x3D; False have_discount &#x3D; False min_price &#x3D; \&quot;10\&quot; max_price &#x3D; \&quot;25\&quot;
     * @param keyword 关键词/Keyword (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 12)
     * @param sortType 商品排序条件/Product sorting conditions (optional, default to 1)
     * @param customerReviewFourStar 四星以上评价/Four-star or more reviews (optional, default to false)
     * @param haveDiscount 有优惠/Having discount (optional, default to false)
     * @param minPrice 最低价格/Minimum price (optional, default to &quot;&quot;)
     * @param maxPrice 最高价格/Maximum price (optional, default to &quot;&quot;)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_0(String keyword, Integer cursor, Integer count, Integer sortType, Boolean customerReviewFourStar, Boolean haveDiscount, String minPrice, String maxPrice) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_0WithHttpInfo(keyword, cursor, count, sortType, customerReviewFourStar, haveDiscount, minPrice, maxPrice);
        return localVarResp.getData();
    }

    /**
     * 获取商品搜索结果/Get product search results
     * # [中文] ### 用途: - 获取商品搜索结果 ### 参数: - keyword: 关键词 - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 - sort_type: 商品排序条件     - 1: 综合排序     - 2: 销量排序     - 3: 价格从高到低     - 4: 价格从低到高     - 5: 最新发布 - customer_review_four_star: 四星以上评价 - have_discount: 有优惠 - min_price: 最低价格 - max_price: 最高价格 ### 返回: - 商品搜索结果  # [English] ### Purpose: - Get product search results ### Parameters: - keyword: Keyword - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number - sort_type: Product sorting conditions     - 1: Comprehensive sorting     - 2: Sales volume sorting     - 3: Price high to low     - 4: Price low to high     - 5: Latest release - customer_review_four_star: Four-star or more reviews - have_discount: Having discount - min_price: Minimum price - max_price: Maximum price ### Return: - Product search results  # [示例/Example] keyword &#x3D; \&quot;Cat Toy\&quot; cursor &#x3D; 0 count &#x3D; 12 sort_type &#x3D; 1 customer_review_four_star &#x3D; False have_discount &#x3D; False min_price &#x3D; \&quot;10\&quot; max_price &#x3D; \&quot;25\&quot;
     * @param keyword 关键词/Keyword (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 12)
     * @param sortType 商品排序条件/Product sorting conditions (optional, default to 1)
     * @param customerReviewFourStar 四星以上评价/Four-star or more reviews (optional, default to false)
     * @param haveDiscount 有优惠/Having discount (optional, default to false)
     * @param minPrice 最低价格/Minimum price (optional, default to &quot;&quot;)
     * @param maxPrice 最高价格/Maximum price (optional, default to &quot;&quot;)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_0WithHttpInfo(String keyword, Integer cursor, Integer count, Integer sortType, Boolean customerReviewFourStar, Boolean haveDiscount, String minPrice, String maxPrice) throws ApiException {
        okhttp3.Call localVarCall = fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_0ValidateBeforeCall(keyword, cursor, count, sortType, customerReviewFourStar, haveDiscount, minPrice, maxPrice, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取商品搜索结果/Get product search results (asynchronously)
     * # [中文] ### 用途: - 获取商品搜索结果 ### 参数: - keyword: 关键词 - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 - sort_type: 商品排序条件     - 1: 综合排序     - 2: 销量排序     - 3: 价格从高到低     - 4: 价格从低到高     - 5: 最新发布 - customer_review_four_star: 四星以上评价 - have_discount: 有优惠 - min_price: 最低价格 - max_price: 最高价格 ### 返回: - 商品搜索结果  # [English] ### Purpose: - Get product search results ### Parameters: - keyword: Keyword - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number - sort_type: Product sorting conditions     - 1: Comprehensive sorting     - 2: Sales volume sorting     - 3: Price high to low     - 4: Price low to high     - 5: Latest release - customer_review_four_star: Four-star or more reviews - have_discount: Having discount - min_price: Minimum price - max_price: Maximum price ### Return: - Product search results  # [示例/Example] keyword &#x3D; \&quot;Cat Toy\&quot; cursor &#x3D; 0 count &#x3D; 12 sort_type &#x3D; 1 customer_review_four_star &#x3D; False have_discount &#x3D; False min_price &#x3D; \&quot;10\&quot; max_price &#x3D; \&quot;25\&quot;
     * @param keyword 关键词/Keyword (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 12)
     * @param sortType 商品排序条件/Product sorting conditions (optional, default to 1)
     * @param customerReviewFourStar 四星以上评价/Four-star or more reviews (optional, default to false)
     * @param haveDiscount 有优惠/Having discount (optional, default to false)
     * @param minPrice 最低价格/Minimum price (optional, default to &quot;&quot;)
     * @param maxPrice 最高价格/Maximum price (optional, default to &quot;&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_0Async(String keyword, Integer cursor, Integer count, Integer sortType, Boolean customerReviewFourStar, Boolean haveDiscount, String minPrice, String maxPrice, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_0ValidateBeforeCall(keyword, cursor, count, sortType, customerReviewFourStar, haveDiscount, minPrice, maxPrice, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet
     * @param objectId 对象id/Object id (required)
     * @param schemaType 模式类型/Schema type (optional, default to 4)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGetCall(String objectId, Integer schemaType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_share_qr_code";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (objectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_id", objectId));
        }

        if (schemaType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_type", schemaType));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGetValidateBeforeCall(String objectId, Integer schemaType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGetCall(objectId, schemaType, _callback);
        return localVarCall;

    }

    /**
     * 获取分享二维码/Get share QR code
     * # [中文] ### 用途: - 获取分享二维码 ### 参数: - object_id: 对象id，当前支持个人主页接口响应中的uid作为参数。 ### 返回: - 二维码图片  # [English] ### Purpose: - Get share QR code ### Parameters: - object_id: Object id, currently supports the uid in the response of the personal homepage interface as a parameter. ### Return: - QR code image  # [示例/Example] url &#x3D; \&quot;6762244951259661318\&quot;
     * @param objectId 对象id/Object id (required)
     * @param schemaType 模式类型/Schema type (optional, default to 4)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet(String objectId, Integer schemaType) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGetWithHttpInfo(objectId, schemaType);
        return localVarResp.getData();
    }

    /**
     * 获取分享二维码/Get share QR code
     * # [中文] ### 用途: - 获取分享二维码 ### 参数: - object_id: 对象id，当前支持个人主页接口响应中的uid作为参数。 ### 返回: - 二维码图片  # [English] ### Purpose: - Get share QR code ### Parameters: - object_id: Object id, currently supports the uid in the response of the personal homepage interface as a parameter. ### Return: - QR code image  # [示例/Example] url &#x3D; \&quot;6762244951259661318\&quot;
     * @param objectId 对象id/Object id (required)
     * @param schemaType 模式类型/Schema type (optional, default to 4)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGetWithHttpInfo(String objectId, Integer schemaType) throws ApiException {
        okhttp3.Call localVarCall = fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGetValidateBeforeCall(objectId, schemaType, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取分享二维码/Get share QR code (asynchronously)
     * # [中文] ### 用途: - 获取分享二维码 ### 参数: - object_id: 对象id，当前支持个人主页接口响应中的uid作为参数。 ### 返回: - 二维码图片  # [English] ### Purpose: - Get share QR code ### Parameters: - object_id: Object id, currently supports the uid in the response of the personal homepage interface as a parameter. ### Return: - QR code image  # [示例/Example] url &#x3D; \&quot;6762244951259661318\&quot;
     * @param objectId 对象id/Object id (required)
     * @param schemaType 模式类型/Schema type (optional, default to 4)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGetAsync(String objectId, Integer schemaType, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGetValidateBeforeCall(objectId, schemaType, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_0
     * @param objectId 对象id/Object id (required)
     * @param schemaType 模式类型/Schema type (optional, default to 4)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_0Call(String objectId, Integer schemaType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_share_qr_code";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (objectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("object_id", objectId));
        }

        if (schemaType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("schema_type", schemaType));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_0ValidateBeforeCall(String objectId, Integer schemaType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'objectId' is set
        if (objectId == null) {
            throw new ApiException("Missing the required parameter 'objectId' when calling fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_0Call(objectId, schemaType, _callback);
        return localVarCall;

    }

    /**
     * 获取分享二维码/Get share QR code
     * # [中文] ### 用途: - 获取分享二维码 ### 参数: - object_id: 对象id，当前支持个人主页接口响应中的uid作为参数。 ### 返回: - 二维码图片  # [English] ### Purpose: - Get share QR code ### Parameters: - object_id: Object id, currently supports the uid in the response of the personal homepage interface as a parameter. ### Return: - QR code image  # [示例/Example] url &#x3D; \&quot;6762244951259661318\&quot;
     * @param objectId 对象id/Object id (required)
     * @param schemaType 模式类型/Schema type (optional, default to 4)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_0(String objectId, Integer schemaType) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_0WithHttpInfo(objectId, schemaType);
        return localVarResp.getData();
    }

    /**
     * 获取分享二维码/Get share QR code
     * # [中文] ### 用途: - 获取分享二维码 ### 参数: - object_id: 对象id，当前支持个人主页接口响应中的uid作为参数。 ### 返回: - 二维码图片  # [English] ### Purpose: - Get share QR code ### Parameters: - object_id: Object id, currently supports the uid in the response of the personal homepage interface as a parameter. ### Return: - QR code image  # [示例/Example] url &#x3D; \&quot;6762244951259661318\&quot;
     * @param objectId 对象id/Object id (required)
     * @param schemaType 模式类型/Schema type (optional, default to 4)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_0WithHttpInfo(String objectId, Integer schemaType) throws ApiException {
        okhttp3.Call localVarCall = fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_0ValidateBeforeCall(objectId, schemaType, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取分享二维码/Get share QR code (asynchronously)
     * # [中文] ### 用途: - 获取分享二维码 ### 参数: - object_id: 对象id，当前支持个人主页接口响应中的uid作为参数。 ### 返回: - 二维码图片  # [English] ### Purpose: - Get share QR code ### Parameters: - object_id: Object id, currently supports the uid in the response of the personal homepage interface as a parameter. ### Return: - QR code image  # [示例/Example] url &#x3D; \&quot;6762244951259661318\&quot;
     * @param objectId 对象id/Object id (required)
     * @param schemaType 模式类型/Schema type (optional, default to 4)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_0Async(String objectId, Integer schemaType, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_0ValidateBeforeCall(objectId, schemaType, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet
     * @param url 分享链接/Share link (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGetCall(String url, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_share_short_link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGetValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGetCall(url, _callback);
        return localVarCall;

    }

    /**
     * 获取分享短链接/Get share short link
     * # [中文] ### 用途: - 获取分享短链接 ### 参数: - url: 长链接或想要转换的链接 ### 返回: - 短链接  # [English] ### Purpose: - Get share short link ### Parameters: - url: Long link or link to convert ### Return: - Short link  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/passport/web/logout/\&quot;
     * @param url 分享链接/Share link (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet(String url) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGetWithHttpInfo(url);
        return localVarResp.getData();
    }

    /**
     * 获取分享短链接/Get share short link
     * # [中文] ### 用途: - 获取分享短链接 ### 参数: - url: 长链接或想要转换的链接 ### 返回: - 短链接  # [English] ### Purpose: - Get share short link ### Parameters: - url: Long link or link to convert ### Return: - Short link  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/passport/web/logout/\&quot;
     * @param url 分享链接/Share link (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGetWithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGetValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取分享短链接/Get share short link (asynchronously)
     * # [中文] ### 用途: - 获取分享短链接 ### 参数: - url: 长链接或想要转换的链接 ### 返回: - 短链接  # [English] ### Purpose: - Get share short link ### Parameters: - url: Long link or link to convert ### Return: - Short link  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/passport/web/logout/\&quot;
     * @param url 分享链接/Share link (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGetAsync(String url, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGetValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_0
     * @param url 分享链接/Share link (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_0Call(String url, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_share_short_link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_0ValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_0Call(url, _callback);
        return localVarCall;

    }

    /**
     * 获取分享短链接/Get share short link
     * # [中文] ### 用途: - 获取分享短链接 ### 参数: - url: 长链接或想要转换的链接 ### 返回: - 短链接  # [English] ### Purpose: - Get share short link ### Parameters: - url: Long link or link to convert ### Return: - Short link  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/passport/web/logout/\&quot;
     * @param url 分享链接/Share link (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_0(String url) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_0WithHttpInfo(url);
        return localVarResp.getData();
    }

    /**
     * 获取分享短链接/Get share short link
     * # [中文] ### 用途: - 获取分享短链接 ### 参数: - url: 长链接或想要转换的链接 ### 返回: - 短链接  # [English] ### Purpose: - Get share short link ### Parameters: - url: Long link or link to convert ### Return: - Short link  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/passport/web/logout/\&quot;
     * @param url 分享链接/Share link (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_0WithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_0ValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取分享短链接/Get share short link (asynchronously)
     * # [中文] ### 用途: - 获取分享短链接 ### 参数: - url: 长链接或想要转换的链接 ### 返回: - 短链接  # [English] ### Purpose: - Get share short link ### Parameters: - url: Long link or link to convert ### Return: - Short link  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/passport/web/logout/\&quot;
     * @param url 分享链接/Share link (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_0Async(String url, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_0ValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet
     * @param pageId 爬取的商家主页Page id/Page id of the crawled shop home page (required)
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopHomeApiV1TiktokAppV3FetchShopHomeGetCall(String pageId, String sellerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_shop_home";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_id", pageId));
        }

        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seller_id", sellerId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchShopHomeApiV1TiktokAppV3FetchShopHomeGetValidateBeforeCall(String pageId, String sellerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet(Async)");
        }
        
        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchShopHomeApiV1TiktokAppV3FetchShopHomeGetCall(pageId, sellerId, _callback);
        return localVarCall;

    }

    /**
     * 获取商家主页数据/Get shop home page data
     * # [中文] ### 用途: - 获取商家主页的商品数据 ### 参数: - page_id: 爬取的商家主页Page id，可以从&#x60;fetch_shop_home_page_list&#x60;这个接口获取 - seller_id: 商家id,店铺id ### 返回: - 商家主页数据  # [English] ### Purpose: - Get product data of the shop home page ### Parameters: - page_id: Page id of the crawled shop home page, which can be obtained from the interface &#x60;fetch_shop_home_page_list&#x60; - seller_id: Seller id, shop id ### Return: - Shop home page data  # [示例/Example] page_id &#x3D; \&quot;7314705727611930410\&quot; seller_id &#x3D; \&quot;8646929864612614278\&quot;
     * @param pageId 爬取的商家主页Page id/Page id of the crawled shop home page (required)
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet(String pageId, String sellerId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchShopHomeApiV1TiktokAppV3FetchShopHomeGetWithHttpInfo(pageId, sellerId);
        return localVarResp.getData();
    }

    /**
     * 获取商家主页数据/Get shop home page data
     * # [中文] ### 用途: - 获取商家主页的商品数据 ### 参数: - page_id: 爬取的商家主页Page id，可以从&#x60;fetch_shop_home_page_list&#x60;这个接口获取 - seller_id: 商家id,店铺id ### 返回: - 商家主页数据  # [English] ### Purpose: - Get product data of the shop home page ### Parameters: - page_id: Page id of the crawled shop home page, which can be obtained from the interface &#x60;fetch_shop_home_page_list&#x60; - seller_id: Seller id, shop id ### Return: - Shop home page data  # [示例/Example] page_id &#x3D; \&quot;7314705727611930410\&quot; seller_id &#x3D; \&quot;8646929864612614278\&quot;
     * @param pageId 爬取的商家主页Page id/Page id of the crawled shop home page (required)
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchShopHomeApiV1TiktokAppV3FetchShopHomeGetWithHttpInfo(String pageId, String sellerId) throws ApiException {
        okhttp3.Call localVarCall = fetchShopHomeApiV1TiktokAppV3FetchShopHomeGetValidateBeforeCall(pageId, sellerId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取商家主页数据/Get shop home page data (asynchronously)
     * # [中文] ### 用途: - 获取商家主页的商品数据 ### 参数: - page_id: 爬取的商家主页Page id，可以从&#x60;fetch_shop_home_page_list&#x60;这个接口获取 - seller_id: 商家id,店铺id ### 返回: - 商家主页数据  # [English] ### Purpose: - Get product data of the shop home page ### Parameters: - page_id: Page id of the crawled shop home page, which can be obtained from the interface &#x60;fetch_shop_home_page_list&#x60; - seller_id: Seller id, shop id ### Return: - Shop home page data  # [示例/Example] page_id &#x3D; \&quot;7314705727611930410\&quot; seller_id &#x3D; \&quot;8646929864612614278\&quot;
     * @param pageId 爬取的商家主页Page id/Page id of the crawled shop home page (required)
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopHomeApiV1TiktokAppV3FetchShopHomeGetAsync(String pageId, String sellerId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchShopHomeApiV1TiktokAppV3FetchShopHomeGetValidateBeforeCall(pageId, sellerId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_0
     * @param pageId 爬取的商家主页Page id/Page id of the crawled shop home page (required)
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_0Call(String pageId, String sellerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_shop_home";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_id", pageId));
        }

        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seller_id", sellerId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_0ValidateBeforeCall(String pageId, String sellerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pageId' is set
        if (pageId == null) {
            throw new ApiException("Missing the required parameter 'pageId' when calling fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_0(Async)");
        }
        
        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_0Call(pageId, sellerId, _callback);
        return localVarCall;

    }

    /**
     * 获取商家主页数据/Get shop home page data
     * # [中文] ### 用途: - 获取商家主页的商品数据 ### 参数: - page_id: 爬取的商家主页Page id，可以从&#x60;fetch_shop_home_page_list&#x60;这个接口获取 - seller_id: 商家id,店铺id ### 返回: - 商家主页数据  # [English] ### Purpose: - Get product data of the shop home page ### Parameters: - page_id: Page id of the crawled shop home page, which can be obtained from the interface &#x60;fetch_shop_home_page_list&#x60; - seller_id: Seller id, shop id ### Return: - Shop home page data  # [示例/Example] page_id &#x3D; \&quot;7314705727611930410\&quot; seller_id &#x3D; \&quot;8646929864612614278\&quot;
     * @param pageId 爬取的商家主页Page id/Page id of the crawled shop home page (required)
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_0(String pageId, String sellerId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_0WithHttpInfo(pageId, sellerId);
        return localVarResp.getData();
    }

    /**
     * 获取商家主页数据/Get shop home page data
     * # [中文] ### 用途: - 获取商家主页的商品数据 ### 参数: - page_id: 爬取的商家主页Page id，可以从&#x60;fetch_shop_home_page_list&#x60;这个接口获取 - seller_id: 商家id,店铺id ### 返回: - 商家主页数据  # [English] ### Purpose: - Get product data of the shop home page ### Parameters: - page_id: Page id of the crawled shop home page, which can be obtained from the interface &#x60;fetch_shop_home_page_list&#x60; - seller_id: Seller id, shop id ### Return: - Shop home page data  # [示例/Example] page_id &#x3D; \&quot;7314705727611930410\&quot; seller_id &#x3D; \&quot;8646929864612614278\&quot;
     * @param pageId 爬取的商家主页Page id/Page id of the crawled shop home page (required)
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_0WithHttpInfo(String pageId, String sellerId) throws ApiException {
        okhttp3.Call localVarCall = fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_0ValidateBeforeCall(pageId, sellerId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取商家主页数据/Get shop home page data (asynchronously)
     * # [中文] ### 用途: - 获取商家主页的商品数据 ### 参数: - page_id: 爬取的商家主页Page id，可以从&#x60;fetch_shop_home_page_list&#x60;这个接口获取 - seller_id: 商家id,店铺id ### 返回: - 商家主页数据  # [English] ### Purpose: - Get product data of the shop home page ### Parameters: - page_id: Page id of the crawled shop home page, which can be obtained from the interface &#x60;fetch_shop_home_page_list&#x60; - seller_id: Seller id, shop id ### Return: - Shop home page data  # [示例/Example] page_id &#x3D; \&quot;7314705727611930410\&quot; seller_id &#x3D; \&quot;8646929864612614278\&quot;
     * @param pageId 爬取的商家主页Page id/Page id of the crawled shop home page (required)
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_0Async(String pageId, String sellerId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_0ValidateBeforeCall(pageId, sellerId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGetCall(String sellerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_shop_home_page_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seller_id", sellerId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGetValidateBeforeCall(String sellerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGetCall(sellerId, _callback);
        return localVarCall;

    }

    /**
     * 获取商家主页Page列表数据/Get shop home page list data
     * # [中文] ### 用途: - 获取商家主页Page列表数据, 用于商家主页展示，以及爬取商家主页的商品数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家主页Page列表数据  # [English] ### Purpose: - Get shop home page list data, used for shop home page display, and crawling shop home page product data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop home page list data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot;
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet(String sellerId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGetWithHttpInfo(sellerId);
        return localVarResp.getData();
    }

    /**
     * 获取商家主页Page列表数据/Get shop home page list data
     * # [中文] ### 用途: - 获取商家主页Page列表数据, 用于商家主页展示，以及爬取商家主页的商品数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家主页Page列表数据  # [English] ### Purpose: - Get shop home page list data, used for shop home page display, and crawling shop home page product data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop home page list data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot;
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGetWithHttpInfo(String sellerId) throws ApiException {
        okhttp3.Call localVarCall = fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGetValidateBeforeCall(sellerId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取商家主页Page列表数据/Get shop home page list data (asynchronously)
     * # [中文] ### 用途: - 获取商家主页Page列表数据, 用于商家主页展示，以及爬取商家主页的商品数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家主页Page列表数据  # [English] ### Purpose: - Get shop home page list data, used for shop home page display, and crawling shop home page product data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop home page list data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot;
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGetAsync(String sellerId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGetValidateBeforeCall(sellerId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_0
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_0Call(String sellerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_shop_home_page_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seller_id", sellerId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_0ValidateBeforeCall(String sellerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_0Call(sellerId, _callback);
        return localVarCall;

    }

    /**
     * 获取商家主页Page列表数据/Get shop home page list data
     * # [中文] ### 用途: - 获取商家主页Page列表数据, 用于商家主页展示，以及爬取商家主页的商品数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家主页Page列表数据  # [English] ### Purpose: - Get shop home page list data, used for shop home page display, and crawling shop home page product data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop home page list data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot;
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_0(String sellerId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_0WithHttpInfo(sellerId);
        return localVarResp.getData();
    }

    /**
     * 获取商家主页Page列表数据/Get shop home page list data
     * # [中文] ### 用途: - 获取商家主页Page列表数据, 用于商家主页展示，以及爬取商家主页的商品数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家主页Page列表数据  # [English] ### Purpose: - Get shop home page list data, used for shop home page display, and crawling shop home page product data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop home page list data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot;
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_0WithHttpInfo(String sellerId) throws ApiException {
        okhttp3.Call localVarCall = fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_0ValidateBeforeCall(sellerId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取商家主页Page列表数据/Get shop home page list data (asynchronously)
     * # [中文] ### 用途: - 获取商家主页Page列表数据, 用于商家主页展示，以及爬取商家主页的商品数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家主页Page列表数据  # [English] ### Purpose: - Get shop home page list data, used for shop home page display, and crawling shop home page product data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop home page list data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot;
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_0Async(String sellerId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_0ValidateBeforeCall(sellerId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet
     * @param shopId 商家id,店铺id/Seller id, shop id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopInfoApiV1TiktokAppV3FetchShopInfoGetCall(String shopId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_shop_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (shopId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_id", shopId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchShopInfoApiV1TiktokAppV3FetchShopInfoGetValidateBeforeCall(String shopId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shopId' is set
        if (shopId == null) {
            throw new ApiException("Missing the required parameter 'shopId' when calling fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchShopInfoApiV1TiktokAppV3FetchShopInfoGetCall(shopId, _callback);
        return localVarCall;

    }

    /**
     * 获取商家信息数据/Get shop information data
     * # [中文] ### 用途: - 获取商家信息数据 ### 参数: - shop_id: 商家id,店铺id ### 返回: - 商家信息数据  # [English] ### Purpose: - Get shop information data ### Parameters: - shop_id: Seller id, shop id ### Return: - Shop information data  # [示例/Example] shop_id &#x3D; \&quot;8646942781241463007\&quot;
     * @param shopId 商家id,店铺id/Seller id, shop id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet(String shopId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchShopInfoApiV1TiktokAppV3FetchShopInfoGetWithHttpInfo(shopId);
        return localVarResp.getData();
    }

    /**
     * 获取商家信息数据/Get shop information data
     * # [中文] ### 用途: - 获取商家信息数据 ### 参数: - shop_id: 商家id,店铺id ### 返回: - 商家信息数据  # [English] ### Purpose: - Get shop information data ### Parameters: - shop_id: Seller id, shop id ### Return: - Shop information data  # [示例/Example] shop_id &#x3D; \&quot;8646942781241463007\&quot;
     * @param shopId 商家id,店铺id/Seller id, shop id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchShopInfoApiV1TiktokAppV3FetchShopInfoGetWithHttpInfo(String shopId) throws ApiException {
        okhttp3.Call localVarCall = fetchShopInfoApiV1TiktokAppV3FetchShopInfoGetValidateBeforeCall(shopId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取商家信息数据/Get shop information data (asynchronously)
     * # [中文] ### 用途: - 获取商家信息数据 ### 参数: - shop_id: 商家id,店铺id ### 返回: - 商家信息数据  # [English] ### Purpose: - Get shop information data ### Parameters: - shop_id: Seller id, shop id ### Return: - Shop information data  # [示例/Example] shop_id &#x3D; \&quot;8646942781241463007\&quot;
     * @param shopId 商家id,店铺id/Seller id, shop id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopInfoApiV1TiktokAppV3FetchShopInfoGetAsync(String shopId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchShopInfoApiV1TiktokAppV3FetchShopInfoGetValidateBeforeCall(shopId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_0
     * @param shopId 商家id,店铺id/Seller id, shop id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_0Call(String shopId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_shop_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (shopId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shop_id", shopId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_0ValidateBeforeCall(String shopId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'shopId' is set
        if (shopId == null) {
            throw new ApiException("Missing the required parameter 'shopId' when calling fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_0Call(shopId, _callback);
        return localVarCall;

    }

    /**
     * 获取商家信息数据/Get shop information data
     * # [中文] ### 用途: - 获取商家信息数据 ### 参数: - shop_id: 商家id,店铺id ### 返回: - 商家信息数据  # [English] ### Purpose: - Get shop information data ### Parameters: - shop_id: Seller id, shop id ### Return: - Shop information data  # [示例/Example] shop_id &#x3D; \&quot;8646942781241463007\&quot;
     * @param shopId 商家id,店铺id/Seller id, shop id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_0(String shopId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_0WithHttpInfo(shopId);
        return localVarResp.getData();
    }

    /**
     * 获取商家信息数据/Get shop information data
     * # [中文] ### 用途: - 获取商家信息数据 ### 参数: - shop_id: 商家id,店铺id ### 返回: - 商家信息数据  # [English] ### Purpose: - Get shop information data ### Parameters: - shop_id: Seller id, shop id ### Return: - Shop information data  # [示例/Example] shop_id &#x3D; \&quot;8646942781241463007\&quot;
     * @param shopId 商家id,店铺id/Seller id, shop id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_0WithHttpInfo(String shopId) throws ApiException {
        okhttp3.Call localVarCall = fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_0ValidateBeforeCall(shopId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取商家信息数据/Get shop information data (asynchronously)
     * # [中文] ### 用途: - 获取商家信息数据 ### 参数: - shop_id: 商家id,店铺id ### 返回: - 商家信息数据  # [English] ### Purpose: - Get shop information data ### Parameters: - shop_id: Seller id, shop id ### Return: - Shop information data  # [示例/Example] shop_id &#x3D; \&quot;8646942781241463007\&quot;
     * @param shopId 商家id,店铺id/Seller id, shop id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_0Async(String shopId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_0ValidateBeforeCall(shopId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGetCall(String sellerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_shop_product_category";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seller_id", sellerId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGetValidateBeforeCall(String sellerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGetCall(sellerId, _callback);
        return localVarCall;

    }

    /**
     * 获取商家产品分类数据/Get shop product category data
     * # [中文] ### 用途: - 获取商家产品分类数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家产品分类数据  # [English] ### Purpose: - Get shop product category data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop product category data  # [示例/Example] seller_id &#x3D; \&quot;7495294980909468039\&quot;
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet(String sellerId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGetWithHttpInfo(sellerId);
        return localVarResp.getData();
    }

    /**
     * 获取商家产品分类数据/Get shop product category data
     * # [中文] ### 用途: - 获取商家产品分类数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家产品分类数据  # [English] ### Purpose: - Get shop product category data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop product category data  # [示例/Example] seller_id &#x3D; \&quot;7495294980909468039\&quot;
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGetWithHttpInfo(String sellerId) throws ApiException {
        okhttp3.Call localVarCall = fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGetValidateBeforeCall(sellerId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取商家产品分类数据/Get shop product category data (asynchronously)
     * # [中文] ### 用途: - 获取商家产品分类数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家产品分类数据  # [English] ### Purpose: - Get shop product category data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop product category data  # [示例/Example] seller_id &#x3D; \&quot;7495294980909468039\&quot;
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGetAsync(String sellerId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGetValidateBeforeCall(sellerId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_0
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_0Call(String sellerId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_shop_product_category";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seller_id", sellerId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_0ValidateBeforeCall(String sellerId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_0Call(sellerId, _callback);
        return localVarCall;

    }

    /**
     * 获取商家产品分类数据/Get shop product category data
     * # [中文] ### 用途: - 获取商家产品分类数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家产品分类数据  # [English] ### Purpose: - Get shop product category data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop product category data  # [示例/Example] seller_id &#x3D; \&quot;7495294980909468039\&quot;
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_0(String sellerId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_0WithHttpInfo(sellerId);
        return localVarResp.getData();
    }

    /**
     * 获取商家产品分类数据/Get shop product category data
     * # [中文] ### 用途: - 获取商家产品分类数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家产品分类数据  # [English] ### Purpose: - Get shop product category data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop product category data  # [示例/Example] seller_id &#x3D; \&quot;7495294980909468039\&quot;
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_0WithHttpInfo(String sellerId) throws ApiException {
        okhttp3.Call localVarCall = fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_0ValidateBeforeCall(sellerId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取商家产品分类数据/Get shop product category data (asynchronously)
     * # [中文] ### 用途: - 获取商家产品分类数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家产品分类数据  # [English] ### Purpose: - Get shop product category data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop product category data  # [示例/Example] seller_id &#x3D; \&quot;7495294980909468039\&quot;
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_0Async(String sellerId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_0ValidateBeforeCall(sellerId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param scrollParams 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data (optional, default to &quot;&quot;)
     * @param pageSize 每页数量/Number per page (optional, default to 10)
     * @param sortField 排序字段/Sorting field (optional, default to 1)
     * @param sortOrder 排序方式/Sorting method (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopProductListApiV1TiktokAppV3FetchShopProductListGetCall(String sellerId, String scrollParams, Integer pageSize, Integer sortField, Integer sortOrder, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_shop_product_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seller_id", sellerId));
        }

        if (scrollParams != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scroll_params", scrollParams));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_field", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchShopProductListApiV1TiktokAppV3FetchShopProductListGetValidateBeforeCall(String sellerId, String scrollParams, Integer pageSize, Integer sortField, Integer sortOrder, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchShopProductListApiV1TiktokAppV3FetchShopProductListGetCall(sellerId, scrollParams, pageSize, sortField, sortOrder, _callback);
        return localVarCall;

    }

    /**
     * 获取商家商品列表数据/Get shop product list data
     * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot; scroll_params &#x3D; \&quot;\&quot; page_size &#x3D; 10 sort_field &#x3D; 1 sort_order &#x3D; 0
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param scrollParams 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data (optional, default to &quot;&quot;)
     * @param pageSize 每页数量/Number per page (optional, default to 10)
     * @param sortField 排序字段/Sorting field (optional, default to 1)
     * @param sortOrder 排序方式/Sorting method (optional, default to 0)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet(String sellerId, String scrollParams, Integer pageSize, Integer sortField, Integer sortOrder) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchShopProductListApiV1TiktokAppV3FetchShopProductListGetWithHttpInfo(sellerId, scrollParams, pageSize, sortField, sortOrder);
        return localVarResp.getData();
    }

    /**
     * 获取商家商品列表数据/Get shop product list data
     * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot; scroll_params &#x3D; \&quot;\&quot; page_size &#x3D; 10 sort_field &#x3D; 1 sort_order &#x3D; 0
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param scrollParams 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data (optional, default to &quot;&quot;)
     * @param pageSize 每页数量/Number per page (optional, default to 10)
     * @param sortField 排序字段/Sorting field (optional, default to 1)
     * @param sortOrder 排序方式/Sorting method (optional, default to 0)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchShopProductListApiV1TiktokAppV3FetchShopProductListGetWithHttpInfo(String sellerId, String scrollParams, Integer pageSize, Integer sortField, Integer sortOrder) throws ApiException {
        okhttp3.Call localVarCall = fetchShopProductListApiV1TiktokAppV3FetchShopProductListGetValidateBeforeCall(sellerId, scrollParams, pageSize, sortField, sortOrder, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取商家商品列表数据/Get shop product list data (asynchronously)
     * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot; scroll_params &#x3D; \&quot;\&quot; page_size &#x3D; 10 sort_field &#x3D; 1 sort_order &#x3D; 0
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param scrollParams 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data (optional, default to &quot;&quot;)
     * @param pageSize 每页数量/Number per page (optional, default to 10)
     * @param sortField 排序字段/Sorting field (optional, default to 1)
     * @param sortOrder 排序方式/Sorting method (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopProductListApiV1TiktokAppV3FetchShopProductListGetAsync(String sellerId, String scrollParams, Integer pageSize, Integer sortField, Integer sortOrder, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchShopProductListApiV1TiktokAppV3FetchShopProductListGetValidateBeforeCall(sellerId, scrollParams, pageSize, sortField, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_0
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param scrollParams 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data (optional, default to &quot;&quot;)
     * @param pageSize 每页数量/Number per page (optional, default to 10)
     * @param sortField 排序字段/Sorting field (optional, default to 1)
     * @param sortOrder 排序方式/Sorting method (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_0Call(String sellerId, String scrollParams, Integer pageSize, Integer sortField, Integer sortOrder, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_shop_product_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seller_id", sellerId));
        }

        if (scrollParams != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scroll_params", scrollParams));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_field", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_0ValidateBeforeCall(String sellerId, String scrollParams, Integer pageSize, Integer sortField, Integer sortOrder, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_0Call(sellerId, scrollParams, pageSize, sortField, sortOrder, _callback);
        return localVarCall;

    }

    /**
     * 获取商家商品列表数据/Get shop product list data
     * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot; scroll_params &#x3D; \&quot;\&quot; page_size &#x3D; 10 sort_field &#x3D; 1 sort_order &#x3D; 0
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param scrollParams 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data (optional, default to &quot;&quot;)
     * @param pageSize 每页数量/Number per page (optional, default to 10)
     * @param sortField 排序字段/Sorting field (optional, default to 1)
     * @param sortOrder 排序方式/Sorting method (optional, default to 0)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_0(String sellerId, String scrollParams, Integer pageSize, Integer sortField, Integer sortOrder) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_0WithHttpInfo(sellerId, scrollParams, pageSize, sortField, sortOrder);
        return localVarResp.getData();
    }

    /**
     * 获取商家商品列表数据/Get shop product list data
     * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot; scroll_params &#x3D; \&quot;\&quot; page_size &#x3D; 10 sort_field &#x3D; 1 sort_order &#x3D; 0
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param scrollParams 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data (optional, default to &quot;&quot;)
     * @param pageSize 每页数量/Number per page (optional, default to 10)
     * @param sortField 排序字段/Sorting field (optional, default to 1)
     * @param sortOrder 排序方式/Sorting method (optional, default to 0)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_0WithHttpInfo(String sellerId, String scrollParams, Integer pageSize, Integer sortField, Integer sortOrder) throws ApiException {
        okhttp3.Call localVarCall = fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_0ValidateBeforeCall(sellerId, scrollParams, pageSize, sortField, sortOrder, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取商家商品列表数据/Get shop product list data (asynchronously)
     * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot; scroll_params &#x3D; \&quot;\&quot; page_size &#x3D; 10 sort_field &#x3D; 1 sort_order &#x3D; 0
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param scrollParams 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data (optional, default to &quot;&quot;)
     * @param pageSize 每页数量/Number per page (optional, default to 10)
     * @param sortField 排序字段/Sorting field (optional, default to 1)
     * @param sortOrder 排序方式/Sorting method (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_0Async(String sellerId, String scrollParams, Integer pageSize, Integer sortField, Integer sortOrder, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_0ValidateBeforeCall(sellerId, scrollParams, pageSize, sortField, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param scrollParam 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data (optional, default to &quot;&quot;)
     * @param pageSize 每页数量/Number per page (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGetCall(String sellerId, String scrollParam, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_shop_product_recommend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seller_id", sellerId));
        }

        if (scrollParam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scroll_param", scrollParam));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGetValidateBeforeCall(String sellerId, String scrollParam, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGetCall(sellerId, scrollParam, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 获取商家商品推荐数据/Get shop product recommend data
     * # [中文] ### 用途: - 获取商家商品推荐数据 ### 参数: - seller_id: 商家id,店铺id - scroll_param: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 ### 返回: - 商家商品推荐数据  # [English] ### Purpose: - Get shop product recommend data ### Parameters: - seller_id: Seller id, shop id - scroll_param: Scroll parameter, used to load more product data - page_size: Number per page ### Return: - Shop product recommend data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot; scroll_param &#x3D; \&quot;\&quot; page_size &#x3D; 10
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param scrollParam 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data (optional, default to &quot;&quot;)
     * @param pageSize 每页数量/Number per page (optional, default to 10)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet(String sellerId, String scrollParam, Integer pageSize) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGetWithHttpInfo(sellerId, scrollParam, pageSize);
        return localVarResp.getData();
    }

    /**
     * 获取商家商品推荐数据/Get shop product recommend data
     * # [中文] ### 用途: - 获取商家商品推荐数据 ### 参数: - seller_id: 商家id,店铺id - scroll_param: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 ### 返回: - 商家商品推荐数据  # [English] ### Purpose: - Get shop product recommend data ### Parameters: - seller_id: Seller id, shop id - scroll_param: Scroll parameter, used to load more product data - page_size: Number per page ### Return: - Shop product recommend data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot; scroll_param &#x3D; \&quot;\&quot; page_size &#x3D; 10
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param scrollParam 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data (optional, default to &quot;&quot;)
     * @param pageSize 每页数量/Number per page (optional, default to 10)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGetWithHttpInfo(String sellerId, String scrollParam, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGetValidateBeforeCall(sellerId, scrollParam, pageSize, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取商家商品推荐数据/Get shop product recommend data (asynchronously)
     * # [中文] ### 用途: - 获取商家商品推荐数据 ### 参数: - seller_id: 商家id,店铺id - scroll_param: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 ### 返回: - 商家商品推荐数据  # [English] ### Purpose: - Get shop product recommend data ### Parameters: - seller_id: Seller id, shop id - scroll_param: Scroll parameter, used to load more product data - page_size: Number per page ### Return: - Shop product recommend data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot; scroll_param &#x3D; \&quot;\&quot; page_size &#x3D; 10
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param scrollParam 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data (optional, default to &quot;&quot;)
     * @param pageSize 每页数量/Number per page (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGetAsync(String sellerId, String scrollParam, Integer pageSize, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGetValidateBeforeCall(sellerId, scrollParam, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_0
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param scrollParam 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data (optional, default to &quot;&quot;)
     * @param pageSize 每页数量/Number per page (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_0Call(String sellerId, String scrollParam, Integer pageSize, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_shop_product_recommend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sellerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seller_id", sellerId));
        }

        if (scrollParam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scroll_param", scrollParam));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_0ValidateBeforeCall(String sellerId, String scrollParam, Integer pageSize, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_0Call(sellerId, scrollParam, pageSize, _callback);
        return localVarCall;

    }

    /**
     * 获取商家商品推荐数据/Get shop product recommend data
     * # [中文] ### 用途: - 获取商家商品推荐数据 ### 参数: - seller_id: 商家id,店铺id - scroll_param: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 ### 返回: - 商家商品推荐数据  # [English] ### Purpose: - Get shop product recommend data ### Parameters: - seller_id: Seller id, shop id - scroll_param: Scroll parameter, used to load more product data - page_size: Number per page ### Return: - Shop product recommend data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot; scroll_param &#x3D; \&quot;\&quot; page_size &#x3D; 10
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param scrollParam 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data (optional, default to &quot;&quot;)
     * @param pageSize 每页数量/Number per page (optional, default to 10)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_0(String sellerId, String scrollParam, Integer pageSize) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_0WithHttpInfo(sellerId, scrollParam, pageSize);
        return localVarResp.getData();
    }

    /**
     * 获取商家商品推荐数据/Get shop product recommend data
     * # [中文] ### 用途: - 获取商家商品推荐数据 ### 参数: - seller_id: 商家id,店铺id - scroll_param: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 ### 返回: - 商家商品推荐数据  # [English] ### Purpose: - Get shop product recommend data ### Parameters: - seller_id: Seller id, shop id - scroll_param: Scroll parameter, used to load more product data - page_size: Number per page ### Return: - Shop product recommend data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot; scroll_param &#x3D; \&quot;\&quot; page_size &#x3D; 10
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param scrollParam 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data (optional, default to &quot;&quot;)
     * @param pageSize 每页数量/Number per page (optional, default to 10)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_0WithHttpInfo(String sellerId, String scrollParam, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_0ValidateBeforeCall(sellerId, scrollParam, pageSize, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取商家商品推荐数据/Get shop product recommend data (asynchronously)
     * # [中文] ### 用途: - 获取商家商品推荐数据 ### 参数: - seller_id: 商家id,店铺id - scroll_param: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 ### 返回: - 商家商品推荐数据  # [English] ### Purpose: - Get shop product recommend data ### Parameters: - seller_id: Seller id, shop id - scroll_param: Scroll parameter, used to load more product data - page_size: Number per page ### Return: - Shop product recommend data  # [示例/Example] seller_id &#x3D; \&quot;8646929864612614278\&quot; scroll_param &#x3D; \&quot;\&quot; page_size &#x3D; 10
     * @param sellerId 商家id,店铺id/Seller id, shop id (required)
     * @param scrollParam 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data (optional, default to &quot;&quot;)
     * @param pageSize 每页数量/Number per page (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_0Async(String sellerId, String scrollParam, Integer pageSize, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_0ValidateBeforeCall(sellerId, scrollParam, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param count 数量/Number (optional, default to 20)
     * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
     * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGetCall(String secUserId, Integer count, Integer minTime, String pageToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_user_follower_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sec_user_id", secUserId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (minTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_time", minTime));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGetValidateBeforeCall(String secUserId, Integer count, Integer minTime, String pageToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUserId' is set
        if (secUserId == null) {
            throw new ApiException("Missing the required parameter 'secUserId' when calling fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGetCall(secUserId, count, minTime, pageToken, _callback);
        return localVarCall;

    }

    /**
     * 获取指定用户的粉丝列表数据/Get follower list of specified user
     * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 40 min_time &#x3D; 1719570100 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param count 数量/Number (optional, default to 20)
     * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
     * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet(String secUserId, Integer count, Integer minTime, String pageToken) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGetWithHttpInfo(secUserId, count, minTime, pageToken);
        return localVarResp.getData();
    }

    /**
     * 获取指定用户的粉丝列表数据/Get follower list of specified user
     * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 40 min_time &#x3D; 1719570100 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param count 数量/Number (optional, default to 20)
     * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
     * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGetWithHttpInfo(String secUserId, Integer count, Integer minTime, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGetValidateBeforeCall(secUserId, count, minTime, pageToken, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定用户的粉丝列表数据/Get follower list of specified user (asynchronously)
     * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 40 min_time &#x3D; 1719570100 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param count 数量/Number (optional, default to 20)
     * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
     * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGetAsync(String secUserId, Integer count, Integer minTime, String pageToken, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGetValidateBeforeCall(secUserId, count, minTime, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_0
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param count 数量/Number (optional, default to 20)
     * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
     * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_0Call(String secUserId, Integer count, Integer minTime, String pageToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_user_follower_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sec_user_id", secUserId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (minTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_time", minTime));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_0ValidateBeforeCall(String secUserId, Integer count, Integer minTime, String pageToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUserId' is set
        if (secUserId == null) {
            throw new ApiException("Missing the required parameter 'secUserId' when calling fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_0Call(secUserId, count, minTime, pageToken, _callback);
        return localVarCall;

    }

    /**
     * 获取指定用户的粉丝列表数据/Get follower list of specified user
     * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 40 min_time &#x3D; 1719570100 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param count 数量/Number (optional, default to 20)
     * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
     * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_0(String secUserId, Integer count, Integer minTime, String pageToken) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_0WithHttpInfo(secUserId, count, minTime, pageToken);
        return localVarResp.getData();
    }

    /**
     * 获取指定用户的粉丝列表数据/Get follower list of specified user
     * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 40 min_time &#x3D; 1719570100 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param count 数量/Number (optional, default to 20)
     * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
     * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_0WithHttpInfo(String secUserId, Integer count, Integer minTime, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_0ValidateBeforeCall(secUserId, count, minTime, pageToken, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定用户的粉丝列表数据/Get follower list of specified user (asynchronously)
     * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 40 min_time &#x3D; 1719570100 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param count 数量/Number (optional, default to 20)
     * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
     * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_0Async(String secUserId, Integer count, Integer minTime, String pageToken, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_0ValidateBeforeCall(secUserId, count, minTime, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param count 数量/Number (optional, default to 20)
     * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
     * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGetCall(String secUserId, Integer count, Integer minTime, String pageToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_user_following_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sec_user_id", secUserId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (minTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_time", minTime));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGetValidateBeforeCall(String secUserId, Integer count, Integer minTime, String pageToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUserId' is set
        if (secUserId == null) {
            throw new ApiException("Missing the required parameter 'secUserId' when calling fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGetCall(secUserId, count, minTime, pageToken, _callback);
        return localVarCall;

    }

    /**
     * 获取指定用户的关注列表数据/Get following list of specified user
     * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 20 min_time &#x3D; 1639642146 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param count 数量/Number (optional, default to 20)
     * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
     * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet(String secUserId, Integer count, Integer minTime, String pageToken) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGetWithHttpInfo(secUserId, count, minTime, pageToken);
        return localVarResp.getData();
    }

    /**
     * 获取指定用户的关注列表数据/Get following list of specified user
     * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 20 min_time &#x3D; 1639642146 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param count 数量/Number (optional, default to 20)
     * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
     * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGetWithHttpInfo(String secUserId, Integer count, Integer minTime, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGetValidateBeforeCall(secUserId, count, minTime, pageToken, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定用户的关注列表数据/Get following list of specified user (asynchronously)
     * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 20 min_time &#x3D; 1639642146 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param count 数量/Number (optional, default to 20)
     * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
     * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGetAsync(String secUserId, Integer count, Integer minTime, String pageToken, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGetValidateBeforeCall(secUserId, count, minTime, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_0
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param count 数量/Number (optional, default to 20)
     * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
     * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_0Call(String secUserId, Integer count, Integer minTime, String pageToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_user_following_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sec_user_id", secUserId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (minTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min_time", minTime));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_0ValidateBeforeCall(String secUserId, Integer count, Integer minTime, String pageToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUserId' is set
        if (secUserId == null) {
            throw new ApiException("Missing the required parameter 'secUserId' when calling fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_0Call(secUserId, count, minTime, pageToken, _callback);
        return localVarCall;

    }

    /**
     * 获取指定用户的关注列表数据/Get following list of specified user
     * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 20 min_time &#x3D; 1639642146 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param count 数量/Number (optional, default to 20)
     * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
     * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_0(String secUserId, Integer count, Integer minTime, String pageToken) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_0WithHttpInfo(secUserId, count, minTime, pageToken);
        return localVarResp.getData();
    }

    /**
     * 获取指定用户的关注列表数据/Get following list of specified user
     * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 20 min_time &#x3D; 1639642146 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param count 数量/Number (optional, default to 20)
     * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
     * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_0WithHttpInfo(String secUserId, Integer count, Integer minTime, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_0ValidateBeforeCall(secUserId, count, minTime, pageToken, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定用户的关注列表数据/Get following list of specified user (asynchronously)
     * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 20 min_time &#x3D; 1639642146 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param count 数量/Number (optional, default to 20)
     * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
     * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_0Async(String secUserId, Integer count, Integer minTime, String pageToken, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_0ValidateBeforeCall(secUserId, count, minTime, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
     * @param counts 每页数量/Number per page (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGetCall(String secUserId, Integer maxCursor, Integer counts, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_user_like_videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sec_user_id", secUserId));
        }

        if (maxCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_cursor", maxCursor));
        }

        if (counts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("counts", counts));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGetValidateBeforeCall(String secUserId, Integer maxCursor, Integer counts, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUserId' is set
        if (secUserId == null) {
            throw new ApiException("Missing the required parameter 'secUserId' when calling fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGetCall(secUserId, maxCursor, counts, _callback);
        return localVarCall;

    }

    /**
     * 获取用户喜欢作品数据/Get user like video data
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
     * @param counts 每页数量/Number per page (optional, default to 20)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet(String secUserId, Integer maxCursor, Integer counts) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGetWithHttpInfo(secUserId, maxCursor, counts);
        return localVarResp.getData();
    }

    /**
     * 获取用户喜欢作品数据/Get user like video data
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
     * @param counts 每页数量/Number per page (optional, default to 20)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGetWithHttpInfo(String secUserId, Integer maxCursor, Integer counts) throws ApiException {
        okhttp3.Call localVarCall = fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGetValidateBeforeCall(secUserId, maxCursor, counts, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户喜欢作品数据/Get user like video data (asynchronously)
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
     * @param counts 每页数量/Number per page (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGetAsync(String secUserId, Integer maxCursor, Integer counts, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGetValidateBeforeCall(secUserId, maxCursor, counts, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_0
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
     * @param counts 每页数量/Number per page (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_0Call(String secUserId, Integer maxCursor, Integer counts, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_user_like_videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sec_user_id", secUserId));
        }

        if (maxCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_cursor", maxCursor));
        }

        if (counts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("counts", counts));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_0ValidateBeforeCall(String secUserId, Integer maxCursor, Integer counts, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUserId' is set
        if (secUserId == null) {
            throw new ApiException("Missing the required parameter 'secUserId' when calling fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_0Call(secUserId, maxCursor, counts, _callback);
        return localVarCall;

    }

    /**
     * 获取用户喜欢作品数据/Get user like video data
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
     * @param counts 每页数量/Number per page (optional, default to 20)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_0(String secUserId, Integer maxCursor, Integer counts) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_0WithHttpInfo(secUserId, maxCursor, counts);
        return localVarResp.getData();
    }

    /**
     * 获取用户喜欢作品数据/Get user like video data
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
     * @param counts 每页数量/Number per page (optional, default to 20)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_0WithHttpInfo(String secUserId, Integer maxCursor, Integer counts) throws ApiException {
        okhttp3.Call localVarCall = fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_0ValidateBeforeCall(secUserId, maxCursor, counts, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户喜欢作品数据/Get user like video data (asynchronously)
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
     * @param counts 每页数量/Number per page (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_0Async(String secUserId, Integer maxCursor, Integer counts, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_0ValidateBeforeCall(secUserId, maxCursor, counts, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet
     * @param secUid 用户sec_uid/User sec_uid (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGetCall(String secUid, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_user_music_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sec_uid", secUid));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGetValidateBeforeCall(String secUid, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUid' is set
        if (secUid == null) {
            throw new ApiException("Missing the required parameter 'secUid' when calling fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGetCall(secUid, cursor, count, _callback);
        return localVarCall;

    }

    /**
     * 获取用户音乐列表数据/Get user music list data
     * # [中文] ### 用途: - 获取用户音乐列表数据 ### 参数: - sec_uid: 用户sec_uid - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 用户音乐列表数据  # [English] ### Purpose: - Get user music list data ### Parameters: - sec_uid: User sec_uid - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number  # [示例/Example] sec_uid &#x3D; \&quot;MS4wLjABAAAAqB08cUbXaDWqbD6MCga2RbGTuhfO2EsHayBYx08NDrN7IE3jQuRDNNN6YwyfH6_6\&quot; cursor &#x3D; 0 count &#x3D; 10
     * @param secUid 用户sec_uid/User sec_uid (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet(String secUid, Integer cursor, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGetWithHttpInfo(secUid, cursor, count);
        return localVarResp.getData();
    }

    /**
     * 获取用户音乐列表数据/Get user music list data
     * # [中文] ### 用途: - 获取用户音乐列表数据 ### 参数: - sec_uid: 用户sec_uid - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 用户音乐列表数据  # [English] ### Purpose: - Get user music list data ### Parameters: - sec_uid: User sec_uid - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number  # [示例/Example] sec_uid &#x3D; \&quot;MS4wLjABAAAAqB08cUbXaDWqbD6MCga2RbGTuhfO2EsHayBYx08NDrN7IE3jQuRDNNN6YwyfH6_6\&quot; cursor &#x3D; 0 count &#x3D; 10
     * @param secUid 用户sec_uid/User sec_uid (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGetWithHttpInfo(String secUid, Integer cursor, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGetValidateBeforeCall(secUid, cursor, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户音乐列表数据/Get user music list data (asynchronously)
     * # [中文] ### 用途: - 获取用户音乐列表数据 ### 参数: - sec_uid: 用户sec_uid - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 用户音乐列表数据  # [English] ### Purpose: - Get user music list data ### Parameters: - sec_uid: User sec_uid - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number  # [示例/Example] sec_uid &#x3D; \&quot;MS4wLjABAAAAqB08cUbXaDWqbD6MCga2RbGTuhfO2EsHayBYx08NDrN7IE3jQuRDNNN6YwyfH6_6\&quot; cursor &#x3D; 0 count &#x3D; 10
     * @param secUid 用户sec_uid/User sec_uid (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGetAsync(String secUid, Integer cursor, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGetValidateBeforeCall(secUid, cursor, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_0
     * @param secUid 用户sec_uid/User sec_uid (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_0Call(String secUid, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_user_music_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sec_uid", secUid));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_0ValidateBeforeCall(String secUid, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUid' is set
        if (secUid == null) {
            throw new ApiException("Missing the required parameter 'secUid' when calling fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_0Call(secUid, cursor, count, _callback);
        return localVarCall;

    }

    /**
     * 获取用户音乐列表数据/Get user music list data
     * # [中文] ### 用途: - 获取用户音乐列表数据 ### 参数: - sec_uid: 用户sec_uid - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 用户音乐列表数据  # [English] ### Purpose: - Get user music list data ### Parameters: - sec_uid: User sec_uid - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number  # [示例/Example] sec_uid &#x3D; \&quot;MS4wLjABAAAAqB08cUbXaDWqbD6MCga2RbGTuhfO2EsHayBYx08NDrN7IE3jQuRDNNN6YwyfH6_6\&quot; cursor &#x3D; 0 count &#x3D; 10
     * @param secUid 用户sec_uid/User sec_uid (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_0(String secUid, Integer cursor, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_0WithHttpInfo(secUid, cursor, count);
        return localVarResp.getData();
    }

    /**
     * 获取用户音乐列表数据/Get user music list data
     * # [中文] ### 用途: - 获取用户音乐列表数据 ### 参数: - sec_uid: 用户sec_uid - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 用户音乐列表数据  # [English] ### Purpose: - Get user music list data ### Parameters: - sec_uid: User sec_uid - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number  # [示例/Example] sec_uid &#x3D; \&quot;MS4wLjABAAAAqB08cUbXaDWqbD6MCga2RbGTuhfO2EsHayBYx08NDrN7IE3jQuRDNNN6YwyfH6_6\&quot; cursor &#x3D; 0 count &#x3D; 10
     * @param secUid 用户sec_uid/User sec_uid (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_0WithHttpInfo(String secUid, Integer cursor, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_0ValidateBeforeCall(secUid, cursor, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户音乐列表数据/Get user music list data (asynchronously)
     * # [中文] ### 用途: - 获取用户音乐列表数据 ### 参数: - sec_uid: 用户sec_uid - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 用户音乐列表数据  # [English] ### Purpose: - Get user music list data ### Parameters: - sec_uid: User sec_uid - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number  # [示例/Example] sec_uid &#x3D; \&quot;MS4wLjABAAAAqB08cUbXaDWqbD6MCga2RbGTuhfO2EsHayBYx08NDrN7IE3jQuRDNNN6YwyfH6_6\&quot; cursor &#x3D; 0 count &#x3D; 10
     * @param secUid 用户sec_uid/User sec_uid (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_0Async(String secUid, Integer cursor, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_0ValidateBeforeCall(secUid, cursor, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGetCall(String secUserId, Integer maxCursor, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_user_post_videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sec_user_id", secUserId));
        }

        if (maxCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_cursor", maxCursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGetValidateBeforeCall(String secUserId, Integer maxCursor, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUserId' is set
        if (secUserId == null) {
            throw new ApiException("Missing the required parameter 'secUserId' when calling fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGetCall(secUserId, maxCursor, count, _callback);
        return localVarCall;

    }

    /**
     * 获取用户主页作品数据/Get user homepage video data
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet(String secUserId, Integer maxCursor, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGetWithHttpInfo(secUserId, maxCursor, count);
        return localVarResp.getData();
    }

    /**
     * 获取用户主页作品数据/Get user homepage video data
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGetWithHttpInfo(String secUserId, Integer maxCursor, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGetValidateBeforeCall(secUserId, maxCursor, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户主页作品数据/Get user homepage video data (asynchronously)
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGetAsync(String secUserId, Integer maxCursor, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGetValidateBeforeCall(secUserId, maxCursor, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_0
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_0Call(String secUserId, Integer maxCursor, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_user_post_videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sec_user_id", secUserId));
        }

        if (maxCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_cursor", maxCursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_0ValidateBeforeCall(String secUserId, Integer maxCursor, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUserId' is set
        if (secUserId == null) {
            throw new ApiException("Missing the required parameter 'secUserId' when calling fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_0Call(secUserId, maxCursor, count, _callback);
        return localVarCall;

    }

    /**
     * 获取用户主页作品数据/Get user homepage video data
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_0(String secUserId, Integer maxCursor, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_0WithHttpInfo(secUserId, maxCursor, count);
        return localVarResp.getData();
    }

    /**
     * 获取用户主页作品数据/Get user homepage video data
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_0WithHttpInfo(String secUserId, Integer maxCursor, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_0ValidateBeforeCall(secUserId, maxCursor, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户主页作品数据/Get user homepage video data (asynchronously)
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_0Async(String secUserId, Integer maxCursor, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_0ValidateBeforeCall(secUserId, maxCursor, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet
     * @param userId 用户id/User id (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 21)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGetCall(Integer userId, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_user_repost_videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGetValidateBeforeCall(Integer userId, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGetCall(userId, offset, count, _callback);
        return localVarCall;

    }

    /**
     * 获取用户转发的作品数据/Get user repost video data
     * # [中文] ### 用途: - 获取用户转发的作品数据 ### 参数: - user_id: 用户id，可以通过 handler_user_profile 端点获取，响应中的关键字为uid。 - offset: 偏移量 - count: 数量 ### 返回: - 用户转发作品数据  # [English] ### Purpose: - Get user repost video data ### Parameters: - user_id: User id, which can be obtained through the handler_user_profile endpoint, with the keyword uid in the response. - offset: Offset - count: Number ### Return: - User repost video data  # [示例/Example] user_id &#x3D; 107955 offset &#x3D; 0 count &#x3D; 21
     * @param userId 用户id/User id (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 21)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet(Integer userId, Integer offset, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGetWithHttpInfo(userId, offset, count);
        return localVarResp.getData();
    }

    /**
     * 获取用户转发的作品数据/Get user repost video data
     * # [中文] ### 用途: - 获取用户转发的作品数据 ### 参数: - user_id: 用户id，可以通过 handler_user_profile 端点获取，响应中的关键字为uid。 - offset: 偏移量 - count: 数量 ### 返回: - 用户转发作品数据  # [English] ### Purpose: - Get user repost video data ### Parameters: - user_id: User id, which can be obtained through the handler_user_profile endpoint, with the keyword uid in the response. - offset: Offset - count: Number ### Return: - User repost video data  # [示例/Example] user_id &#x3D; 107955 offset &#x3D; 0 count &#x3D; 21
     * @param userId 用户id/User id (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 21)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGetWithHttpInfo(Integer userId, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGetValidateBeforeCall(userId, offset, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户转发的作品数据/Get user repost video data (asynchronously)
     * # [中文] ### 用途: - 获取用户转发的作品数据 ### 参数: - user_id: 用户id，可以通过 handler_user_profile 端点获取，响应中的关键字为uid。 - offset: 偏移量 - count: 数量 ### 返回: - 用户转发作品数据  # [English] ### Purpose: - Get user repost video data ### Parameters: - user_id: User id, which can be obtained through the handler_user_profile endpoint, with the keyword uid in the response. - offset: Offset - count: Number ### Return: - User repost video data  # [示例/Example] user_id &#x3D; 107955 offset &#x3D; 0 count &#x3D; 21
     * @param userId 用户id/User id (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 21)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGetAsync(Integer userId, Integer offset, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGetValidateBeforeCall(userId, offset, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_0
     * @param userId 用户id/User id (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 21)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_0Call(Integer userId, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_user_repost_videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_0ValidateBeforeCall(Integer userId, Integer offset, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_0Call(userId, offset, count, _callback);
        return localVarCall;

    }

    /**
     * 获取用户转发的作品数据/Get user repost video data
     * # [中文] ### 用途: - 获取用户转发的作品数据 ### 参数: - user_id: 用户id，可以通过 handler_user_profile 端点获取，响应中的关键字为uid。 - offset: 偏移量 - count: 数量 ### 返回: - 用户转发作品数据  # [English] ### Purpose: - Get user repost video data ### Parameters: - user_id: User id, which can be obtained through the handler_user_profile endpoint, with the keyword uid in the response. - offset: Offset - count: Number ### Return: - User repost video data  # [示例/Example] user_id &#x3D; 107955 offset &#x3D; 0 count &#x3D; 21
     * @param userId 用户id/User id (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 21)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_0(Integer userId, Integer offset, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_0WithHttpInfo(userId, offset, count);
        return localVarResp.getData();
    }

    /**
     * 获取用户转发的作品数据/Get user repost video data
     * # [中文] ### 用途: - 获取用户转发的作品数据 ### 参数: - user_id: 用户id，可以通过 handler_user_profile 端点获取，响应中的关键字为uid。 - offset: 偏移量 - count: 数量 ### 返回: - 用户转发作品数据  # [English] ### Purpose: - Get user repost video data ### Parameters: - user_id: User id, which can be obtained through the handler_user_profile endpoint, with the keyword uid in the response. - offset: Offset - count: Number ### Return: - User repost video data  # [示例/Example] user_id &#x3D; 107955 offset &#x3D; 0 count &#x3D; 21
     * @param userId 用户id/User id (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 21)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_0WithHttpInfo(Integer userId, Integer offset, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_0ValidateBeforeCall(userId, offset, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户转发的作品数据/Get user repost video data (asynchronously)
     * # [中文] ### 用途: - 获取用户转发的作品数据 ### 参数: - user_id: 用户id，可以通过 handler_user_profile 端点获取，响应中的关键字为uid。 - offset: 偏移量 - count: 数量 ### 返回: - 用户转发作品数据  # [English] ### Purpose: - Get user repost video data ### Parameters: - user_id: User id, which can be obtained through the handler_user_profile endpoint, with the keyword uid in the response. - offset: Offset - count: Number ### Return: - User repost video data  # [示例/Example] user_id &#x3D; 107955 offset &#x3D; 0 count &#x3D; 21
     * @param userId 用户id/User id (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 21)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_0Async(Integer userId, Integer offset, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_0ValidateBeforeCall(userId, offset, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param userSearchFollowerCount 根据粉丝数排序/Sort by number of followers (optional, default to &quot;&quot;)
     * @param userSearchProfileType 根据账号类型排序/Sort by account type (optional, default to &quot;&quot;)
     * @param userSearchOtherPref 根据其他偏好排序/Sort by other preferences (optional, default to &quot;&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGetCall(String keyword, Integer offset, Integer count, String userSearchFollowerCount, String userSearchProfileType, String userSearchOtherPref, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_user_search_result";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (userSearchFollowerCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_search_follower_count", userSearchFollowerCount));
        }

        if (userSearchProfileType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_search_profile_type", userSearchProfileType));
        }

        if (userSearchOtherPref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_search_other_pref", userSearchOtherPref));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGetValidateBeforeCall(String keyword, Integer offset, Integer count, String userSearchFollowerCount, String userSearchProfileType, String userSearchOtherPref, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGetCall(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref, _callback);
        return localVarCall;

    }

    /**
     * 获取指定关键词的用户搜索结果/Get user search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K &#x3D; 0-1K，     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K，     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K，     - ONE_H_K_PLUS &#x3D; 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED &#x3D; 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME &#x3D; 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K &#x3D; 0-1K,     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K,     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K,     - ONE_H_K_PLUS &#x3D; 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED &#x3D; Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME &#x3D; Sort by username relevance ### Return: - User search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20 user_search_follower_count &#x3D; \&quot;\&quot; user_search_profile_type &#x3D; \&quot;\&quot; user_search_other_pref &#x3D; \&quot;\&quot;
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param userSearchFollowerCount 根据粉丝数排序/Sort by number of followers (optional, default to &quot;&quot;)
     * @param userSearchProfileType 根据账号类型排序/Sort by account type (optional, default to &quot;&quot;)
     * @param userSearchOtherPref 根据其他偏好排序/Sort by other preferences (optional, default to &quot;&quot;)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet(String keyword, Integer offset, Integer count, String userSearchFollowerCount, String userSearchProfileType, String userSearchOtherPref) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGetWithHttpInfo(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref);
        return localVarResp.getData();
    }

    /**
     * 获取指定关键词的用户搜索结果/Get user search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K &#x3D; 0-1K，     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K，     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K，     - ONE_H_K_PLUS &#x3D; 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED &#x3D; 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME &#x3D; 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K &#x3D; 0-1K,     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K,     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K,     - ONE_H_K_PLUS &#x3D; 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED &#x3D; Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME &#x3D; Sort by username relevance ### Return: - User search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20 user_search_follower_count &#x3D; \&quot;\&quot; user_search_profile_type &#x3D; \&quot;\&quot; user_search_other_pref &#x3D; \&quot;\&quot;
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param userSearchFollowerCount 根据粉丝数排序/Sort by number of followers (optional, default to &quot;&quot;)
     * @param userSearchProfileType 根据账号类型排序/Sort by account type (optional, default to &quot;&quot;)
     * @param userSearchOtherPref 根据其他偏好排序/Sort by other preferences (optional, default to &quot;&quot;)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGetWithHttpInfo(String keyword, Integer offset, Integer count, String userSearchFollowerCount, String userSearchProfileType, String userSearchOtherPref) throws ApiException {
        okhttp3.Call localVarCall = fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGetValidateBeforeCall(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定关键词的用户搜索结果/Get user search results of specified keywords (asynchronously)
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K &#x3D; 0-1K，     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K，     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K，     - ONE_H_K_PLUS &#x3D; 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED &#x3D; 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME &#x3D; 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K &#x3D; 0-1K,     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K,     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K,     - ONE_H_K_PLUS &#x3D; 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED &#x3D; Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME &#x3D; Sort by username relevance ### Return: - User search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20 user_search_follower_count &#x3D; \&quot;\&quot; user_search_profile_type &#x3D; \&quot;\&quot; user_search_other_pref &#x3D; \&quot;\&quot;
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param userSearchFollowerCount 根据粉丝数排序/Sort by number of followers (optional, default to &quot;&quot;)
     * @param userSearchProfileType 根据账号类型排序/Sort by account type (optional, default to &quot;&quot;)
     * @param userSearchOtherPref 根据其他偏好排序/Sort by other preferences (optional, default to &quot;&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGetAsync(String keyword, Integer offset, Integer count, String userSearchFollowerCount, String userSearchProfileType, String userSearchOtherPref, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGetValidateBeforeCall(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_0
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param userSearchFollowerCount 根据粉丝数排序/Sort by number of followers (optional, default to &quot;&quot;)
     * @param userSearchProfileType 根据账号类型排序/Sort by account type (optional, default to &quot;&quot;)
     * @param userSearchOtherPref 根据其他偏好排序/Sort by other preferences (optional, default to &quot;&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_0Call(String keyword, Integer offset, Integer count, String userSearchFollowerCount, String userSearchProfileType, String userSearchOtherPref, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_user_search_result";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (userSearchFollowerCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_search_follower_count", userSearchFollowerCount));
        }

        if (userSearchProfileType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_search_profile_type", userSearchProfileType));
        }

        if (userSearchOtherPref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_search_other_pref", userSearchOtherPref));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_0ValidateBeforeCall(String keyword, Integer offset, Integer count, String userSearchFollowerCount, String userSearchProfileType, String userSearchOtherPref, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_0Call(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref, _callback);
        return localVarCall;

    }

    /**
     * 获取指定关键词的用户搜索结果/Get user search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K &#x3D; 0-1K，     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K，     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K，     - ONE_H_K_PLUS &#x3D; 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED &#x3D; 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME &#x3D; 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K &#x3D; 0-1K,     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K,     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K,     - ONE_H_K_PLUS &#x3D; 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED &#x3D; Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME &#x3D; Sort by username relevance ### Return: - User search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20 user_search_follower_count &#x3D; \&quot;\&quot; user_search_profile_type &#x3D; \&quot;\&quot; user_search_other_pref &#x3D; \&quot;\&quot;
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param userSearchFollowerCount 根据粉丝数排序/Sort by number of followers (optional, default to &quot;&quot;)
     * @param userSearchProfileType 根据账号类型排序/Sort by account type (optional, default to &quot;&quot;)
     * @param userSearchOtherPref 根据其他偏好排序/Sort by other preferences (optional, default to &quot;&quot;)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_0(String keyword, Integer offset, Integer count, String userSearchFollowerCount, String userSearchProfileType, String userSearchOtherPref) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_0WithHttpInfo(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref);
        return localVarResp.getData();
    }

    /**
     * 获取指定关键词的用户搜索结果/Get user search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K &#x3D; 0-1K，     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K，     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K，     - ONE_H_K_PLUS &#x3D; 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED &#x3D; 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME &#x3D; 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K &#x3D; 0-1K,     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K,     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K,     - ONE_H_K_PLUS &#x3D; 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED &#x3D; Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME &#x3D; Sort by username relevance ### Return: - User search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20 user_search_follower_count &#x3D; \&quot;\&quot; user_search_profile_type &#x3D; \&quot;\&quot; user_search_other_pref &#x3D; \&quot;\&quot;
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param userSearchFollowerCount 根据粉丝数排序/Sort by number of followers (optional, default to &quot;&quot;)
     * @param userSearchProfileType 根据账号类型排序/Sort by account type (optional, default to &quot;&quot;)
     * @param userSearchOtherPref 根据其他偏好排序/Sort by other preferences (optional, default to &quot;&quot;)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_0WithHttpInfo(String keyword, Integer offset, Integer count, String userSearchFollowerCount, String userSearchProfileType, String userSearchOtherPref) throws ApiException {
        okhttp3.Call localVarCall = fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_0ValidateBeforeCall(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定关键词的用户搜索结果/Get user search results of specified keywords (asynchronously)
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K &#x3D; 0-1K，     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K，     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K，     - ONE_H_K_PLUS &#x3D; 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED &#x3D; 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME &#x3D; 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K &#x3D; 0-1K,     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K,     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K,     - ONE_H_K_PLUS &#x3D; 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED &#x3D; Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME &#x3D; Sort by username relevance ### Return: - User search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20 user_search_follower_count &#x3D; \&quot;\&quot; user_search_profile_type &#x3D; \&quot;\&quot; user_search_other_pref &#x3D; \&quot;\&quot;
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param userSearchFollowerCount 根据粉丝数排序/Sort by number of followers (optional, default to &quot;&quot;)
     * @param userSearchProfileType 根据账号类型排序/Sort by account type (optional, default to &quot;&quot;)
     * @param userSearchOtherPref 根据其他偏好排序/Sort by other preferences (optional, default to &quot;&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_0Async(String keyword, Integer offset, Integer count, String userSearchFollowerCount, String userSearchProfileType, String userSearchOtherPref, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_0ValidateBeforeCall(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet
     * @param awemeId 作品id/Video id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGetCall(String awemeId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_video_comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (awemeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aweme_id", awemeId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGetValidateBeforeCall(String awemeId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'awemeId' is set
        if (awemeId == null) {
            throw new ApiException("Missing the required parameter 'awemeId' when calling fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGetCall(awemeId, cursor, count, _callback);
        return localVarCall;

    }

    /**
     * 获取单个视频评论数据/Get single video comments data
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; cursor &#x3D; 0 count &#x3D; 20
     * @param awemeId 作品id/Video id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet(String awemeId, Integer cursor, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGetWithHttpInfo(awemeId, cursor, count);
        return localVarResp.getData();
    }

    /**
     * 获取单个视频评论数据/Get single video comments data
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; cursor &#x3D; 0 count &#x3D; 20
     * @param awemeId 作品id/Video id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGetWithHttpInfo(String awemeId, Integer cursor, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGetValidateBeforeCall(awemeId, cursor, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取单个视频评论数据/Get single video comments data (asynchronously)
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; cursor &#x3D; 0 count &#x3D; 20
     * @param awemeId 作品id/Video id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGetAsync(String awemeId, Integer cursor, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGetValidateBeforeCall(awemeId, cursor, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_0
     * @param awemeId 作品id/Video id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_0Call(String awemeId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_video_comments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (awemeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aweme_id", awemeId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_0ValidateBeforeCall(String awemeId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'awemeId' is set
        if (awemeId == null) {
            throw new ApiException("Missing the required parameter 'awemeId' when calling fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_0Call(awemeId, cursor, count, _callback);
        return localVarCall;

    }

    /**
     * 获取单个视频评论数据/Get single video comments data
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; cursor &#x3D; 0 count &#x3D; 20
     * @param awemeId 作品id/Video id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_0(String awemeId, Integer cursor, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_0WithHttpInfo(awemeId, cursor, count);
        return localVarResp.getData();
    }

    /**
     * 获取单个视频评论数据/Get single video comments data
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; cursor &#x3D; 0 count &#x3D; 20
     * @param awemeId 作品id/Video id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_0WithHttpInfo(String awemeId, Integer cursor, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_0ValidateBeforeCall(awemeId, cursor, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取单个视频评论数据/Get single video comments data (asynchronously)
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; cursor &#x3D; 0 count &#x3D; 20
     * @param awemeId 作品id/Video id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_0Async(String awemeId, Integer cursor, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_0ValidateBeforeCall(awemeId, cursor, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet
     * @param itemId 作品id/Video id (required)
     * @param commentId 评论id/Comment id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGetCall(String itemId, String commentId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_video_comment_replies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (itemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("item_id", itemId));
        }

        if (commentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment_id", commentId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGetValidateBeforeCall(String itemId, String commentId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGetCall(itemId, commentId, cursor, count, _callback);
        return localVarCall;

    }

    /**
     * 获取指定视频的评论回复数据/Get comment replies data of specified video
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; comment_id &#x3D; \&quot;7327061675382260482\&quot; cursor &#x3D; 0 count &#x3D; 20
     * @param itemId 作品id/Video id (required)
     * @param commentId 评论id/Comment id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet(String itemId, String commentId, Integer cursor, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGetWithHttpInfo(itemId, commentId, cursor, count);
        return localVarResp.getData();
    }

    /**
     * 获取指定视频的评论回复数据/Get comment replies data of specified video
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; comment_id &#x3D; \&quot;7327061675382260482\&quot; cursor &#x3D; 0 count &#x3D; 20
     * @param itemId 作品id/Video id (required)
     * @param commentId 评论id/Comment id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGetWithHttpInfo(String itemId, String commentId, Integer cursor, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGetValidateBeforeCall(itemId, commentId, cursor, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定视频的评论回复数据/Get comment replies data of specified video (asynchronously)
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; comment_id &#x3D; \&quot;7327061675382260482\&quot; cursor &#x3D; 0 count &#x3D; 20
     * @param itemId 作品id/Video id (required)
     * @param commentId 评论id/Comment id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGetAsync(String itemId, String commentId, Integer cursor, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGetValidateBeforeCall(itemId, commentId, cursor, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_0
     * @param itemId 作品id/Video id (required)
     * @param commentId 评论id/Comment id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_0Call(String itemId, String commentId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_video_comment_replies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (itemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("item_id", itemId));
        }

        if (commentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment_id", commentId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_0ValidateBeforeCall(String itemId, String commentId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_0(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_0Call(itemId, commentId, cursor, count, _callback);
        return localVarCall;

    }

    /**
     * 获取指定视频的评论回复数据/Get comment replies data of specified video
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; comment_id &#x3D; \&quot;7327061675382260482\&quot; cursor &#x3D; 0 count &#x3D; 20
     * @param itemId 作品id/Video id (required)
     * @param commentId 评论id/Comment id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_0(String itemId, String commentId, Integer cursor, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_0WithHttpInfo(itemId, commentId, cursor, count);
        return localVarResp.getData();
    }

    /**
     * 获取指定视频的评论回复数据/Get comment replies data of specified video
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; comment_id &#x3D; \&quot;7327061675382260482\&quot; cursor &#x3D; 0 count &#x3D; 20
     * @param itemId 作品id/Video id (required)
     * @param commentId 评论id/Comment id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_0WithHttpInfo(String itemId, String commentId, Integer cursor, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_0ValidateBeforeCall(itemId, commentId, cursor, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定视频的评论回复数据/Get comment replies data of specified video (asynchronously)
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; comment_id &#x3D; \&quot;7327061675382260482\&quot; cursor &#x3D; 0 count &#x3D; 20
     * @param itemId 作品id/Video id (required)
     * @param commentId 评论id/Comment id (required)
     * @param cursor 游标/Cursor (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_0Async(String itemId, String commentId, Integer cursor, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_0ValidateBeforeCall(itemId, commentId, cursor, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param sortType 排序类型/Sort type (optional)
     * @param publishTime 发布时间/Publish time (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGetCall(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_video_search_result";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (sortType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_type", sortType));
        }

        if (publishTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publish_time", publishTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGetValidateBeforeCall(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGetCall(keyword, offset, count, sortType, publishTime, _callback);
        return localVarCall;

    }

    /**
     * 获取指定关键词的视频搜索结果/Get video search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param sortType 排序类型/Sort type (optional)
     * @param publishTime 发布时间/Publish time (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGetWithHttpInfo(keyword, offset, count, sortType, publishTime);
        return localVarResp.getData();
    }

    /**
     * 获取指定关键词的视频搜索结果/Get video search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param sortType 排序类型/Sort type (optional)
     * @param publishTime 发布时间/Publish time (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGetWithHttpInfo(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime) throws ApiException {
        okhttp3.Call localVarCall = fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGetValidateBeforeCall(keyword, offset, count, sortType, publishTime, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定关键词的视频搜索结果/Get video search results of specified keywords (asynchronously)
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param sortType 排序类型/Sort type (optional)
     * @param publishTime 发布时间/Publish time (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGetAsync(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGetValidateBeforeCall(keyword, offset, count, sortType, publishTime, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_0
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param sortType 排序类型/Sort type (optional)
     * @param publishTime 发布时间/Publish time (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_0Call(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/fetch_video_search_result";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (sortType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_type", sortType));
        }

        if (publishTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("publish_time", publishTime));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_0ValidateBeforeCall(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_0Call(keyword, offset, count, sortType, publishTime, _callback);
        return localVarCall;

    }

    /**
     * 获取指定关键词的视频搜索结果/Get video search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param sortType 排序类型/Sort type (optional)
     * @param publishTime 发布时间/Publish time (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_0(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_0WithHttpInfo(keyword, offset, count, sortType, publishTime);
        return localVarResp.getData();
    }

    /**
     * 获取指定关键词的视频搜索结果/Get video search results of specified keywords
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param sortType 排序类型/Sort type (optional)
     * @param publishTime 发布时间/Publish time (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_0WithHttpInfo(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime) throws ApiException {
        okhttp3.Call localVarCall = fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_0ValidateBeforeCall(keyword, offset, count, sortType, publishTime, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定关键词的视频搜索结果/Get video search results of specified keywords (asynchronously)
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
     * @param keyword 关键词/Keyword (required)
     * @param offset 偏移量/Offset (optional, default to 0)
     * @param count 数量/Number (optional, default to 20)
     * @param sortType 排序类型/Sort type (optional)
     * @param publishTime 发布时间/Publish time (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_0Async(String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_0ValidateBeforeCall(keyword, offset, count, sortType, publishTime, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGetCall(String secUserId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/handler_user_profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sec_user_id", secUserId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGetValidateBeforeCall(String secUserId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUserId' is set
        if (secUserId == null) {
            throw new ApiException("Missing the required parameter 'secUserId' when calling handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet(Async)");
        }
        

        okhttp3.Call localVarCall = handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGetCall(secUserId, _callback);
        return localVarCall;

    }

    /**
     * 获取指定用户的信息/Get information of specified user
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot;
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet(String secUserId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGetWithHttpInfo(secUserId);
        return localVarResp.getData();
    }

    /**
     * 获取指定用户的信息/Get information of specified user
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot;
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGetWithHttpInfo(String secUserId) throws ApiException {
        okhttp3.Call localVarCall = handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGetValidateBeforeCall(secUserId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定用户的信息/Get information of specified user (asynchronously)
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot;
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGetAsync(String secUserId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGetValidateBeforeCall(secUserId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_0
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_0Call(String secUserId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/app/v3/handler_user_profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sec_user_id", secUserId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_0ValidateBeforeCall(String secUserId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUserId' is set
        if (secUserId == null) {
            throw new ApiException("Missing the required parameter 'secUserId' when calling handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_0Call(secUserId, _callback);
        return localVarCall;

    }

    /**
     * 获取指定用户的信息/Get information of specified user
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot;
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_0(String secUserId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_0WithHttpInfo(secUserId);
        return localVarResp.getData();
    }

    /**
     * 获取指定用户的信息/Get information of specified user
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot;
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_0WithHttpInfo(String secUserId) throws ApiException {
        okhttp3.Call localVarCall = handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_0ValidateBeforeCall(secUserId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定用户的信息/Get information of specified user (asynchronously)
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot;
     * @param secUserId 用户sec_user_id/User sec_user_id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_0Async(String secUserId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_0ValidateBeforeCall(secUserId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
