/*
 * Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HttpValidationError;
import org.openapitools.client.model.ResponseModel;
import org.openapitools.client.model.XBogusModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TikTokWebApiApi {
    private ApiClient localVarApiClient;

    public TikTokWebApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TikTokWebApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @param danmakuType 消息类型/Message type (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGetCall(String liveRoomUrl, String danmakuType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/tiktok_live_room";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (liveRoomUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("live_room_url", liveRoomUrl));
        }

        if (danmakuType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("danmaku_type", danmakuType));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGetValidateBeforeCall(String liveRoomUrl, String danmakuType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'liveRoomUrl' is set
        if (liveRoomUrl == null) {
            throw new ApiException("Missing the required parameter 'liveRoomUrl' when calling douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet(Async)");
        }
        
        // verify the required parameter 'danmakuType' is set
        if (danmakuType == null) {
            throw new ApiException("Missing the required parameter 'danmakuType' when calling douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet(Async)");
        }
        

        okhttp3.Call localVarCall = douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGetCall(liveRoomUrl, danmakuType, _callback);
        return localVarCall;

    }

    /**
     * 提取直播间弹幕/Extract live room danmaku
     * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @param danmakuType 消息类型/Message type (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet(String liveRoomUrl, String danmakuType) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGetWithHttpInfo(liveRoomUrl, danmakuType);
        return localVarResp.getData();
    }

    /**
     * 提取直播间弹幕/Extract live room danmaku
     * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @param danmakuType 消息类型/Message type (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGetWithHttpInfo(String liveRoomUrl, String danmakuType) throws ApiException {
        okhttp3.Call localVarCall = douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGetValidateBeforeCall(liveRoomUrl, danmakuType, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 提取直播间弹幕/Extract live room danmaku (asynchronously)
     * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @param danmakuType 消息类型/Message type (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGetAsync(String liveRoomUrl, String danmakuType, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGetValidateBeforeCall(liveRoomUrl, danmakuType, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_0
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @param danmakuType 消息类型/Message type (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_0Call(String liveRoomUrl, String danmakuType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/tiktok_live_room";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (liveRoomUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("live_room_url", liveRoomUrl));
        }

        if (danmakuType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("danmaku_type", danmakuType));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_0ValidateBeforeCall(String liveRoomUrl, String danmakuType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'liveRoomUrl' is set
        if (liveRoomUrl == null) {
            throw new ApiException("Missing the required parameter 'liveRoomUrl' when calling douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_0(Async)");
        }
        
        // verify the required parameter 'danmakuType' is set
        if (danmakuType == null) {
            throw new ApiException("Missing the required parameter 'danmakuType' when calling douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_0Call(liveRoomUrl, danmakuType, _callback);
        return localVarCall;

    }

    /**
     * 提取直播间弹幕/Extract live room danmaku
     * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @param danmakuType 消息类型/Message type (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_0(String liveRoomUrl, String danmakuType) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_0WithHttpInfo(liveRoomUrl, danmakuType);
        return localVarResp.getData();
    }

    /**
     * 提取直播间弹幕/Extract live room danmaku
     * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @param danmakuType 消息类型/Message type (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_0WithHttpInfo(String liveRoomUrl, String danmakuType) throws ApiException {
        okhttp3.Call localVarCall = douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_0ValidateBeforeCall(liveRoomUrl, danmakuType, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 提取直播间弹幕/Extract live room danmaku (asynchronously)
     * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @param danmakuType 消息类型/Message type (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_0Async(String liveRoomUrl, String danmakuType, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_0ValidateBeforeCall(liveRoomUrl, danmakuType, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet
     * @param roomId 直播间ID/Live room ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGetCall(String roomId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_check_live_alive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (roomId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("room_id", roomId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGetValidateBeforeCall(String roomId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roomId' is set
        if (roomId == null) {
            throw new ApiException("Missing the required parameter 'roomId' when calling fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGetCall(roomId, _callback);
        return localVarCall;

    }

    /**
     * 直播间开播状态检测/Live room start status check
     * # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id &#x3D; \&quot;7381444193462078214\&quot;
     * @param roomId 直播间ID/Live room ID (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet(String roomId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGetWithHttpInfo(roomId);
        return localVarResp.getData();
    }

    /**
     * 直播间开播状态检测/Live room start status check
     * # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id &#x3D; \&quot;7381444193462078214\&quot;
     * @param roomId 直播间ID/Live room ID (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGetWithHttpInfo(String roomId) throws ApiException {
        okhttp3.Call localVarCall = fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGetValidateBeforeCall(roomId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 直播间开播状态检测/Live room start status check (asynchronously)
     * # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id &#x3D; \&quot;7381444193462078214\&quot;
     * @param roomId 直播间ID/Live room ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGetAsync(String roomId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGetValidateBeforeCall(roomId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_0
     * @param roomId 直播间ID/Live room ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_0Call(String roomId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_check_live_alive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (roomId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("room_id", roomId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_0ValidateBeforeCall(String roomId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roomId' is set
        if (roomId == null) {
            throw new ApiException("Missing the required parameter 'roomId' when calling fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_0Call(roomId, _callback);
        return localVarCall;

    }

    /**
     * 直播间开播状态检测/Live room start status check
     * # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id &#x3D; \&quot;7381444193462078214\&quot;
     * @param roomId 直播间ID/Live room ID (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_0(String roomId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_0WithHttpInfo(roomId);
        return localVarResp.getData();
    }

    /**
     * 直播间开播状态检测/Live room start status check
     * # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id &#x3D; \&quot;7381444193462078214\&quot;
     * @param roomId 直播间ID/Live room ID (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_0WithHttpInfo(String roomId) throws ApiException {
        okhttp3.Call localVarCall = fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_0ValidateBeforeCall(roomId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 直播间开播状态检测/Live room start status check (asynchronously)
     * # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id &#x3D; \&quot;7381444193462078214\&quot;
     * @param roomId 直播间ID/Live room ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_0Async(String roomId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_0ValidateBeforeCall(roomId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet
     * @param keyword 搜索关键词/Search keyword (required)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGetCall(String keyword, Integer offset, String searchId, String cookie, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_general_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        if (cookie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cookie", cookie));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGetValidateBeforeCall(String keyword, Integer offset, String searchId, String cookie, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGetCall(keyword, offset, searchId, cookie, _callback);
        return localVarCall;

    }

    /**
     * 获取综合搜索列表/Get general search list
     * # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet(String keyword, Integer offset, String searchId, String cookie) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGetWithHttpInfo(keyword, offset, searchId, cookie);
        return localVarResp.getData();
    }

    /**
     * 获取综合搜索列表/Get general search list
     * # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGetWithHttpInfo(String keyword, Integer offset, String searchId, String cookie) throws ApiException {
        okhttp3.Call localVarCall = fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGetValidateBeforeCall(keyword, offset, searchId, cookie, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取综合搜索列表/Get general search list (asynchronously)
     * # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGetAsync(String keyword, Integer offset, String searchId, String cookie, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGetValidateBeforeCall(keyword, offset, searchId, cookie, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_0
     * @param keyword 搜索关键词/Search keyword (required)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_0Call(String keyword, Integer offset, String searchId, String cookie, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_general_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        if (cookie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cookie", cookie));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_0ValidateBeforeCall(String keyword, Integer offset, String searchId, String cookie, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_0Call(keyword, offset, searchId, cookie, _callback);
        return localVarCall;

    }

    /**
     * 获取综合搜索列表/Get general search list
     * # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_0(String keyword, Integer offset, String searchId, String cookie) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_0WithHttpInfo(keyword, offset, searchId, cookie);
        return localVarResp.getData();
    }

    /**
     * 获取综合搜索列表/Get general search list
     * # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_0WithHttpInfo(String keyword, Integer offset, String searchId, String cookie) throws ApiException {
        okhttp3.Call localVarCall = fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_0ValidateBeforeCall(keyword, offset, searchId, cookie, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取综合搜索列表/Get general search list (asynchronously)
     * # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_0Async(String keyword, Integer offset, String searchId, String cookie, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_0ValidateBeforeCall(keyword, offset, searchId, cookie, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet
     * @param relatedLiveTag 相关直播标签/Related live tag (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGetCall(String relatedLiveTag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_live_recommend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (relatedLiveTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("related_live_tag", relatedLiveTag));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGetValidateBeforeCall(String relatedLiveTag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'relatedLiveTag' is set
        if (relatedLiveTag == null) {
            throw new ApiException("Missing the required parameter 'relatedLiveTag' when calling fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGetCall(relatedLiveTag, _callback);
        return localVarCall;

    }

    /**
     * 获取直播间首页推荐列表/Get live room homepage recommendation list
     * # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag &#x3D; \&quot;VALORANT\&quot;
     * @param relatedLiveTag 相关直播标签/Related live tag (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet(String relatedLiveTag) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGetWithHttpInfo(relatedLiveTag);
        return localVarResp.getData();
    }

    /**
     * 获取直播间首页推荐列表/Get live room homepage recommendation list
     * # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag &#x3D; \&quot;VALORANT\&quot;
     * @param relatedLiveTag 相关直播标签/Related live tag (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGetWithHttpInfo(String relatedLiveTag) throws ApiException {
        okhttp3.Call localVarCall = fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGetValidateBeforeCall(relatedLiveTag, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取直播间首页推荐列表/Get live room homepage recommendation list (asynchronously)
     * # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag &#x3D; \&quot;VALORANT\&quot;
     * @param relatedLiveTag 相关直播标签/Related live tag (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGetAsync(String relatedLiveTag, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGetValidateBeforeCall(relatedLiveTag, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_0
     * @param relatedLiveTag 相关直播标签/Related live tag (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_0Call(String relatedLiveTag, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_live_recommend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (relatedLiveTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("related_live_tag", relatedLiveTag));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_0ValidateBeforeCall(String relatedLiveTag, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'relatedLiveTag' is set
        if (relatedLiveTag == null) {
            throw new ApiException("Missing the required parameter 'relatedLiveTag' when calling fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_0Call(relatedLiveTag, _callback);
        return localVarCall;

    }

    /**
     * 获取直播间首页推荐列表/Get live room homepage recommendation list
     * # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag &#x3D; \&quot;VALORANT\&quot;
     * @param relatedLiveTag 相关直播标签/Related live tag (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_0(String relatedLiveTag) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_0WithHttpInfo(relatedLiveTag);
        return localVarResp.getData();
    }

    /**
     * 获取直播间首页推荐列表/Get live room homepage recommendation list
     * # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag &#x3D; \&quot;VALORANT\&quot;
     * @param relatedLiveTag 相关直播标签/Related live tag (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_0WithHttpInfo(String relatedLiveTag) throws ApiException {
        okhttp3.Call localVarCall = fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_0ValidateBeforeCall(relatedLiveTag, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取直播间首页推荐列表/Get live room homepage recommendation list (asynchronously)
     * # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag &#x3D; \&quot;VALORANT\&quot;
     * @param relatedLiveTag 相关直播标签/Related live tag (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_0Async(String relatedLiveTag, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_0ValidateBeforeCall(relatedLiveTag, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPostCommentApiV1TiktokWebFetchPostCommentGet
     * @param awemeId 作品id/Video id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param currentRegion 当前地区/Current region (optional, default to &quot;&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostCommentApiV1TiktokWebFetchPostCommentGetCall(String awemeId, Integer cursor, Integer count, String currentRegion, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_post_comment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (awemeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aweme_id", awemeId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (currentRegion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current_region", currentRegion));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPostCommentApiV1TiktokWebFetchPostCommentGetValidateBeforeCall(String awemeId, Integer cursor, Integer count, String currentRegion, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'awemeId' is set
        if (awemeId == null) {
            throw new ApiException("Missing the required parameter 'awemeId' when calling fetchPostCommentApiV1TiktokWebFetchPostCommentGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchPostCommentApiV1TiktokWebFetchPostCommentGetCall(awemeId, cursor, count, currentRegion, _callback);
        return localVarCall;

    }

    /**
     * 获取作品的评论列表/Get video comments
     * # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id &#x3D; \&quot;7304809083817774382\&quot; cursor &#x3D; 0 count &#x3D; 20 current_region &#x3D; \&quot;\&quot;
     * @param awemeId 作品id/Video id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param currentRegion 当前地区/Current region (optional, default to &quot;&quot;)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchPostCommentApiV1TiktokWebFetchPostCommentGet(String awemeId, Integer cursor, Integer count, String currentRegion) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchPostCommentApiV1TiktokWebFetchPostCommentGetWithHttpInfo(awemeId, cursor, count, currentRegion);
        return localVarResp.getData();
    }

    /**
     * 获取作品的评论列表/Get video comments
     * # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id &#x3D; \&quot;7304809083817774382\&quot; cursor &#x3D; 0 count &#x3D; 20 current_region &#x3D; \&quot;\&quot;
     * @param awemeId 作品id/Video id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param currentRegion 当前地区/Current region (optional, default to &quot;&quot;)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchPostCommentApiV1TiktokWebFetchPostCommentGetWithHttpInfo(String awemeId, Integer cursor, Integer count, String currentRegion) throws ApiException {
        okhttp3.Call localVarCall = fetchPostCommentApiV1TiktokWebFetchPostCommentGetValidateBeforeCall(awemeId, cursor, count, currentRegion, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取作品的评论列表/Get video comments (asynchronously)
     * # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id &#x3D; \&quot;7304809083817774382\&quot; cursor &#x3D; 0 count &#x3D; 20 current_region &#x3D; \&quot;\&quot;
     * @param awemeId 作品id/Video id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param currentRegion 当前地区/Current region (optional, default to &quot;&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostCommentApiV1TiktokWebFetchPostCommentGetAsync(String awemeId, Integer cursor, Integer count, String currentRegion, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPostCommentApiV1TiktokWebFetchPostCommentGetValidateBeforeCall(awemeId, cursor, count, currentRegion, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPostCommentApiV1TiktokWebFetchPostCommentGet_0
     * @param awemeId 作品id/Video id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param currentRegion 当前地区/Current region (optional, default to &quot;&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostCommentApiV1TiktokWebFetchPostCommentGet_0Call(String awemeId, Integer cursor, Integer count, String currentRegion, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_post_comment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (awemeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aweme_id", awemeId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (currentRegion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current_region", currentRegion));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPostCommentApiV1TiktokWebFetchPostCommentGet_0ValidateBeforeCall(String awemeId, Integer cursor, Integer count, String currentRegion, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'awemeId' is set
        if (awemeId == null) {
            throw new ApiException("Missing the required parameter 'awemeId' when calling fetchPostCommentApiV1TiktokWebFetchPostCommentGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchPostCommentApiV1TiktokWebFetchPostCommentGet_0Call(awemeId, cursor, count, currentRegion, _callback);
        return localVarCall;

    }

    /**
     * 获取作品的评论列表/Get video comments
     * # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id &#x3D; \&quot;7304809083817774382\&quot; cursor &#x3D; 0 count &#x3D; 20 current_region &#x3D; \&quot;\&quot;
     * @param awemeId 作品id/Video id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param currentRegion 当前地区/Current region (optional, default to &quot;&quot;)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchPostCommentApiV1TiktokWebFetchPostCommentGet_0(String awemeId, Integer cursor, Integer count, String currentRegion) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchPostCommentApiV1TiktokWebFetchPostCommentGet_0WithHttpInfo(awemeId, cursor, count, currentRegion);
        return localVarResp.getData();
    }

    /**
     * 获取作品的评论列表/Get video comments
     * # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id &#x3D; \&quot;7304809083817774382\&quot; cursor &#x3D; 0 count &#x3D; 20 current_region &#x3D; \&quot;\&quot;
     * @param awemeId 作品id/Video id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param currentRegion 当前地区/Current region (optional, default to &quot;&quot;)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchPostCommentApiV1TiktokWebFetchPostCommentGet_0WithHttpInfo(String awemeId, Integer cursor, Integer count, String currentRegion) throws ApiException {
        okhttp3.Call localVarCall = fetchPostCommentApiV1TiktokWebFetchPostCommentGet_0ValidateBeforeCall(awemeId, cursor, count, currentRegion, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取作品的评论列表/Get video comments (asynchronously)
     * # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id &#x3D; \&quot;7304809083817774382\&quot; cursor &#x3D; 0 count &#x3D; 20 current_region &#x3D; \&quot;\&quot;
     * @param awemeId 作品id/Video id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param currentRegion 当前地区/Current region (optional, default to &quot;&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostCommentApiV1TiktokWebFetchPostCommentGet_0Async(String awemeId, Integer cursor, Integer count, String currentRegion, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPostCommentApiV1TiktokWebFetchPostCommentGet_0ValidateBeforeCall(awemeId, cursor, count, currentRegion, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet
     * @param itemId 作品id/Video id (required)
     * @param commentId 评论id/Comment id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param currentRegion 当前地区/Current region (optional, default to &quot;&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGetCall(String itemId, String commentId, Integer cursor, Integer count, String currentRegion, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_post_comment_reply";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (itemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("item_id", itemId));
        }

        if (commentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment_id", commentId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (currentRegion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current_region", currentRegion));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGetValidateBeforeCall(String itemId, String commentId, Integer cursor, Integer count, String currentRegion, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGetCall(itemId, commentId, cursor, count, currentRegion, _callback);
        return localVarCall;

    }

    /**
     * 获取作品的评论回复列表/Get video comment replies
     * # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id &#x3D; \&quot;7304809083817774382\&quot; comment_id &#x3D; \&quot;7304877760886588191\&quot; cursor &#x3D; 0 count &#x3D; 20 current_region &#x3D; \&quot;\&quot;
     * @param itemId 作品id/Video id (required)
     * @param commentId 评论id/Comment id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param currentRegion 当前地区/Current region (optional, default to &quot;&quot;)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet(String itemId, String commentId, Integer cursor, Integer count, String currentRegion) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGetWithHttpInfo(itemId, commentId, cursor, count, currentRegion);
        return localVarResp.getData();
    }

    /**
     * 获取作品的评论回复列表/Get video comment replies
     * # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id &#x3D; \&quot;7304809083817774382\&quot; comment_id &#x3D; \&quot;7304877760886588191\&quot; cursor &#x3D; 0 count &#x3D; 20 current_region &#x3D; \&quot;\&quot;
     * @param itemId 作品id/Video id (required)
     * @param commentId 评论id/Comment id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param currentRegion 当前地区/Current region (optional, default to &quot;&quot;)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGetWithHttpInfo(String itemId, String commentId, Integer cursor, Integer count, String currentRegion) throws ApiException {
        okhttp3.Call localVarCall = fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGetValidateBeforeCall(itemId, commentId, cursor, count, currentRegion, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取作品的评论回复列表/Get video comment replies (asynchronously)
     * # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id &#x3D; \&quot;7304809083817774382\&quot; comment_id &#x3D; \&quot;7304877760886588191\&quot; cursor &#x3D; 0 count &#x3D; 20 current_region &#x3D; \&quot;\&quot;
     * @param itemId 作品id/Video id (required)
     * @param commentId 评论id/Comment id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param currentRegion 当前地区/Current region (optional, default to &quot;&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGetAsync(String itemId, String commentId, Integer cursor, Integer count, String currentRegion, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGetValidateBeforeCall(itemId, commentId, cursor, count, currentRegion, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_0
     * @param itemId 作品id/Video id (required)
     * @param commentId 评论id/Comment id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param currentRegion 当前地区/Current region (optional, default to &quot;&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_0Call(String itemId, String commentId, Integer cursor, Integer count, String currentRegion, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_post_comment_reply";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (itemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("item_id", itemId));
        }

        if (commentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment_id", commentId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (currentRegion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current_region", currentRegion));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_0ValidateBeforeCall(String itemId, String commentId, Integer cursor, Integer count, String currentRegion, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_0(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_0Call(itemId, commentId, cursor, count, currentRegion, _callback);
        return localVarCall;

    }

    /**
     * 获取作品的评论回复列表/Get video comment replies
     * # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id &#x3D; \&quot;7304809083817774382\&quot; comment_id &#x3D; \&quot;7304877760886588191\&quot; cursor &#x3D; 0 count &#x3D; 20 current_region &#x3D; \&quot;\&quot;
     * @param itemId 作品id/Video id (required)
     * @param commentId 评论id/Comment id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param currentRegion 当前地区/Current region (optional, default to &quot;&quot;)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_0(String itemId, String commentId, Integer cursor, Integer count, String currentRegion) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_0WithHttpInfo(itemId, commentId, cursor, count, currentRegion);
        return localVarResp.getData();
    }

    /**
     * 获取作品的评论回复列表/Get video comment replies
     * # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id &#x3D; \&quot;7304809083817774382\&quot; comment_id &#x3D; \&quot;7304877760886588191\&quot; cursor &#x3D; 0 count &#x3D; 20 current_region &#x3D; \&quot;\&quot;
     * @param itemId 作品id/Video id (required)
     * @param commentId 评论id/Comment id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param currentRegion 当前地区/Current region (optional, default to &quot;&quot;)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_0WithHttpInfo(String itemId, String commentId, Integer cursor, Integer count, String currentRegion) throws ApiException {
        okhttp3.Call localVarCall = fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_0ValidateBeforeCall(itemId, commentId, cursor, count, currentRegion, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取作品的评论回复列表/Get video comment replies (asynchronously)
     * # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id &#x3D; \&quot;7304809083817774382\&quot; comment_id &#x3D; \&quot;7304877760886588191\&quot; cursor &#x3D; 0 count &#x3D; 20 current_region &#x3D; \&quot;\&quot;
     * @param itemId 作品id/Video id (required)
     * @param commentId 评论id/Comment id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param currentRegion 当前地区/Current region (optional, default to &quot;&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_0Async(String itemId, String commentId, Integer cursor, Integer count, String currentRegion, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_0ValidateBeforeCall(itemId, commentId, cursor, count, currentRegion, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPostDetailApiV1TiktokWebFetchPostDetailGet
     * @param itemId 作品id/Video id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostDetailApiV1TiktokWebFetchPostDetailGetCall(String itemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_post_detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (itemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemId", itemId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPostDetailApiV1TiktokWebFetchPostDetailGetValidateBeforeCall(String itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling fetchPostDetailApiV1TiktokWebFetchPostDetailGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchPostDetailApiV1TiktokWebFetchPostDetailGetCall(itemId, _callback);
        return localVarCall;

    }

    /**
     * 获取单个作品数据/Get single video data
     * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId &#x3D; \&quot;7339393672959757570\&quot;
     * @param itemId 作品id/Video id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchPostDetailApiV1TiktokWebFetchPostDetailGet(String itemId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchPostDetailApiV1TiktokWebFetchPostDetailGetWithHttpInfo(itemId);
        return localVarResp.getData();
    }

    /**
     * 获取单个作品数据/Get single video data
     * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId &#x3D; \&quot;7339393672959757570\&quot;
     * @param itemId 作品id/Video id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchPostDetailApiV1TiktokWebFetchPostDetailGetWithHttpInfo(String itemId) throws ApiException {
        okhttp3.Call localVarCall = fetchPostDetailApiV1TiktokWebFetchPostDetailGetValidateBeforeCall(itemId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取单个作品数据/Get single video data (asynchronously)
     * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId &#x3D; \&quot;7339393672959757570\&quot;
     * @param itemId 作品id/Video id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostDetailApiV1TiktokWebFetchPostDetailGetAsync(String itemId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPostDetailApiV1TiktokWebFetchPostDetailGetValidateBeforeCall(itemId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPostDetailApiV1TiktokWebFetchPostDetailGet_0
     * @param itemId 作品id/Video id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostDetailApiV1TiktokWebFetchPostDetailGet_0Call(String itemId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_post_detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (itemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("itemId", itemId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPostDetailApiV1TiktokWebFetchPostDetailGet_0ValidateBeforeCall(String itemId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling fetchPostDetailApiV1TiktokWebFetchPostDetailGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchPostDetailApiV1TiktokWebFetchPostDetailGet_0Call(itemId, _callback);
        return localVarCall;

    }

    /**
     * 获取单个作品数据/Get single video data
     * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId &#x3D; \&quot;7339393672959757570\&quot;
     * @param itemId 作品id/Video id (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchPostDetailApiV1TiktokWebFetchPostDetailGet_0(String itemId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchPostDetailApiV1TiktokWebFetchPostDetailGet_0WithHttpInfo(itemId);
        return localVarResp.getData();
    }

    /**
     * 获取单个作品数据/Get single video data
     * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId &#x3D; \&quot;7339393672959757570\&quot;
     * @param itemId 作品id/Video id (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchPostDetailApiV1TiktokWebFetchPostDetailGet_0WithHttpInfo(String itemId) throws ApiException {
        okhttp3.Call localVarCall = fetchPostDetailApiV1TiktokWebFetchPostDetailGet_0ValidateBeforeCall(itemId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取单个作品数据/Get single video data (asynchronously)
     * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId &#x3D; \&quot;7339393672959757570\&quot;
     * @param itemId 作品id/Video id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostDetailApiV1TiktokWebFetchPostDetailGet_0Async(String itemId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPostDetailApiV1TiktokWebFetchPostDetailGet_0ValidateBeforeCall(itemId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet
     * @param keyword 搜索关键词/Search keyword (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGetCall(String keyword, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_search_keyword_suggest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGetValidateBeforeCall(String keyword, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGetCall(keyword, _callback);
        return localVarCall;

    }

    /**
     * 搜索关键字推荐/Search keyword suggest
     * # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet(String keyword) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGetWithHttpInfo(keyword);
        return localVarResp.getData();
    }

    /**
     * 搜索关键字推荐/Search keyword suggest
     * # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGetWithHttpInfo(String keyword) throws ApiException {
        okhttp3.Call localVarCall = fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGetValidateBeforeCall(keyword, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 搜索关键字推荐/Search keyword suggest (asynchronously)
     * # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGetAsync(String keyword, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGetValidateBeforeCall(keyword, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_0
     * @param keyword 搜索关键词/Search keyword (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_0Call(String keyword, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_search_keyword_suggest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_0ValidateBeforeCall(String keyword, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_0Call(keyword, _callback);
        return localVarCall;

    }

    /**
     * 搜索关键字推荐/Search keyword suggest
     * # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_0(String keyword) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_0WithHttpInfo(keyword);
        return localVarResp.getData();
    }

    /**
     * 搜索关键字推荐/Search keyword suggest
     * # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_0WithHttpInfo(String keyword) throws ApiException {
        okhttp3.Call localVarCall = fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_0ValidateBeforeCall(keyword, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 搜索关键字推荐/Search keyword suggest (asynchronously)
     * # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_0Async(String keyword, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_0ValidateBeforeCall(keyword, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet
     * @param keyword 搜索关键词/Search keyword (required)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchLiveApiV1TiktokWebFetchSearchLiveGetCall(String keyword, Integer count, Integer offset, String searchId, String cookie, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_search_live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        if (cookie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cookie", cookie));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSearchLiveApiV1TiktokWebFetchSearchLiveGetValidateBeforeCall(String keyword, Integer count, Integer offset, String searchId, String cookie, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchSearchLiveApiV1TiktokWebFetchSearchLiveGetCall(keyword, count, offset, searchId, cookie, _callback);
        return localVarCall;

    }

    /**
     * 搜索直播/Search live
     * # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; count &#x3D; 20 offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet(String keyword, Integer count, Integer offset, String searchId, String cookie) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchSearchLiveApiV1TiktokWebFetchSearchLiveGetWithHttpInfo(keyword, count, offset, searchId, cookie);
        return localVarResp.getData();
    }

    /**
     * 搜索直播/Search live
     * # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; count &#x3D; 20 offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchSearchLiveApiV1TiktokWebFetchSearchLiveGetWithHttpInfo(String keyword, Integer count, Integer offset, String searchId, String cookie) throws ApiException {
        okhttp3.Call localVarCall = fetchSearchLiveApiV1TiktokWebFetchSearchLiveGetValidateBeforeCall(keyword, count, offset, searchId, cookie, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 搜索直播/Search live (asynchronously)
     * # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; count &#x3D; 20 offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchLiveApiV1TiktokWebFetchSearchLiveGetAsync(String keyword, Integer count, Integer offset, String searchId, String cookie, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSearchLiveApiV1TiktokWebFetchSearchLiveGetValidateBeforeCall(keyword, count, offset, searchId, cookie, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_0
     * @param keyword 搜索关键词/Search keyword (required)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_0Call(String keyword, Integer count, Integer offset, String searchId, String cookie, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_search_live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        if (cookie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cookie", cookie));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_0ValidateBeforeCall(String keyword, Integer count, Integer offset, String searchId, String cookie, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_0Call(keyword, count, offset, searchId, cookie, _callback);
        return localVarCall;

    }

    /**
     * 搜索直播/Search live
     * # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; count &#x3D; 20 offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_0(String keyword, Integer count, Integer offset, String searchId, String cookie) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_0WithHttpInfo(keyword, count, offset, searchId, cookie);
        return localVarResp.getData();
    }

    /**
     * 搜索直播/Search live
     * # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; count &#x3D; 20 offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_0WithHttpInfo(String keyword, Integer count, Integer offset, String searchId, String cookie) throws ApiException {
        okhttp3.Call localVarCall = fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_0ValidateBeforeCall(keyword, count, offset, searchId, cookie, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 搜索直播/Search live (asynchronously)
     * # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; count &#x3D; 20 offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_0Async(String keyword, Integer count, Integer offset, String searchId, String cookie, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_0ValidateBeforeCall(keyword, count, offset, searchId, cookie, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSearchUserApiV1TiktokWebFetchSearchUserGet
     * @param keyword 搜索关键词/Search keyword (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchUserApiV1TiktokWebFetchSearchUserGetCall(String keyword, Integer cursor, String searchId, String cookie, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_search_user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        if (cookie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cookie", cookie));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSearchUserApiV1TiktokWebFetchSearchUserGetValidateBeforeCall(String keyword, Integer cursor, String searchId, String cookie, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchSearchUserApiV1TiktokWebFetchSearchUserGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchSearchUserApiV1TiktokWebFetchSearchUserGetCall(keyword, cursor, searchId, cookie, _callback);
        return localVarCall;

    }

    /**
     * 搜索用户/Search user
     * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; cursor &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchSearchUserApiV1TiktokWebFetchSearchUserGet(String keyword, Integer cursor, String searchId, String cookie) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchSearchUserApiV1TiktokWebFetchSearchUserGetWithHttpInfo(keyword, cursor, searchId, cookie);
        return localVarResp.getData();
    }

    /**
     * 搜索用户/Search user
     * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; cursor &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchSearchUserApiV1TiktokWebFetchSearchUserGetWithHttpInfo(String keyword, Integer cursor, String searchId, String cookie) throws ApiException {
        okhttp3.Call localVarCall = fetchSearchUserApiV1TiktokWebFetchSearchUserGetValidateBeforeCall(keyword, cursor, searchId, cookie, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 搜索用户/Search user (asynchronously)
     * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; cursor &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchUserApiV1TiktokWebFetchSearchUserGetAsync(String keyword, Integer cursor, String searchId, String cookie, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSearchUserApiV1TiktokWebFetchSearchUserGetValidateBeforeCall(keyword, cursor, searchId, cookie, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSearchUserApiV1TiktokWebFetchSearchUserGet_0
     * @param keyword 搜索关键词/Search keyword (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchUserApiV1TiktokWebFetchSearchUserGet_0Call(String keyword, Integer cursor, String searchId, String cookie, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_search_user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        if (cookie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cookie", cookie));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSearchUserApiV1TiktokWebFetchSearchUserGet_0ValidateBeforeCall(String keyword, Integer cursor, String searchId, String cookie, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchSearchUserApiV1TiktokWebFetchSearchUserGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchSearchUserApiV1TiktokWebFetchSearchUserGet_0Call(keyword, cursor, searchId, cookie, _callback);
        return localVarCall;

    }

    /**
     * 搜索用户/Search user
     * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; cursor &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchSearchUserApiV1TiktokWebFetchSearchUserGet_0(String keyword, Integer cursor, String searchId, String cookie) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchSearchUserApiV1TiktokWebFetchSearchUserGet_0WithHttpInfo(keyword, cursor, searchId, cookie);
        return localVarResp.getData();
    }

    /**
     * 搜索用户/Search user
     * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; cursor &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchSearchUserApiV1TiktokWebFetchSearchUserGet_0WithHttpInfo(String keyword, Integer cursor, String searchId, String cookie) throws ApiException {
        okhttp3.Call localVarCall = fetchSearchUserApiV1TiktokWebFetchSearchUserGet_0ValidateBeforeCall(keyword, cursor, searchId, cookie, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 搜索用户/Search user (asynchronously)
     * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; cursor &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchUserApiV1TiktokWebFetchSearchUserGet_0Async(String keyword, Integer cursor, String searchId, String cookie, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSearchUserApiV1TiktokWebFetchSearchUserGet_0ValidateBeforeCall(keyword, cursor, searchId, cookie, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet
     * @param keyword 搜索关键词/Search keyword (required)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchVideoApiV1TiktokWebFetchSearchVideoGetCall(String keyword, Integer count, Integer offset, String searchId, String cookie, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_search_video";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        if (cookie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cookie", cookie));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSearchVideoApiV1TiktokWebFetchSearchVideoGetValidateBeforeCall(String keyword, Integer count, Integer offset, String searchId, String cookie, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchSearchVideoApiV1TiktokWebFetchSearchVideoGetCall(keyword, count, offset, searchId, cookie, _callback);
        return localVarCall;

    }

    /**
     * 搜索视频/Search video
     * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; count &#x3D; 20 offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet(String keyword, Integer count, Integer offset, String searchId, String cookie) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchSearchVideoApiV1TiktokWebFetchSearchVideoGetWithHttpInfo(keyword, count, offset, searchId, cookie);
        return localVarResp.getData();
    }

    /**
     * 搜索视频/Search video
     * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; count &#x3D; 20 offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchSearchVideoApiV1TiktokWebFetchSearchVideoGetWithHttpInfo(String keyword, Integer count, Integer offset, String searchId, String cookie) throws ApiException {
        okhttp3.Call localVarCall = fetchSearchVideoApiV1TiktokWebFetchSearchVideoGetValidateBeforeCall(keyword, count, offset, searchId, cookie, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 搜索视频/Search video (asynchronously)
     * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; count &#x3D; 20 offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchVideoApiV1TiktokWebFetchSearchVideoGetAsync(String keyword, Integer count, Integer offset, String searchId, String cookie, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSearchVideoApiV1TiktokWebFetchSearchVideoGetValidateBeforeCall(keyword, count, offset, searchId, cookie, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_0
     * @param keyword 搜索关键词/Search keyword (required)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_0Call(String keyword, Integer count, Integer offset, String searchId, String cookie, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_search_video";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        if (cookie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cookie", cookie));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_0ValidateBeforeCall(String keyword, Integer count, Integer offset, String searchId, String cookie, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_0Call(keyword, count, offset, searchId, cookie, _callback);
        return localVarCall;

    }

    /**
     * 搜索视频/Search video
     * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; count &#x3D; 20 offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_0(String keyword, Integer count, Integer offset, String searchId, String cookie) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_0WithHttpInfo(keyword, count, offset, searchId, cookie);
        return localVarResp.getData();
    }

    /**
     * 搜索视频/Search video
     * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; count &#x3D; 20 offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_0WithHttpInfo(String keyword, Integer count, Integer offset, String searchId, String cookie) throws ApiException {
        okhttp3.Call localVarCall = fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_0ValidateBeforeCall(keyword, count, offset, searchId, cookie, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 搜索视频/Search video (asynchronously)
     * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;20240828035554C02011379EBB6A00E00B\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword &#x3D; \&quot;TikTok\&quot; count &#x3D; 20 offset &#x3D; 0 search_id &#x3D; \&quot;\&quot;
     * @param keyword 搜索关键词/Search keyword (required)
     * @param count 每页数量/Number per page (optional, default to 20)
     * @param offset 翻页游标/Page cursor (optional, default to 0)
     * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
     * @param cookie 用户cookie(按需提供)/User cookie(if needed) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_0Async(String keyword, Integer count, Integer offset, String searchId, String cookie, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_0ValidateBeforeCall(keyword, count, offset, searchId, cookie, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchTagDetailApiV1TiktokWebFetchTagDetailGet
     * @param tagName Tag名称/Tag name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTagDetailApiV1TiktokWebFetchTagDetailGetCall(String tagName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_tag_detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tagName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag_name", tagName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchTagDetailApiV1TiktokWebFetchTagDetailGetValidateBeforeCall(String tagName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling fetchTagDetailApiV1TiktokWebFetchTagDetailGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchTagDetailApiV1TiktokWebFetchTagDetailGetCall(tagName, _callback);
        return localVarCall;

    }

    /**
     * Tag详情/Tag Detail
     * # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name &#x3D; \&quot;tiktok\&quot;
     * @param tagName Tag名称/Tag name (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchTagDetailApiV1TiktokWebFetchTagDetailGet(String tagName) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchTagDetailApiV1TiktokWebFetchTagDetailGetWithHttpInfo(tagName);
        return localVarResp.getData();
    }

    /**
     * Tag详情/Tag Detail
     * # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name &#x3D; \&quot;tiktok\&quot;
     * @param tagName Tag名称/Tag name (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchTagDetailApiV1TiktokWebFetchTagDetailGetWithHttpInfo(String tagName) throws ApiException {
        okhttp3.Call localVarCall = fetchTagDetailApiV1TiktokWebFetchTagDetailGetValidateBeforeCall(tagName, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tag详情/Tag Detail (asynchronously)
     * # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name &#x3D; \&quot;tiktok\&quot;
     * @param tagName Tag名称/Tag name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTagDetailApiV1TiktokWebFetchTagDetailGetAsync(String tagName, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchTagDetailApiV1TiktokWebFetchTagDetailGetValidateBeforeCall(tagName, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchTagDetailApiV1TiktokWebFetchTagDetailGet_0
     * @param tagName Tag名称/Tag name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTagDetailApiV1TiktokWebFetchTagDetailGet_0Call(String tagName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_tag_detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (tagName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag_name", tagName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchTagDetailApiV1TiktokWebFetchTagDetailGet_0ValidateBeforeCall(String tagName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling fetchTagDetailApiV1TiktokWebFetchTagDetailGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchTagDetailApiV1TiktokWebFetchTagDetailGet_0Call(tagName, _callback);
        return localVarCall;

    }

    /**
     * Tag详情/Tag Detail
     * # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name &#x3D; \&quot;tiktok\&quot;
     * @param tagName Tag名称/Tag name (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchTagDetailApiV1TiktokWebFetchTagDetailGet_0(String tagName) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchTagDetailApiV1TiktokWebFetchTagDetailGet_0WithHttpInfo(tagName);
        return localVarResp.getData();
    }

    /**
     * Tag详情/Tag Detail
     * # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name &#x3D; \&quot;tiktok\&quot;
     * @param tagName Tag名称/Tag name (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchTagDetailApiV1TiktokWebFetchTagDetailGet_0WithHttpInfo(String tagName) throws ApiException {
        okhttp3.Call localVarCall = fetchTagDetailApiV1TiktokWebFetchTagDetailGet_0ValidateBeforeCall(tagName, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tag详情/Tag Detail (asynchronously)
     * # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name &#x3D; \&quot;tiktok\&quot;
     * @param tagName Tag名称/Tag name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTagDetailApiV1TiktokWebFetchTagDetailGet_0Async(String tagName, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchTagDetailApiV1TiktokWebFetchTagDetailGet_0ValidateBeforeCall(tagName, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchTagPostApiV1TiktokWebFetchTagPostGet
     * @param challengeID Tag ID (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTagPostApiV1TiktokWebFetchTagPostGetCall(String challengeID, Integer count, Integer cursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_tag_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (challengeID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("challengeID", challengeID));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchTagPostApiV1TiktokWebFetchTagPostGetValidateBeforeCall(String challengeID, Integer count, Integer cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'challengeID' is set
        if (challengeID == null) {
            throw new ApiException("Missing the required parameter 'challengeID' when calling fetchTagPostApiV1TiktokWebFetchTagPostGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchTagPostApiV1TiktokWebFetchTagPostGetCall(challengeID, count, cursor, _callback);
        return localVarCall;

    }

    /**
     * Tag作品/Tag Post
     * # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID &#x3D; \&quot;7551\&quot; count &#x3D; 30 cursor &#x3D; 0
     * @param challengeID Tag ID (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchTagPostApiV1TiktokWebFetchTagPostGet(String challengeID, Integer count, Integer cursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchTagPostApiV1TiktokWebFetchTagPostGetWithHttpInfo(challengeID, count, cursor);
        return localVarResp.getData();
    }

    /**
     * Tag作品/Tag Post
     * # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID &#x3D; \&quot;7551\&quot; count &#x3D; 30 cursor &#x3D; 0
     * @param challengeID Tag ID (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchTagPostApiV1TiktokWebFetchTagPostGetWithHttpInfo(String challengeID, Integer count, Integer cursor) throws ApiException {
        okhttp3.Call localVarCall = fetchTagPostApiV1TiktokWebFetchTagPostGetValidateBeforeCall(challengeID, count, cursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tag作品/Tag Post (asynchronously)
     * # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID &#x3D; \&quot;7551\&quot; count &#x3D; 30 cursor &#x3D; 0
     * @param challengeID Tag ID (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTagPostApiV1TiktokWebFetchTagPostGetAsync(String challengeID, Integer count, Integer cursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchTagPostApiV1TiktokWebFetchTagPostGetValidateBeforeCall(challengeID, count, cursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchTagPostApiV1TiktokWebFetchTagPostGet_0
     * @param challengeID Tag ID (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTagPostApiV1TiktokWebFetchTagPostGet_0Call(String challengeID, Integer count, Integer cursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_tag_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (challengeID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("challengeID", challengeID));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchTagPostApiV1TiktokWebFetchTagPostGet_0ValidateBeforeCall(String challengeID, Integer count, Integer cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'challengeID' is set
        if (challengeID == null) {
            throw new ApiException("Missing the required parameter 'challengeID' when calling fetchTagPostApiV1TiktokWebFetchTagPostGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchTagPostApiV1TiktokWebFetchTagPostGet_0Call(challengeID, count, cursor, _callback);
        return localVarCall;

    }

    /**
     * Tag作品/Tag Post
     * # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID &#x3D; \&quot;7551\&quot; count &#x3D; 30 cursor &#x3D; 0
     * @param challengeID Tag ID (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchTagPostApiV1TiktokWebFetchTagPostGet_0(String challengeID, Integer count, Integer cursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchTagPostApiV1TiktokWebFetchTagPostGet_0WithHttpInfo(challengeID, count, cursor);
        return localVarResp.getData();
    }

    /**
     * Tag作品/Tag Post
     * # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID &#x3D; \&quot;7551\&quot; count &#x3D; 30 cursor &#x3D; 0
     * @param challengeID Tag ID (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchTagPostApiV1TiktokWebFetchTagPostGet_0WithHttpInfo(String challengeID, Integer count, Integer cursor) throws ApiException {
        okhttp3.Call localVarCall = fetchTagPostApiV1TiktokWebFetchTagPostGet_0ValidateBeforeCall(challengeID, count, cursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tag作品/Tag Post (asynchronously)
     * # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID &#x3D; \&quot;7551\&quot; count &#x3D; 30 cursor &#x3D; 0
     * @param challengeID Tag ID (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTagPostApiV1TiktokWebFetchTagPostGet_0Async(String challengeID, Integer count, Integer cursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchTagPostApiV1TiktokWebFetchTagPostGet_0ValidateBeforeCall(challengeID, count, cursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGetCall(String liveRoomUrl, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_tiktok_live_data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (liveRoomUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("live_room_url", liveRoomUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGetValidateBeforeCall(String liveRoomUrl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'liveRoomUrl' is set
        if (liveRoomUrl == null) {
            throw new ApiException("Missing the required parameter 'liveRoomUrl' when calling fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGetCall(liveRoomUrl, _callback);
        return localVarCall;

    }

    /**
     * 通过直播链接获取直播间信息/Get live room information via live link
     * # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url &#x3D; \&quot;https://www.tiktok.com/@.caseoh_daily/live\&quot;
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet(String liveRoomUrl) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGetWithHttpInfo(liveRoomUrl);
        return localVarResp.getData();
    }

    /**
     * 通过直播链接获取直播间信息/Get live room information via live link
     * # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url &#x3D; \&quot;https://www.tiktok.com/@.caseoh_daily/live\&quot;
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGetWithHttpInfo(String liveRoomUrl) throws ApiException {
        okhttp3.Call localVarCall = fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGetValidateBeforeCall(liveRoomUrl, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 通过直播链接获取直播间信息/Get live room information via live link (asynchronously)
     * # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url &#x3D; \&quot;https://www.tiktok.com/@.caseoh_daily/live\&quot;
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGetAsync(String liveRoomUrl, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGetValidateBeforeCall(liveRoomUrl, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_0
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_0Call(String liveRoomUrl, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_tiktok_live_data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (liveRoomUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("live_room_url", liveRoomUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_0ValidateBeforeCall(String liveRoomUrl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'liveRoomUrl' is set
        if (liveRoomUrl == null) {
            throw new ApiException("Missing the required parameter 'liveRoomUrl' when calling fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_0Call(liveRoomUrl, _callback);
        return localVarCall;

    }

    /**
     * 通过直播链接获取直播间信息/Get live room information via live link
     * # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url &#x3D; \&quot;https://www.tiktok.com/@.caseoh_daily/live\&quot;
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_0(String liveRoomUrl) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_0WithHttpInfo(liveRoomUrl);
        return localVarResp.getData();
    }

    /**
     * 通过直播链接获取直播间信息/Get live room information via live link
     * # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url &#x3D; \&quot;https://www.tiktok.com/@.caseoh_daily/live\&quot;
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_0WithHttpInfo(String liveRoomUrl) throws ApiException {
        okhttp3.Call localVarCall = fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_0ValidateBeforeCall(liveRoomUrl, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 通过直播链接获取直播间信息/Get live room information via live link (asynchronously)
     * # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url &#x3D; \&quot;https://www.tiktok.com/@.caseoh_daily/live\&quot;
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_0Async(String liveRoomUrl, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_0ValidateBeforeCall(liveRoomUrl, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserCollectApiV1TiktokWebFetchUserCollectGet
     * @param cookie 用户cookie/User cookie (required)
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserCollectApiV1TiktokWebFetchUserCollectGetCall(String cookie, String secUid, Integer cursor, Integer count, Integer coverFormat, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_user_collect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cookie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cookie", cookie));
        }

        if (secUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secUid", secUid));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (coverFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coverFormat", coverFormat));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserCollectApiV1TiktokWebFetchUserCollectGetValidateBeforeCall(String cookie, String secUid, Integer cursor, Integer count, Integer coverFormat, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cookie' is set
        if (cookie == null) {
            throw new ApiException("Missing the required parameter 'cookie' when calling fetchUserCollectApiV1TiktokWebFetchUserCollectGet(Async)");
        }
        
        // verify the required parameter 'secUid' is set
        if (secUid == null) {
            throw new ApiException("Missing the required parameter 'secUid' when calling fetchUserCollectApiV1TiktokWebFetchUserCollectGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserCollectApiV1TiktokWebFetchUserCollectGetCall(cookie, secUid, cursor, count, coverFormat, _callback);
        return localVarCall;

    }

    /**
     * 获取用户的收藏列表/Get user favorites
     * # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie &#x3D; \&quot;Your_Cookie\&quot; secUid &#x3D; \&quot;Your_SecUid\&quot; cursor &#x3D; 0 count &#x3D; 30 coverFormat &#x3D; 2
     * @param cookie 用户cookie/User cookie (required)
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserCollectApiV1TiktokWebFetchUserCollectGet(String cookie, String secUid, Integer cursor, Integer count, Integer coverFormat) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserCollectApiV1TiktokWebFetchUserCollectGetWithHttpInfo(cookie, secUid, cursor, count, coverFormat);
        return localVarResp.getData();
    }

    /**
     * 获取用户的收藏列表/Get user favorites
     * # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie &#x3D; \&quot;Your_Cookie\&quot; secUid &#x3D; \&quot;Your_SecUid\&quot; cursor &#x3D; 0 count &#x3D; 30 coverFormat &#x3D; 2
     * @param cookie 用户cookie/User cookie (required)
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserCollectApiV1TiktokWebFetchUserCollectGetWithHttpInfo(String cookie, String secUid, Integer cursor, Integer count, Integer coverFormat) throws ApiException {
        okhttp3.Call localVarCall = fetchUserCollectApiV1TiktokWebFetchUserCollectGetValidateBeforeCall(cookie, secUid, cursor, count, coverFormat, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户的收藏列表/Get user favorites (asynchronously)
     * # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie &#x3D; \&quot;Your_Cookie\&quot; secUid &#x3D; \&quot;Your_SecUid\&quot; cursor &#x3D; 0 count &#x3D; 30 coverFormat &#x3D; 2
     * @param cookie 用户cookie/User cookie (required)
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserCollectApiV1TiktokWebFetchUserCollectGetAsync(String cookie, String secUid, Integer cursor, Integer count, Integer coverFormat, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserCollectApiV1TiktokWebFetchUserCollectGetValidateBeforeCall(cookie, secUid, cursor, count, coverFormat, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserCollectApiV1TiktokWebFetchUserCollectGet_0
     * @param cookie 用户cookie/User cookie (required)
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserCollectApiV1TiktokWebFetchUserCollectGet_0Call(String cookie, String secUid, Integer cursor, Integer count, Integer coverFormat, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_user_collect";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cookie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cookie", cookie));
        }

        if (secUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secUid", secUid));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (coverFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coverFormat", coverFormat));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserCollectApiV1TiktokWebFetchUserCollectGet_0ValidateBeforeCall(String cookie, String secUid, Integer cursor, Integer count, Integer coverFormat, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cookie' is set
        if (cookie == null) {
            throw new ApiException("Missing the required parameter 'cookie' when calling fetchUserCollectApiV1TiktokWebFetchUserCollectGet_0(Async)");
        }
        
        // verify the required parameter 'secUid' is set
        if (secUid == null) {
            throw new ApiException("Missing the required parameter 'secUid' when calling fetchUserCollectApiV1TiktokWebFetchUserCollectGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserCollectApiV1TiktokWebFetchUserCollectGet_0Call(cookie, secUid, cursor, count, coverFormat, _callback);
        return localVarCall;

    }

    /**
     * 获取用户的收藏列表/Get user favorites
     * # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie &#x3D; \&quot;Your_Cookie\&quot; secUid &#x3D; \&quot;Your_SecUid\&quot; cursor &#x3D; 0 count &#x3D; 30 coverFormat &#x3D; 2
     * @param cookie 用户cookie/User cookie (required)
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserCollectApiV1TiktokWebFetchUserCollectGet_0(String cookie, String secUid, Integer cursor, Integer count, Integer coverFormat) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserCollectApiV1TiktokWebFetchUserCollectGet_0WithHttpInfo(cookie, secUid, cursor, count, coverFormat);
        return localVarResp.getData();
    }

    /**
     * 获取用户的收藏列表/Get user favorites
     * # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie &#x3D; \&quot;Your_Cookie\&quot; secUid &#x3D; \&quot;Your_SecUid\&quot; cursor &#x3D; 0 count &#x3D; 30 coverFormat &#x3D; 2
     * @param cookie 用户cookie/User cookie (required)
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserCollectApiV1TiktokWebFetchUserCollectGet_0WithHttpInfo(String cookie, String secUid, Integer cursor, Integer count, Integer coverFormat) throws ApiException {
        okhttp3.Call localVarCall = fetchUserCollectApiV1TiktokWebFetchUserCollectGet_0ValidateBeforeCall(cookie, secUid, cursor, count, coverFormat, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户的收藏列表/Get user favorites (asynchronously)
     * # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie &#x3D; \&quot;Your_Cookie\&quot; secUid &#x3D; \&quot;Your_SecUid\&quot; cursor &#x3D; 0 count &#x3D; 30 coverFormat &#x3D; 2
     * @param cookie 用户cookie/User cookie (required)
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserCollectApiV1TiktokWebFetchUserCollectGet_0Async(String cookie, String secUid, Integer cursor, Integer count, Integer coverFormat, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserCollectApiV1TiktokWebFetchUserCollectGet_0ValidateBeforeCall(cookie, secUid, cursor, count, coverFormat, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserFansApiV1TiktokWebFetchUserFansGet
     * @param secUid 用户secUid/User secUid (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param maxCursor 最大游标/Max cursor (optional, default to 0)
     * @param minCursor 最小游标/Min cursor (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFansApiV1TiktokWebFetchUserFansGetCall(String secUid, Integer count, Integer maxCursor, Integer minCursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_user_fans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secUid", secUid));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (maxCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCursor", maxCursor));
        }

        if (minCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCursor", minCursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserFansApiV1TiktokWebFetchUserFansGetValidateBeforeCall(String secUid, Integer count, Integer maxCursor, Integer minCursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUid' is set
        if (secUid == null) {
            throw new ApiException("Missing the required parameter 'secUid' when calling fetchUserFansApiV1TiktokWebFetchUserFansGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserFansApiV1TiktokWebFetchUserFansGetCall(secUid, count, maxCursor, minCursor, _callback);
        return localVarCall;

    }

    /**
     * 获取用户的粉丝列表/Get user followers
     * # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; count &#x3D; 30 maxCursor &#x3D; 0 minCursor &#x3D; 0
     * @param secUid 用户secUid/User secUid (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param maxCursor 最大游标/Max cursor (optional, default to 0)
     * @param minCursor 最小游标/Min cursor (optional, default to 0)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserFansApiV1TiktokWebFetchUserFansGet(String secUid, Integer count, Integer maxCursor, Integer minCursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserFansApiV1TiktokWebFetchUserFansGetWithHttpInfo(secUid, count, maxCursor, minCursor);
        return localVarResp.getData();
    }

    /**
     * 获取用户的粉丝列表/Get user followers
     * # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; count &#x3D; 30 maxCursor &#x3D; 0 minCursor &#x3D; 0
     * @param secUid 用户secUid/User secUid (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param maxCursor 最大游标/Max cursor (optional, default to 0)
     * @param minCursor 最小游标/Min cursor (optional, default to 0)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserFansApiV1TiktokWebFetchUserFansGetWithHttpInfo(String secUid, Integer count, Integer maxCursor, Integer minCursor) throws ApiException {
        okhttp3.Call localVarCall = fetchUserFansApiV1TiktokWebFetchUserFansGetValidateBeforeCall(secUid, count, maxCursor, minCursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户的粉丝列表/Get user followers (asynchronously)
     * # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; count &#x3D; 30 maxCursor &#x3D; 0 minCursor &#x3D; 0
     * @param secUid 用户secUid/User secUid (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param maxCursor 最大游标/Max cursor (optional, default to 0)
     * @param minCursor 最小游标/Min cursor (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFansApiV1TiktokWebFetchUserFansGetAsync(String secUid, Integer count, Integer maxCursor, Integer minCursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserFansApiV1TiktokWebFetchUserFansGetValidateBeforeCall(secUid, count, maxCursor, minCursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserFansApiV1TiktokWebFetchUserFansGet_0
     * @param secUid 用户secUid/User secUid (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param maxCursor 最大游标/Max cursor (optional, default to 0)
     * @param minCursor 最小游标/Min cursor (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFansApiV1TiktokWebFetchUserFansGet_0Call(String secUid, Integer count, Integer maxCursor, Integer minCursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_user_fans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secUid", secUid));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (maxCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCursor", maxCursor));
        }

        if (minCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCursor", minCursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserFansApiV1TiktokWebFetchUserFansGet_0ValidateBeforeCall(String secUid, Integer count, Integer maxCursor, Integer minCursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUid' is set
        if (secUid == null) {
            throw new ApiException("Missing the required parameter 'secUid' when calling fetchUserFansApiV1TiktokWebFetchUserFansGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserFansApiV1TiktokWebFetchUserFansGet_0Call(secUid, count, maxCursor, minCursor, _callback);
        return localVarCall;

    }

    /**
     * 获取用户的粉丝列表/Get user followers
     * # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; count &#x3D; 30 maxCursor &#x3D; 0 minCursor &#x3D; 0
     * @param secUid 用户secUid/User secUid (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param maxCursor 最大游标/Max cursor (optional, default to 0)
     * @param minCursor 最小游标/Min cursor (optional, default to 0)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserFansApiV1TiktokWebFetchUserFansGet_0(String secUid, Integer count, Integer maxCursor, Integer minCursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserFansApiV1TiktokWebFetchUserFansGet_0WithHttpInfo(secUid, count, maxCursor, minCursor);
        return localVarResp.getData();
    }

    /**
     * 获取用户的粉丝列表/Get user followers
     * # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; count &#x3D; 30 maxCursor &#x3D; 0 minCursor &#x3D; 0
     * @param secUid 用户secUid/User secUid (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param maxCursor 最大游标/Max cursor (optional, default to 0)
     * @param minCursor 最小游标/Min cursor (optional, default to 0)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserFansApiV1TiktokWebFetchUserFansGet_0WithHttpInfo(String secUid, Integer count, Integer maxCursor, Integer minCursor) throws ApiException {
        okhttp3.Call localVarCall = fetchUserFansApiV1TiktokWebFetchUserFansGet_0ValidateBeforeCall(secUid, count, maxCursor, minCursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户的粉丝列表/Get user followers (asynchronously)
     * # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; count &#x3D; 30 maxCursor &#x3D; 0 minCursor &#x3D; 0
     * @param secUid 用户secUid/User secUid (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param maxCursor 最大游标/Max cursor (optional, default to 0)
     * @param minCursor 最小游标/Min cursor (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFansApiV1TiktokWebFetchUserFansGet_0Async(String secUid, Integer count, Integer maxCursor, Integer minCursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserFansApiV1TiktokWebFetchUserFansGet_0ValidateBeforeCall(secUid, count, maxCursor, minCursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserFollowApiV1TiktokWebFetchUserFollowGet
     * @param secUid 用户secUid/User secUid (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param maxCursor 最大游标/Max cursor (optional, default to 0)
     * @param minCursor 最小游标/Min cursor (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowApiV1TiktokWebFetchUserFollowGetCall(String secUid, Integer count, Integer maxCursor, Integer minCursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_user_follow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secUid", secUid));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (maxCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCursor", maxCursor));
        }

        if (minCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCursor", minCursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserFollowApiV1TiktokWebFetchUserFollowGetValidateBeforeCall(String secUid, Integer count, Integer maxCursor, Integer minCursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUid' is set
        if (secUid == null) {
            throw new ApiException("Missing the required parameter 'secUid' when calling fetchUserFollowApiV1TiktokWebFetchUserFollowGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserFollowApiV1TiktokWebFetchUserFollowGetCall(secUid, count, maxCursor, minCursor, _callback);
        return localVarCall;

    }

    /**
     * 获取用户的关注列表/Get user followings
     * # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; count &#x3D; 30 maxCursor &#x3D; 0 minCursor &#x3D; 0
     * @param secUid 用户secUid/User secUid (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param maxCursor 最大游标/Max cursor (optional, default to 0)
     * @param minCursor 最小游标/Min cursor (optional, default to 0)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserFollowApiV1TiktokWebFetchUserFollowGet(String secUid, Integer count, Integer maxCursor, Integer minCursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserFollowApiV1TiktokWebFetchUserFollowGetWithHttpInfo(secUid, count, maxCursor, minCursor);
        return localVarResp.getData();
    }

    /**
     * 获取用户的关注列表/Get user followings
     * # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; count &#x3D; 30 maxCursor &#x3D; 0 minCursor &#x3D; 0
     * @param secUid 用户secUid/User secUid (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param maxCursor 最大游标/Max cursor (optional, default to 0)
     * @param minCursor 最小游标/Min cursor (optional, default to 0)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserFollowApiV1TiktokWebFetchUserFollowGetWithHttpInfo(String secUid, Integer count, Integer maxCursor, Integer minCursor) throws ApiException {
        okhttp3.Call localVarCall = fetchUserFollowApiV1TiktokWebFetchUserFollowGetValidateBeforeCall(secUid, count, maxCursor, minCursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户的关注列表/Get user followings (asynchronously)
     * # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; count &#x3D; 30 maxCursor &#x3D; 0 minCursor &#x3D; 0
     * @param secUid 用户secUid/User secUid (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param maxCursor 最大游标/Max cursor (optional, default to 0)
     * @param minCursor 最小游标/Min cursor (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowApiV1TiktokWebFetchUserFollowGetAsync(String secUid, Integer count, Integer maxCursor, Integer minCursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserFollowApiV1TiktokWebFetchUserFollowGetValidateBeforeCall(secUid, count, maxCursor, minCursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserFollowApiV1TiktokWebFetchUserFollowGet_0
     * @param secUid 用户secUid/User secUid (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param maxCursor 最大游标/Max cursor (optional, default to 0)
     * @param minCursor 最小游标/Min cursor (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowApiV1TiktokWebFetchUserFollowGet_0Call(String secUid, Integer count, Integer maxCursor, Integer minCursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_user_follow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secUid", secUid));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (maxCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxCursor", maxCursor));
        }

        if (minCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCursor", minCursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserFollowApiV1TiktokWebFetchUserFollowGet_0ValidateBeforeCall(String secUid, Integer count, Integer maxCursor, Integer minCursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUid' is set
        if (secUid == null) {
            throw new ApiException("Missing the required parameter 'secUid' when calling fetchUserFollowApiV1TiktokWebFetchUserFollowGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserFollowApiV1TiktokWebFetchUserFollowGet_0Call(secUid, count, maxCursor, minCursor, _callback);
        return localVarCall;

    }

    /**
     * 获取用户的关注列表/Get user followings
     * # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; count &#x3D; 30 maxCursor &#x3D; 0 minCursor &#x3D; 0
     * @param secUid 用户secUid/User secUid (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param maxCursor 最大游标/Max cursor (optional, default to 0)
     * @param minCursor 最小游标/Min cursor (optional, default to 0)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserFollowApiV1TiktokWebFetchUserFollowGet_0(String secUid, Integer count, Integer maxCursor, Integer minCursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserFollowApiV1TiktokWebFetchUserFollowGet_0WithHttpInfo(secUid, count, maxCursor, minCursor);
        return localVarResp.getData();
    }

    /**
     * 获取用户的关注列表/Get user followings
     * # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; count &#x3D; 30 maxCursor &#x3D; 0 minCursor &#x3D; 0
     * @param secUid 用户secUid/User secUid (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param maxCursor 最大游标/Max cursor (optional, default to 0)
     * @param minCursor 最小游标/Min cursor (optional, default to 0)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserFollowApiV1TiktokWebFetchUserFollowGet_0WithHttpInfo(String secUid, Integer count, Integer maxCursor, Integer minCursor) throws ApiException {
        okhttp3.Call localVarCall = fetchUserFollowApiV1TiktokWebFetchUserFollowGet_0ValidateBeforeCall(secUid, count, maxCursor, minCursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户的关注列表/Get user followings (asynchronously)
     * # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; count &#x3D; 30 maxCursor &#x3D; 0 minCursor &#x3D; 0
     * @param secUid 用户secUid/User secUid (required)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param maxCursor 最大游标/Max cursor (optional, default to 0)
     * @param minCursor 最小游标/Min cursor (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowApiV1TiktokWebFetchUserFollowGet_0Async(String secUid, Integer count, Integer maxCursor, Integer minCursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserFollowApiV1TiktokWebFetchUserFollowGet_0ValidateBeforeCall(secUid, count, maxCursor, minCursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserLikeApiV1TiktokWebFetchUserLikeGet
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 35)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserLikeApiV1TiktokWebFetchUserLikeGetCall(String secUid, Integer cursor, Integer count, Integer coverFormat, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_user_like";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secUid", secUid));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (coverFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coverFormat", coverFormat));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserLikeApiV1TiktokWebFetchUserLikeGetValidateBeforeCall(String secUid, Integer cursor, Integer count, Integer coverFormat, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUid' is set
        if (secUid == null) {
            throw new ApiException("Missing the required parameter 'secUid' when calling fetchUserLikeApiV1TiktokWebFetchUserLikeGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserLikeApiV1TiktokWebFetchUserLikeGetCall(secUid, cursor, count, coverFormat, _callback);
        return localVarCall;

    }

    /**
     * 获取用户的点赞列表/Get user likes
     * # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user&#39;s like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User likes  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\&quot; cursor &#x3D; 0 count &#x3D; 35 coverFormat &#x3D; 2
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 35)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserLikeApiV1TiktokWebFetchUserLikeGet(String secUid, Integer cursor, Integer count, Integer coverFormat) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserLikeApiV1TiktokWebFetchUserLikeGetWithHttpInfo(secUid, cursor, count, coverFormat);
        return localVarResp.getData();
    }

    /**
     * 获取用户的点赞列表/Get user likes
     * # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user&#39;s like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User likes  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\&quot; cursor &#x3D; 0 count &#x3D; 35 coverFormat &#x3D; 2
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 35)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserLikeApiV1TiktokWebFetchUserLikeGetWithHttpInfo(String secUid, Integer cursor, Integer count, Integer coverFormat) throws ApiException {
        okhttp3.Call localVarCall = fetchUserLikeApiV1TiktokWebFetchUserLikeGetValidateBeforeCall(secUid, cursor, count, coverFormat, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户的点赞列表/Get user likes (asynchronously)
     * # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user&#39;s like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User likes  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\&quot; cursor &#x3D; 0 count &#x3D; 35 coverFormat &#x3D; 2
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 35)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserLikeApiV1TiktokWebFetchUserLikeGetAsync(String secUid, Integer cursor, Integer count, Integer coverFormat, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserLikeApiV1TiktokWebFetchUserLikeGetValidateBeforeCall(secUid, cursor, count, coverFormat, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserLikeApiV1TiktokWebFetchUserLikeGet_0
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 35)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserLikeApiV1TiktokWebFetchUserLikeGet_0Call(String secUid, Integer cursor, Integer count, Integer coverFormat, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_user_like";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secUid", secUid));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (coverFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coverFormat", coverFormat));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserLikeApiV1TiktokWebFetchUserLikeGet_0ValidateBeforeCall(String secUid, Integer cursor, Integer count, Integer coverFormat, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUid' is set
        if (secUid == null) {
            throw new ApiException("Missing the required parameter 'secUid' when calling fetchUserLikeApiV1TiktokWebFetchUserLikeGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserLikeApiV1TiktokWebFetchUserLikeGet_0Call(secUid, cursor, count, coverFormat, _callback);
        return localVarCall;

    }

    /**
     * 获取用户的点赞列表/Get user likes
     * # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user&#39;s like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User likes  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\&quot; cursor &#x3D; 0 count &#x3D; 35 coverFormat &#x3D; 2
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 35)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserLikeApiV1TiktokWebFetchUserLikeGet_0(String secUid, Integer cursor, Integer count, Integer coverFormat) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserLikeApiV1TiktokWebFetchUserLikeGet_0WithHttpInfo(secUid, cursor, count, coverFormat);
        return localVarResp.getData();
    }

    /**
     * 获取用户的点赞列表/Get user likes
     * # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user&#39;s like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User likes  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\&quot; cursor &#x3D; 0 count &#x3D; 35 coverFormat &#x3D; 2
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 35)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserLikeApiV1TiktokWebFetchUserLikeGet_0WithHttpInfo(String secUid, Integer cursor, Integer count, Integer coverFormat) throws ApiException {
        okhttp3.Call localVarCall = fetchUserLikeApiV1TiktokWebFetchUserLikeGet_0ValidateBeforeCall(secUid, cursor, count, coverFormat, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户的点赞列表/Get user likes (asynchronously)
     * # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user&#39;s like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User likes  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\&quot; cursor &#x3D; 0 count &#x3D; 35 coverFormat &#x3D; 2
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 35)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserLikeApiV1TiktokWebFetchUserLikeGet_0Async(String secUid, Integer cursor, Integer count, Integer coverFormat, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserLikeApiV1TiktokWebFetchUserLikeGet_0ValidateBeforeCall(secUid, cursor, count, coverFormat, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserMixApiV1TiktokWebFetchUserMixGet
     * @param mixId 合辑id/Mix id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserMixApiV1TiktokWebFetchUserMixGetCall(String mixId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_user_mix";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (mixId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mixId", mixId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserMixApiV1TiktokWebFetchUserMixGetValidateBeforeCall(String mixId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mixId' is set
        if (mixId == null) {
            throw new ApiException("Missing the required parameter 'mixId' when calling fetchUserMixApiV1TiktokWebFetchUserMixGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserMixApiV1TiktokWebFetchUserMixGetCall(mixId, cursor, count, _callback);
        return localVarCall;

    }

    /**
     * 获取用户的合辑列表/Get user mix list
     * # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId &#x3D; \&quot;7101538765474106158\&quot; cursor &#x3D; 0 count &#x3D; 30
     * @param mixId 合辑id/Mix id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserMixApiV1TiktokWebFetchUserMixGet(String mixId, Integer cursor, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserMixApiV1TiktokWebFetchUserMixGetWithHttpInfo(mixId, cursor, count);
        return localVarResp.getData();
    }

    /**
     * 获取用户的合辑列表/Get user mix list
     * # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId &#x3D; \&quot;7101538765474106158\&quot; cursor &#x3D; 0 count &#x3D; 30
     * @param mixId 合辑id/Mix id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserMixApiV1TiktokWebFetchUserMixGetWithHttpInfo(String mixId, Integer cursor, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchUserMixApiV1TiktokWebFetchUserMixGetValidateBeforeCall(mixId, cursor, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户的合辑列表/Get user mix list (asynchronously)
     * # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId &#x3D; \&quot;7101538765474106158\&quot; cursor &#x3D; 0 count &#x3D; 30
     * @param mixId 合辑id/Mix id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserMixApiV1TiktokWebFetchUserMixGetAsync(String mixId, Integer cursor, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserMixApiV1TiktokWebFetchUserMixGetValidateBeforeCall(mixId, cursor, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserMixApiV1TiktokWebFetchUserMixGet_0
     * @param mixId 合辑id/Mix id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserMixApiV1TiktokWebFetchUserMixGet_0Call(String mixId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_user_mix";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (mixId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mixId", mixId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserMixApiV1TiktokWebFetchUserMixGet_0ValidateBeforeCall(String mixId, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mixId' is set
        if (mixId == null) {
            throw new ApiException("Missing the required parameter 'mixId' when calling fetchUserMixApiV1TiktokWebFetchUserMixGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserMixApiV1TiktokWebFetchUserMixGet_0Call(mixId, cursor, count, _callback);
        return localVarCall;

    }

    /**
     * 获取用户的合辑列表/Get user mix list
     * # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId &#x3D; \&quot;7101538765474106158\&quot; cursor &#x3D; 0 count &#x3D; 30
     * @param mixId 合辑id/Mix id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserMixApiV1TiktokWebFetchUserMixGet_0(String mixId, Integer cursor, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserMixApiV1TiktokWebFetchUserMixGet_0WithHttpInfo(mixId, cursor, count);
        return localVarResp.getData();
    }

    /**
     * 获取用户的合辑列表/Get user mix list
     * # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId &#x3D; \&quot;7101538765474106158\&quot; cursor &#x3D; 0 count &#x3D; 30
     * @param mixId 合辑id/Mix id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserMixApiV1TiktokWebFetchUserMixGet_0WithHttpInfo(String mixId, Integer cursor, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchUserMixApiV1TiktokWebFetchUserMixGet_0ValidateBeforeCall(mixId, cursor, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户的合辑列表/Get user mix list (asynchronously)
     * # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId &#x3D; \&quot;7101538765474106158\&quot; cursor &#x3D; 0 count &#x3D; 30
     * @param mixId 合辑id/Mix id (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserMixApiV1TiktokWebFetchUserMixGet_0Async(String mixId, Integer cursor, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserMixApiV1TiktokWebFetchUserMixGet_0ValidateBeforeCall(mixId, cursor, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPlayListApiV1TiktokWebFetchUserPlayListGetCall(String secUid, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_user_play_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secUid", secUid));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserPlayListApiV1TiktokWebFetchUserPlayListGetValidateBeforeCall(String secUid, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUid' is set
        if (secUid == null) {
            throw new ApiException("Missing the required parameter 'secUid' when calling fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserPlayListApiV1TiktokWebFetchUserPlayListGetCall(secUid, cursor, count, _callback);
        return localVarCall;

    }

    /**
     * 获取用户的播放列表/Get user play list
     * # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; cursor &#x3D; 0 count &#x3D; 30
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet(String secUid, Integer cursor, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserPlayListApiV1TiktokWebFetchUserPlayListGetWithHttpInfo(secUid, cursor, count);
        return localVarResp.getData();
    }

    /**
     * 获取用户的播放列表/Get user play list
     * # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; cursor &#x3D; 0 count &#x3D; 30
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserPlayListApiV1TiktokWebFetchUserPlayListGetWithHttpInfo(String secUid, Integer cursor, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchUserPlayListApiV1TiktokWebFetchUserPlayListGetValidateBeforeCall(secUid, cursor, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户的播放列表/Get user play list (asynchronously)
     * # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; cursor &#x3D; 0 count &#x3D; 30
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPlayListApiV1TiktokWebFetchUserPlayListGetAsync(String secUid, Integer cursor, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserPlayListApiV1TiktokWebFetchUserPlayListGetValidateBeforeCall(secUid, cursor, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_0
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_0Call(String secUid, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_user_play_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secUid", secUid));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_0ValidateBeforeCall(String secUid, Integer cursor, Integer count, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUid' is set
        if (secUid == null) {
            throw new ApiException("Missing the required parameter 'secUid' when calling fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_0Call(secUid, cursor, count, _callback);
        return localVarCall;

    }

    /**
     * 获取用户的播放列表/Get user play list
     * # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; cursor &#x3D; 0 count &#x3D; 30
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_0(String secUid, Integer cursor, Integer count) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_0WithHttpInfo(secUid, cursor, count);
        return localVarResp.getData();
    }

    /**
     * 获取用户的播放列表/Get user play list
     * # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; cursor &#x3D; 0 count &#x3D; 30
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_0WithHttpInfo(String secUid, Integer cursor, Integer count) throws ApiException {
        okhttp3.Call localVarCall = fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_0ValidateBeforeCall(secUid, cursor, count, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户的播放列表/Get user play list (asynchronously)
     * # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; cursor &#x3D; 0 count &#x3D; 30
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_0Async(String secUid, Integer cursor, Integer count, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_0ValidateBeforeCall(secUid, cursor, count, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserPostApiV1TiktokWebFetchUserPostGet
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 35)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPostApiV1TiktokWebFetchUserPostGetCall(String secUid, Integer cursor, Integer count, Integer coverFormat, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_user_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secUid", secUid));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (coverFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coverFormat", coverFormat));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserPostApiV1TiktokWebFetchUserPostGetValidateBeforeCall(String secUid, Integer cursor, Integer count, Integer coverFormat, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUid' is set
        if (secUid == null) {
            throw new ApiException("Missing the required parameter 'secUid' when calling fetchUserPostApiV1TiktokWebFetchUserPostGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserPostApiV1TiktokWebFetchUserPostGetCall(secUid, cursor, count, coverFormat, _callback);
        return localVarCall;

    }

    /**
     * 获取用户的作品列表/Get user posts
     * # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User posts  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; cursor &#x3D; 0 count &#x3D; 35 coverFormat &#x3D; 2
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 35)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserPostApiV1TiktokWebFetchUserPostGet(String secUid, Integer cursor, Integer count, Integer coverFormat) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserPostApiV1TiktokWebFetchUserPostGetWithHttpInfo(secUid, cursor, count, coverFormat);
        return localVarResp.getData();
    }

    /**
     * 获取用户的作品列表/Get user posts
     * # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User posts  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; cursor &#x3D; 0 count &#x3D; 35 coverFormat &#x3D; 2
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 35)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserPostApiV1TiktokWebFetchUserPostGetWithHttpInfo(String secUid, Integer cursor, Integer count, Integer coverFormat) throws ApiException {
        okhttp3.Call localVarCall = fetchUserPostApiV1TiktokWebFetchUserPostGetValidateBeforeCall(secUid, cursor, count, coverFormat, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户的作品列表/Get user posts (asynchronously)
     * # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User posts  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; cursor &#x3D; 0 count &#x3D; 35 coverFormat &#x3D; 2
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 35)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPostApiV1TiktokWebFetchUserPostGetAsync(String secUid, Integer cursor, Integer count, Integer coverFormat, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserPostApiV1TiktokWebFetchUserPostGetValidateBeforeCall(secUid, cursor, count, coverFormat, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserPostApiV1TiktokWebFetchUserPostGet_0
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 35)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPostApiV1TiktokWebFetchUserPostGet_0Call(String secUid, Integer cursor, Integer count, Integer coverFormat, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_user_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (secUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secUid", secUid));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (coverFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coverFormat", coverFormat));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserPostApiV1TiktokWebFetchUserPostGet_0ValidateBeforeCall(String secUid, Integer cursor, Integer count, Integer coverFormat, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'secUid' is set
        if (secUid == null) {
            throw new ApiException("Missing the required parameter 'secUid' when calling fetchUserPostApiV1TiktokWebFetchUserPostGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserPostApiV1TiktokWebFetchUserPostGet_0Call(secUid, cursor, count, coverFormat, _callback);
        return localVarCall;

    }

    /**
     * 获取用户的作品列表/Get user posts
     * # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User posts  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; cursor &#x3D; 0 count &#x3D; 35 coverFormat &#x3D; 2
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 35)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserPostApiV1TiktokWebFetchUserPostGet_0(String secUid, Integer cursor, Integer count, Integer coverFormat) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserPostApiV1TiktokWebFetchUserPostGet_0WithHttpInfo(secUid, cursor, count, coverFormat);
        return localVarResp.getData();
    }

    /**
     * 获取用户的作品列表/Get user posts
     * # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User posts  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; cursor &#x3D; 0 count &#x3D; 35 coverFormat &#x3D; 2
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 35)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserPostApiV1TiktokWebFetchUserPostGet_0WithHttpInfo(String secUid, Integer cursor, Integer count, Integer coverFormat) throws ApiException {
        okhttp3.Call localVarCall = fetchUserPostApiV1TiktokWebFetchUserPostGet_0ValidateBeforeCall(secUid, cursor, count, coverFormat, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户的作品列表/Get user posts (asynchronously)
     * # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User posts  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; cursor &#x3D; 0 count &#x3D; 35 coverFormat &#x3D; 2
     * @param secUid 用户secUid/User secUid (required)
     * @param cursor 翻页游标/Page cursor (optional, default to 0)
     * @param count 每页数量/Number per page (optional, default to 35)
     * @param coverFormat 封面格式/Cover format (optional, default to 2)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPostApiV1TiktokWebFetchUserPostGet_0Async(String secUid, Integer cursor, Integer count, Integer coverFormat, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserPostApiV1TiktokWebFetchUserPostGet_0ValidateBeforeCall(secUid, cursor, count, coverFormat, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserProfileApiV1TiktokWebFetchUserProfileGet
     * @param uniqueId 用户uniqueId/User uniqueId (optional, default to &quot;tiktok&quot;)
     * @param secUid 用户secUid/User secUid (optional, default to &quot;&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserProfileApiV1TiktokWebFetchUserProfileGetCall(String uniqueId, String secUid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_user_profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (uniqueId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uniqueId", uniqueId));
        }

        if (secUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secUid", secUid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserProfileApiV1TiktokWebFetchUserProfileGetValidateBeforeCall(String uniqueId, String secUid, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = fetchUserProfileApiV1TiktokWebFetchUserProfileGetCall(uniqueId, secUid, _callback);
        return localVarCall;

    }

    /**
     * 获取用户的个人信息/Get user profile
     * # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user&#39;s homepage link. ### Return: - User profile  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; uniqueId &#x3D; \&quot;tiktok\&quot;
     * @param uniqueId 用户uniqueId/User uniqueId (optional, default to &quot;tiktok&quot;)
     * @param secUid 用户secUid/User secUid (optional, default to &quot;&quot;)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserProfileApiV1TiktokWebFetchUserProfileGet(String uniqueId, String secUid) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserProfileApiV1TiktokWebFetchUserProfileGetWithHttpInfo(uniqueId, secUid);
        return localVarResp.getData();
    }

    /**
     * 获取用户的个人信息/Get user profile
     * # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user&#39;s homepage link. ### Return: - User profile  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; uniqueId &#x3D; \&quot;tiktok\&quot;
     * @param uniqueId 用户uniqueId/User uniqueId (optional, default to &quot;tiktok&quot;)
     * @param secUid 用户secUid/User secUid (optional, default to &quot;&quot;)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserProfileApiV1TiktokWebFetchUserProfileGetWithHttpInfo(String uniqueId, String secUid) throws ApiException {
        okhttp3.Call localVarCall = fetchUserProfileApiV1TiktokWebFetchUserProfileGetValidateBeforeCall(uniqueId, secUid, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户的个人信息/Get user profile (asynchronously)
     * # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user&#39;s homepage link. ### Return: - User profile  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; uniqueId &#x3D; \&quot;tiktok\&quot;
     * @param uniqueId 用户uniqueId/User uniqueId (optional, default to &quot;tiktok&quot;)
     * @param secUid 用户secUid/User secUid (optional, default to &quot;&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserProfileApiV1TiktokWebFetchUserProfileGetAsync(String uniqueId, String secUid, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserProfileApiV1TiktokWebFetchUserProfileGetValidateBeforeCall(uniqueId, secUid, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserProfileApiV1TiktokWebFetchUserProfileGet_0
     * @param uniqueId 用户uniqueId/User uniqueId (optional, default to &quot;tiktok&quot;)
     * @param secUid 用户secUid/User secUid (optional, default to &quot;&quot;)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserProfileApiV1TiktokWebFetchUserProfileGet_0Call(String uniqueId, String secUid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/fetch_user_profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (uniqueId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uniqueId", uniqueId));
        }

        if (secUid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secUid", secUid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserProfileApiV1TiktokWebFetchUserProfileGet_0ValidateBeforeCall(String uniqueId, String secUid, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = fetchUserProfileApiV1TiktokWebFetchUserProfileGet_0Call(uniqueId, secUid, _callback);
        return localVarCall;

    }

    /**
     * 获取用户的个人信息/Get user profile
     * # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user&#39;s homepage link. ### Return: - User profile  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; uniqueId &#x3D; \&quot;tiktok\&quot;
     * @param uniqueId 用户uniqueId/User uniqueId (optional, default to &quot;tiktok&quot;)
     * @param secUid 用户secUid/User secUid (optional, default to &quot;&quot;)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserProfileApiV1TiktokWebFetchUserProfileGet_0(String uniqueId, String secUid) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserProfileApiV1TiktokWebFetchUserProfileGet_0WithHttpInfo(uniqueId, secUid);
        return localVarResp.getData();
    }

    /**
     * 获取用户的个人信息/Get user profile
     * # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user&#39;s homepage link. ### Return: - User profile  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; uniqueId &#x3D; \&quot;tiktok\&quot;
     * @param uniqueId 用户uniqueId/User uniqueId (optional, default to &quot;tiktok&quot;)
     * @param secUid 用户secUid/User secUid (optional, default to &quot;&quot;)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserProfileApiV1TiktokWebFetchUserProfileGet_0WithHttpInfo(String uniqueId, String secUid) throws ApiException {
        okhttp3.Call localVarCall = fetchUserProfileApiV1TiktokWebFetchUserProfileGet_0ValidateBeforeCall(uniqueId, secUid, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户的个人信息/Get user profile (asynchronously)
     * # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user&#39;s homepage link. ### Return: - User profile  # [示例/Example] secUid &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot; uniqueId &#x3D; \&quot;tiktok\&quot;
     * @param uniqueId 用户uniqueId/User uniqueId (optional, default to &quot;tiktok&quot;)
     * @param secUid 用户secUid/User secUid (optional, default to &quot;&quot;)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserProfileApiV1TiktokWebFetchUserProfileGet_0Async(String uniqueId, String secUid, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserProfileApiV1TiktokWebFetchUserProfileGet_0ValidateBeforeCall(uniqueId, secUid, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/generate_real_msToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGetCall(_callback);
        return localVarCall;

    }

    /**
     * 生成真实msToken/Generate real msToken
     * # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet() throws ApiException {
        ApiResponse<ResponseModel> localVarResp = generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 生成真实msToken/Generate real msToken
     * # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 生成真实msToken/Generate real msToken (asynchronously)
     * # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGetAsync(final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet_0
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet_0Call(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/generate_real_msToken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet_0Call(_callback);
        return localVarCall;

    }

    /**
     * 生成真实msToken/Generate real msToken
     * # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet_0() throws ApiException {
        ApiResponse<ResponseModel> localVarResp = generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet_0WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 生成真实msToken/Generate real msToken
     * # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet_0ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 生成真实msToken/Generate real msToken (asynchronously)
     * # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet_0Async(final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet_0ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateTtwidApiV1TiktokWebGenerateTtwidGet
     * @param cookie 用户cookie/User cookie (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateTtwidApiV1TiktokWebGenerateTtwidGetCall(String cookie, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/generate_ttwid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cookie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cookie", cookie));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateTtwidApiV1TiktokWebGenerateTtwidGetValidateBeforeCall(String cookie, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cookie' is set
        if (cookie == null) {
            throw new ApiException("Missing the required parameter 'cookie' when calling generateTtwidApiV1TiktokWebGenerateTtwidGet(Async)");
        }
        

        okhttp3.Call localVarCall = generateTtwidApiV1TiktokWebGenerateTtwidGetCall(cookie, _callback);
        return localVarCall;

    }

    /**
     * 生成ttwid/Generate ttwid
     * # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie &#x3D; \&quot;Your_Cookie\&quot;
     * @param cookie 用户cookie/User cookie (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel generateTtwidApiV1TiktokWebGenerateTtwidGet(String cookie) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = generateTtwidApiV1TiktokWebGenerateTtwidGetWithHttpInfo(cookie);
        return localVarResp.getData();
    }

    /**
     * 生成ttwid/Generate ttwid
     * # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie &#x3D; \&quot;Your_Cookie\&quot;
     * @param cookie 用户cookie/User cookie (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> generateTtwidApiV1TiktokWebGenerateTtwidGetWithHttpInfo(String cookie) throws ApiException {
        okhttp3.Call localVarCall = generateTtwidApiV1TiktokWebGenerateTtwidGetValidateBeforeCall(cookie, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 生成ttwid/Generate ttwid (asynchronously)
     * # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie &#x3D; \&quot;Your_Cookie\&quot;
     * @param cookie 用户cookie/User cookie (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateTtwidApiV1TiktokWebGenerateTtwidGetAsync(String cookie, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateTtwidApiV1TiktokWebGenerateTtwidGetValidateBeforeCall(cookie, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateTtwidApiV1TiktokWebGenerateTtwidGet_0
     * @param cookie 用户cookie/User cookie (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateTtwidApiV1TiktokWebGenerateTtwidGet_0Call(String cookie, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/generate_ttwid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (cookie != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cookie", cookie));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateTtwidApiV1TiktokWebGenerateTtwidGet_0ValidateBeforeCall(String cookie, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'cookie' is set
        if (cookie == null) {
            throw new ApiException("Missing the required parameter 'cookie' when calling generateTtwidApiV1TiktokWebGenerateTtwidGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = generateTtwidApiV1TiktokWebGenerateTtwidGet_0Call(cookie, _callback);
        return localVarCall;

    }

    /**
     * 生成ttwid/Generate ttwid
     * # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie &#x3D; \&quot;Your_Cookie\&quot;
     * @param cookie 用户cookie/User cookie (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel generateTtwidApiV1TiktokWebGenerateTtwidGet_0(String cookie) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = generateTtwidApiV1TiktokWebGenerateTtwidGet_0WithHttpInfo(cookie);
        return localVarResp.getData();
    }

    /**
     * 生成ttwid/Generate ttwid
     * # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie &#x3D; \&quot;Your_Cookie\&quot;
     * @param cookie 用户cookie/User cookie (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> generateTtwidApiV1TiktokWebGenerateTtwidGet_0WithHttpInfo(String cookie) throws ApiException {
        okhttp3.Call localVarCall = generateTtwidApiV1TiktokWebGenerateTtwidGet_0ValidateBeforeCall(cookie, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 生成ttwid/Generate ttwid (asynchronously)
     * # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie &#x3D; \&quot;Your_Cookie\&quot;
     * @param cookie 用户cookie/User cookie (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateTtwidApiV1TiktokWebGenerateTtwidGet_0Async(String cookie, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateTtwidApiV1TiktokWebGenerateTtwidGet_0ValidateBeforeCall(cookie, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateXbogusApiV1TiktokWebGenerateXbogusPost
     * @param xbogusModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateXbogusApiV1TiktokWebGenerateXbogusPostCall(XBogusModel xbogusModel, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = xbogusModel;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/generate_xbogus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateXbogusApiV1TiktokWebGenerateXbogusPostValidateBeforeCall(XBogusModel xbogusModel, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = generateXbogusApiV1TiktokWebGenerateXbogusPostCall(xbogusModel, _callback);
        return localVarCall;

    }

    /**
     * 生成xbogus/Generate xbogus
     * # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  &#x60;&#x60;&#x60;json {     \&quot;url\&quot;: \&quot;https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id&#x3D;7148736076176215311&amp;device_platform&#x3D;webapp&amp;aid&#x3D;6383&amp;channel&#x3D;channel_pc_web&amp;pc_client_type&#x3D;1&amp;version_code&#x3D;170400&amp;version_name&#x3D;17.4.0&amp;cookie_enabled&#x3D;true&amp;screen_width&#x3D;1920&amp;screen_height&#x3D;1080&amp;browser_language&#x3D;zh-CN&amp;browser_platform&#x3D;Win32&amp;browser_name&#x3D;Edge&amp;browser_version&#x3D;117.0.2045.47&amp;browser_online&#x3D;true&amp;engine_name&#x3D;Blink&amp;engine_version&#x3D;117.0.0.0&amp;os_name&#x3D;Windows&amp;os_version&#x3D;10&amp;cpu_core_num&#x3D;128&amp;device_memory&#x3D;10240&amp;platform&#x3D;PC&amp;downlink&#x3D;10&amp;effective_type&#x3D;4g&amp;round_trip_time&#x3D;100\&quot;,     \&quot;user_agent\&quot;: \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\&quot; }
     * @param xbogusModel  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel generateXbogusApiV1TiktokWebGenerateXbogusPost(XBogusModel xbogusModel) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = generateXbogusApiV1TiktokWebGenerateXbogusPostWithHttpInfo(xbogusModel);
        return localVarResp.getData();
    }

    /**
     * 生成xbogus/Generate xbogus
     * # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  &#x60;&#x60;&#x60;json {     \&quot;url\&quot;: \&quot;https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id&#x3D;7148736076176215311&amp;device_platform&#x3D;webapp&amp;aid&#x3D;6383&amp;channel&#x3D;channel_pc_web&amp;pc_client_type&#x3D;1&amp;version_code&#x3D;170400&amp;version_name&#x3D;17.4.0&amp;cookie_enabled&#x3D;true&amp;screen_width&#x3D;1920&amp;screen_height&#x3D;1080&amp;browser_language&#x3D;zh-CN&amp;browser_platform&#x3D;Win32&amp;browser_name&#x3D;Edge&amp;browser_version&#x3D;117.0.2045.47&amp;browser_online&#x3D;true&amp;engine_name&#x3D;Blink&amp;engine_version&#x3D;117.0.0.0&amp;os_name&#x3D;Windows&amp;os_version&#x3D;10&amp;cpu_core_num&#x3D;128&amp;device_memory&#x3D;10240&amp;platform&#x3D;PC&amp;downlink&#x3D;10&amp;effective_type&#x3D;4g&amp;round_trip_time&#x3D;100\&quot;,     \&quot;user_agent\&quot;: \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\&quot; }
     * @param xbogusModel  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> generateXbogusApiV1TiktokWebGenerateXbogusPostWithHttpInfo(XBogusModel xbogusModel) throws ApiException {
        okhttp3.Call localVarCall = generateXbogusApiV1TiktokWebGenerateXbogusPostValidateBeforeCall(xbogusModel, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 生成xbogus/Generate xbogus (asynchronously)
     * # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  &#x60;&#x60;&#x60;json {     \&quot;url\&quot;: \&quot;https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id&#x3D;7148736076176215311&amp;device_platform&#x3D;webapp&amp;aid&#x3D;6383&amp;channel&#x3D;channel_pc_web&amp;pc_client_type&#x3D;1&amp;version_code&#x3D;170400&amp;version_name&#x3D;17.4.0&amp;cookie_enabled&#x3D;true&amp;screen_width&#x3D;1920&amp;screen_height&#x3D;1080&amp;browser_language&#x3D;zh-CN&amp;browser_platform&#x3D;Win32&amp;browser_name&#x3D;Edge&amp;browser_version&#x3D;117.0.2045.47&amp;browser_online&#x3D;true&amp;engine_name&#x3D;Blink&amp;engine_version&#x3D;117.0.0.0&amp;os_name&#x3D;Windows&amp;os_version&#x3D;10&amp;cpu_core_num&#x3D;128&amp;device_memory&#x3D;10240&amp;platform&#x3D;PC&amp;downlink&#x3D;10&amp;effective_type&#x3D;4g&amp;round_trip_time&#x3D;100\&quot;,     \&quot;user_agent\&quot;: \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\&quot; }
     * @param xbogusModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateXbogusApiV1TiktokWebGenerateXbogusPostAsync(XBogusModel xbogusModel, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateXbogusApiV1TiktokWebGenerateXbogusPostValidateBeforeCall(xbogusModel, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateXbogusApiV1TiktokWebGenerateXbogusPost_0
     * @param xbogusModel  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateXbogusApiV1TiktokWebGenerateXbogusPost_0Call(XBogusModel xbogusModel, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = xbogusModel;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/generate_xbogus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateXbogusApiV1TiktokWebGenerateXbogusPost_0ValidateBeforeCall(XBogusModel xbogusModel, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = generateXbogusApiV1TiktokWebGenerateXbogusPost_0Call(xbogusModel, _callback);
        return localVarCall;

    }

    /**
     * 生成xbogus/Generate xbogus
     * # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  &#x60;&#x60;&#x60;json {     \&quot;url\&quot;: \&quot;https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id&#x3D;7148736076176215311&amp;device_platform&#x3D;webapp&amp;aid&#x3D;6383&amp;channel&#x3D;channel_pc_web&amp;pc_client_type&#x3D;1&amp;version_code&#x3D;170400&amp;version_name&#x3D;17.4.0&amp;cookie_enabled&#x3D;true&amp;screen_width&#x3D;1920&amp;screen_height&#x3D;1080&amp;browser_language&#x3D;zh-CN&amp;browser_platform&#x3D;Win32&amp;browser_name&#x3D;Edge&amp;browser_version&#x3D;117.0.2045.47&amp;browser_online&#x3D;true&amp;engine_name&#x3D;Blink&amp;engine_version&#x3D;117.0.0.0&amp;os_name&#x3D;Windows&amp;os_version&#x3D;10&amp;cpu_core_num&#x3D;128&amp;device_memory&#x3D;10240&amp;platform&#x3D;PC&amp;downlink&#x3D;10&amp;effective_type&#x3D;4g&amp;round_trip_time&#x3D;100\&quot;,     \&quot;user_agent\&quot;: \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\&quot; }
     * @param xbogusModel  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel generateXbogusApiV1TiktokWebGenerateXbogusPost_0(XBogusModel xbogusModel) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = generateXbogusApiV1TiktokWebGenerateXbogusPost_0WithHttpInfo(xbogusModel);
        return localVarResp.getData();
    }

    /**
     * 生成xbogus/Generate xbogus
     * # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  &#x60;&#x60;&#x60;json {     \&quot;url\&quot;: \&quot;https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id&#x3D;7148736076176215311&amp;device_platform&#x3D;webapp&amp;aid&#x3D;6383&amp;channel&#x3D;channel_pc_web&amp;pc_client_type&#x3D;1&amp;version_code&#x3D;170400&amp;version_name&#x3D;17.4.0&amp;cookie_enabled&#x3D;true&amp;screen_width&#x3D;1920&amp;screen_height&#x3D;1080&amp;browser_language&#x3D;zh-CN&amp;browser_platform&#x3D;Win32&amp;browser_name&#x3D;Edge&amp;browser_version&#x3D;117.0.2045.47&amp;browser_online&#x3D;true&amp;engine_name&#x3D;Blink&amp;engine_version&#x3D;117.0.0.0&amp;os_name&#x3D;Windows&amp;os_version&#x3D;10&amp;cpu_core_num&#x3D;128&amp;device_memory&#x3D;10240&amp;platform&#x3D;PC&amp;downlink&#x3D;10&amp;effective_type&#x3D;4g&amp;round_trip_time&#x3D;100\&quot;,     \&quot;user_agent\&quot;: \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\&quot; }
     * @param xbogusModel  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> generateXbogusApiV1TiktokWebGenerateXbogusPost_0WithHttpInfo(XBogusModel xbogusModel) throws ApiException {
        okhttp3.Call localVarCall = generateXbogusApiV1TiktokWebGenerateXbogusPost_0ValidateBeforeCall(xbogusModel, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 生成xbogus/Generate xbogus (asynchronously)
     * # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  &#x60;&#x60;&#x60;json {     \&quot;url\&quot;: \&quot;https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id&#x3D;7148736076176215311&amp;device_platform&#x3D;webapp&amp;aid&#x3D;6383&amp;channel&#x3D;channel_pc_web&amp;pc_client_type&#x3D;1&amp;version_code&#x3D;170400&amp;version_name&#x3D;17.4.0&amp;cookie_enabled&#x3D;true&amp;screen_width&#x3D;1920&amp;screen_height&#x3D;1080&amp;browser_language&#x3D;zh-CN&amp;browser_platform&#x3D;Win32&amp;browser_name&#x3D;Edge&amp;browser_version&#x3D;117.0.2045.47&amp;browser_online&#x3D;true&amp;engine_name&#x3D;Blink&amp;engine_version&#x3D;117.0.0.0&amp;os_name&#x3D;Windows&amp;os_version&#x3D;10&amp;cpu_core_num&#x3D;128&amp;device_memory&#x3D;10240&amp;platform&#x3D;PC&amp;downlink&#x3D;10&amp;effective_type&#x3D;4g&amp;round_trip_time&#x3D;100\&quot;,     \&quot;user_agent\&quot;: \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\&quot; }
     * @param xbogusModel  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateXbogusApiV1TiktokWebGenerateXbogusPost_0Async(XBogusModel xbogusModel, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateXbogusApiV1TiktokWebGenerateXbogusPost_0ValidateBeforeCall(xbogusModel, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPostCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/get_all_aweme_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPostValidateBeforeCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPostCall(requestBody, _callback);
        return localVarCall;

    }

    /**
     * 提取列表作品id/Extract list video id
     * # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\&quot;]
     * @param requestBody  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost(List<String> requestBody) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPostWithHttpInfo(requestBody);
        return localVarResp.getData();
    }

    /**
     * 提取列表作品id/Extract list video id
     * # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\&quot;]
     * @param requestBody  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPostWithHttpInfo(List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPostValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 提取列表作品id/Extract list video id (asynchronously)
     * # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\&quot;]
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPostAsync(List<String> requestBody, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPostValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost_0
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost_0Call(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/get_all_aweme_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost_0ValidateBeforeCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost_0Call(requestBody, _callback);
        return localVarCall;

    }

    /**
     * 提取列表作品id/Extract list video id
     * # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\&quot;]
     * @param requestBody  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost_0(List<String> requestBody) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost_0WithHttpInfo(requestBody);
        return localVarResp.getData();
    }

    /**
     * 提取列表作品id/Extract list video id
     * # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\&quot;]
     * @param requestBody  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost_0WithHttpInfo(List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost_0ValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 提取列表作品id/Extract list video id (asynchronously)
     * # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\&quot;]
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost_0Async(List<String> requestBody, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost_0ValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPostCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/get_all_sec_user_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPostValidateBeforeCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPostCall(requestBody, _callback);
        return localVarCall;

    }

    /**
     * 提取列表用户sec_user_id/Extract list user sec_user_id
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持20个链接） ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - User id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@tiktok\&quot;]
     * @param requestBody  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost(List<String> requestBody) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPostWithHttpInfo(requestBody);
        return localVarResp.getData();
    }

    /**
     * 提取列表用户sec_user_id/Extract list user sec_user_id
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持20个链接） ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - User id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@tiktok\&quot;]
     * @param requestBody  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPostWithHttpInfo(List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPostValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 提取列表用户sec_user_id/Extract list user sec_user_id (asynchronously)
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持20个链接） ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - User id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@tiktok\&quot;]
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPostAsync(List<String> requestBody, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPostValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost_0
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost_0Call(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/get_all_sec_user_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost_0ValidateBeforeCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost_0Call(requestBody, _callback);
        return localVarCall;

    }

    /**
     * 提取列表用户sec_user_id/Extract list user sec_user_id
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持20个链接） ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - User id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@tiktok\&quot;]
     * @param requestBody  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost_0(List<String> requestBody) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost_0WithHttpInfo(requestBody);
        return localVarResp.getData();
    }

    /**
     * 提取列表用户sec_user_id/Extract list user sec_user_id
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持20个链接） ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - User id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@tiktok\&quot;]
     * @param requestBody  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost_0WithHttpInfo(List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost_0ValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 提取列表用户sec_user_id/Extract list user sec_user_id (asynchronously)
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持20个链接） ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - User id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@tiktok\&quot;]
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost_0Async(List<String> requestBody, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost_0ValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPostCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/get_all_unique_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPostValidateBeforeCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPostCall(requestBody, _callback);
        return localVarCall;

    }

    /**
     * 获取列表unique_id/Get list unique_id
     * # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@tiktok\&quot;]
     * @param requestBody  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost(List<String> requestBody) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPostWithHttpInfo(requestBody);
        return localVarResp.getData();
    }

    /**
     * 获取列表unique_id/Get list unique_id
     * # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@tiktok\&quot;]
     * @param requestBody  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPostWithHttpInfo(List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPostValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取列表unique_id/Get list unique_id (asynchronously)
     * # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@tiktok\&quot;]
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPostAsync(List<String> requestBody, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPostValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost_0
     * @param requestBody  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost_0Call(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/get_all_unique_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost_0ValidateBeforeCall(List<String> requestBody, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost_0Call(requestBody, _callback);
        return localVarCall;

    }

    /**
     * 获取列表unique_id/Get list unique_id
     * # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@tiktok\&quot;]
     * @param requestBody  (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost_0(List<String> requestBody) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost_0WithHttpInfo(requestBody);
        return localVarResp.getData();
    }

    /**
     * 获取列表unique_id/Get list unique_id
     * # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@tiktok\&quot;]
     * @param requestBody  (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost_0WithHttpInfo(List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost_0ValidateBeforeCall(requestBody, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取列表unique_id/Get list unique_id (asynchronously)
     * # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url &#x3D; [\&quot;https://www.tiktok.com/@tiktok\&quot;]
     * @param requestBody  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost_0Async(List<String> requestBody, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost_0ValidateBeforeCall(requestBody, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAwemeIdApiV1TiktokWebGetAwemeIdGet
     * @param url 作品链接/Video link (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAwemeIdApiV1TiktokWebGetAwemeIdGetCall(String url, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/get_aweme_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAwemeIdApiV1TiktokWebGetAwemeIdGetValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling getAwemeIdApiV1TiktokWebGetAwemeIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = getAwemeIdApiV1TiktokWebGetAwemeIdGetCall(url, _callback);
        return localVarCall;

    }

    /**
     * 提取单个作品id/Extract single video id
     * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\&quot;
     * @param url 作品链接/Video link (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel getAwemeIdApiV1TiktokWebGetAwemeIdGet(String url) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = getAwemeIdApiV1TiktokWebGetAwemeIdGetWithHttpInfo(url);
        return localVarResp.getData();
    }

    /**
     * 提取单个作品id/Extract single video id
     * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\&quot;
     * @param url 作品链接/Video link (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> getAwemeIdApiV1TiktokWebGetAwemeIdGetWithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = getAwemeIdApiV1TiktokWebGetAwemeIdGetValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 提取单个作品id/Extract single video id (asynchronously)
     * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\&quot;
     * @param url 作品链接/Video link (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAwemeIdApiV1TiktokWebGetAwemeIdGetAsync(String url, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAwemeIdApiV1TiktokWebGetAwemeIdGetValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAwemeIdApiV1TiktokWebGetAwemeIdGet_0
     * @param url 作品链接/Video link (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAwemeIdApiV1TiktokWebGetAwemeIdGet_0Call(String url, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/get_aweme_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAwemeIdApiV1TiktokWebGetAwemeIdGet_0ValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling getAwemeIdApiV1TiktokWebGetAwemeIdGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = getAwemeIdApiV1TiktokWebGetAwemeIdGet_0Call(url, _callback);
        return localVarCall;

    }

    /**
     * 提取单个作品id/Extract single video id
     * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\&quot;
     * @param url 作品链接/Video link (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel getAwemeIdApiV1TiktokWebGetAwemeIdGet_0(String url) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = getAwemeIdApiV1TiktokWebGetAwemeIdGet_0WithHttpInfo(url);
        return localVarResp.getData();
    }

    /**
     * 提取单个作品id/Extract single video id
     * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\&quot;
     * @param url 作品链接/Video link (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> getAwemeIdApiV1TiktokWebGetAwemeIdGet_0WithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = getAwemeIdApiV1TiktokWebGetAwemeIdGet_0ValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 提取单个作品id/Extract single video id (asynchronously)
     * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\&quot;
     * @param url 作品链接/Video link (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAwemeIdApiV1TiktokWebGetAwemeIdGet_0Async(String url, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAwemeIdApiV1TiktokWebGetAwemeIdGet_0ValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGetCall(String liveRoomUrl, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/get_live_room_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (liveRoomUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("live_room_url", liveRoomUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGetValidateBeforeCall(String liveRoomUrl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'liveRoomUrl' is set
        if (liveRoomUrl == null) {
            throw new ApiException("Missing the required parameter 'liveRoomUrl' when calling getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGetCall(liveRoomUrl, _callback);
        return localVarCall;

    }

    /**
     * 根据直播间链接提取直播间ID/Extract live room ID from live room link
     * # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - If the current live room does not exist or has ended, it will return empty. ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url &#x3D; \&quot;https://www.tiktok.com/@.caseoh_daily/live\&quot;
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet(String liveRoomUrl) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGetWithHttpInfo(liveRoomUrl);
        return localVarResp.getData();
    }

    /**
     * 根据直播间链接提取直播间ID/Extract live room ID from live room link
     * # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - If the current live room does not exist or has ended, it will return empty. ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url &#x3D; \&quot;https://www.tiktok.com/@.caseoh_daily/live\&quot;
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGetWithHttpInfo(String liveRoomUrl) throws ApiException {
        okhttp3.Call localVarCall = getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGetValidateBeforeCall(liveRoomUrl, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据直播间链接提取直播间ID/Extract live room ID from live room link (asynchronously)
     * # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - If the current live room does not exist or has ended, it will return empty. ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url &#x3D; \&quot;https://www.tiktok.com/@.caseoh_daily/live\&quot;
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGetAsync(String liveRoomUrl, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGetValidateBeforeCall(liveRoomUrl, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_0
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_0Call(String liveRoomUrl, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/get_live_room_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (liveRoomUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("live_room_url", liveRoomUrl));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_0ValidateBeforeCall(String liveRoomUrl, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'liveRoomUrl' is set
        if (liveRoomUrl == null) {
            throw new ApiException("Missing the required parameter 'liveRoomUrl' when calling getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_0Call(liveRoomUrl, _callback);
        return localVarCall;

    }

    /**
     * 根据直播间链接提取直播间ID/Extract live room ID from live room link
     * # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - If the current live room does not exist or has ended, it will return empty. ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url &#x3D; \&quot;https://www.tiktok.com/@.caseoh_daily/live\&quot;
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_0(String liveRoomUrl) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_0WithHttpInfo(liveRoomUrl);
        return localVarResp.getData();
    }

    /**
     * 根据直播间链接提取直播间ID/Extract live room ID from live room link
     * # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - If the current live room does not exist or has ended, it will return empty. ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url &#x3D; \&quot;https://www.tiktok.com/@.caseoh_daily/live\&quot;
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_0WithHttpInfo(String liveRoomUrl) throws ApiException {
        okhttp3.Call localVarCall = getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_0ValidateBeforeCall(liveRoomUrl, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据直播间链接提取直播间ID/Extract live room ID from live room link (asynchronously)
     * # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - If the current live room does not exist or has ended, it will return empty. ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url &#x3D; \&quot;https://www.tiktok.com/@.caseoh_daily/live\&quot;
     * @param liveRoomUrl 直播间链接/Live room link (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_0Async(String liveRoomUrl, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_0ValidateBeforeCall(liveRoomUrl, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSecUserIdApiV1TiktokWebGetSecUserIdGet
     * @param url 用户主页链接/User homepage link (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecUserIdApiV1TiktokWebGetSecUserIdGetCall(String url, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/get_sec_user_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSecUserIdApiV1TiktokWebGetSecUserIdGetValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling getSecUserIdApiV1TiktokWebGetSecUserIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = getSecUserIdApiV1TiktokWebGetSecUserIdGetCall(url, _callback);
        return localVarCall;

    }

    /**
     * 提取用户sec_user_id/Extract user sec_user_id
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@tiktok\&quot;
     * @param url 用户主页链接/User homepage link (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel getSecUserIdApiV1TiktokWebGetSecUserIdGet(String url) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = getSecUserIdApiV1TiktokWebGetSecUserIdGetWithHttpInfo(url);
        return localVarResp.getData();
    }

    /**
     * 提取用户sec_user_id/Extract user sec_user_id
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@tiktok\&quot;
     * @param url 用户主页链接/User homepage link (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> getSecUserIdApiV1TiktokWebGetSecUserIdGetWithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = getSecUserIdApiV1TiktokWebGetSecUserIdGetValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 提取用户sec_user_id/Extract user sec_user_id (asynchronously)
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@tiktok\&quot;
     * @param url 用户主页链接/User homepage link (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecUserIdApiV1TiktokWebGetSecUserIdGetAsync(String url, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSecUserIdApiV1TiktokWebGetSecUserIdGetValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSecUserIdApiV1TiktokWebGetSecUserIdGet_0
     * @param url 用户主页链接/User homepage link (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecUserIdApiV1TiktokWebGetSecUserIdGet_0Call(String url, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/get_sec_user_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSecUserIdApiV1TiktokWebGetSecUserIdGet_0ValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling getSecUserIdApiV1TiktokWebGetSecUserIdGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = getSecUserIdApiV1TiktokWebGetSecUserIdGet_0Call(url, _callback);
        return localVarCall;

    }

    /**
     * 提取用户sec_user_id/Extract user sec_user_id
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@tiktok\&quot;
     * @param url 用户主页链接/User homepage link (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel getSecUserIdApiV1TiktokWebGetSecUserIdGet_0(String url) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = getSecUserIdApiV1TiktokWebGetSecUserIdGet_0WithHttpInfo(url);
        return localVarResp.getData();
    }

    /**
     * 提取用户sec_user_id/Extract user sec_user_id
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@tiktok\&quot;
     * @param url 用户主页链接/User homepage link (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> getSecUserIdApiV1TiktokWebGetSecUserIdGet_0WithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = getSecUserIdApiV1TiktokWebGetSecUserIdGet_0ValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 提取用户sec_user_id/Extract user sec_user_id (asynchronously)
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@tiktok\&quot;
     * @param url 用户主页链接/User homepage link (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecUserIdApiV1TiktokWebGetSecUserIdGet_0Async(String url, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSecUserIdApiV1TiktokWebGetSecUserIdGet_0ValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUniqueIdApiV1TiktokWebGetUniqueIdGet
     * @param url 用户主页链接/User homepage link (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUniqueIdApiV1TiktokWebGetUniqueIdGetCall(String url, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/get_unique_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUniqueIdApiV1TiktokWebGetUniqueIdGetValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling getUniqueIdApiV1TiktokWebGetUniqueIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = getUniqueIdApiV1TiktokWebGetUniqueIdGetCall(url, _callback);
        return localVarCall;

    }

    /**
     * 获取用户unique_id/Get user unique_id
     * # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@tiktok\&quot;
     * @param url 用户主页链接/User homepage link (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel getUniqueIdApiV1TiktokWebGetUniqueIdGet(String url) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = getUniqueIdApiV1TiktokWebGetUniqueIdGetWithHttpInfo(url);
        return localVarResp.getData();
    }

    /**
     * 获取用户unique_id/Get user unique_id
     * # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@tiktok\&quot;
     * @param url 用户主页链接/User homepage link (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> getUniqueIdApiV1TiktokWebGetUniqueIdGetWithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = getUniqueIdApiV1TiktokWebGetUniqueIdGetValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户unique_id/Get user unique_id (asynchronously)
     * # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@tiktok\&quot;
     * @param url 用户主页链接/User homepage link (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUniqueIdApiV1TiktokWebGetUniqueIdGetAsync(String url, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUniqueIdApiV1TiktokWebGetUniqueIdGetValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUniqueIdApiV1TiktokWebGetUniqueIdGet_0
     * @param url 用户主页链接/User homepage link (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUniqueIdApiV1TiktokWebGetUniqueIdGet_0Call(String url, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tiktok/web/get_unique_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUniqueIdApiV1TiktokWebGetUniqueIdGet_0ValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling getUniqueIdApiV1TiktokWebGetUniqueIdGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = getUniqueIdApiV1TiktokWebGetUniqueIdGet_0Call(url, _callback);
        return localVarCall;

    }

    /**
     * 获取用户unique_id/Get user unique_id
     * # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@tiktok\&quot;
     * @param url 用户主页链接/User homepage link (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel getUniqueIdApiV1TiktokWebGetUniqueIdGet_0(String url) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = getUniqueIdApiV1TiktokWebGetUniqueIdGet_0WithHttpInfo(url);
        return localVarResp.getData();
    }

    /**
     * 获取用户unique_id/Get user unique_id
     * # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@tiktok\&quot;
     * @param url 用户主页链接/User homepage link (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> getUniqueIdApiV1TiktokWebGetUniqueIdGet_0WithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = getUniqueIdApiV1TiktokWebGetUniqueIdGet_0ValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户unique_id/Get user unique_id (asynchronously)
     * # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url &#x3D; \&quot;https://www.tiktok.com/@tiktok\&quot;
     * @param url 用户主页链接/User homepage link (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUniqueIdApiV1TiktokWebGetUniqueIdGet_0Async(String url, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUniqueIdApiV1TiktokWebGetUniqueIdGet_0ValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
