/*
 * Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HttpValidationError;
import org.openapitools.client.model.ResponseModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InstagramWebAndAppApiApi {
    private ApiClient localVarApiClient;

    public InstagramWebAndAppApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InstagramWebAndAppApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param commentId Instagram评论ID/Instagram comment ID (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGetCall(String url, String commentId, String paginationToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_comment_replies_by_comment_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (commentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment_id", commentId));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGetValidateBeforeCall(String url, String commentId, String paginationToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGetCall(url, commentId, paginationToken, _callback);
        return localVarCall;

    }

    /**
     * 根据评论ID获取评论回复数据/Get comment replies by comment ID
     * # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot; comment_id &#x3D; \&quot;18033049183828491\&quot; pagination_token &#x3D; None
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param commentId Instagram评论ID/Instagram comment ID (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet(String url, String commentId, String paginationToken) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGetWithHttpInfo(url, commentId, paginationToken);
        return localVarResp.getData();
    }

    /**
     * 根据评论ID获取评论回复数据/Get comment replies by comment ID
     * # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot; comment_id &#x3D; \&quot;18033049183828491\&quot; pagination_token &#x3D; None
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param commentId Instagram评论ID/Instagram comment ID (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGetWithHttpInfo(String url, String commentId, String paginationToken) throws ApiException {
        okhttp3.Call localVarCall = fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGetValidateBeforeCall(url, commentId, paginationToken, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据评论ID获取评论回复数据/Get comment replies by comment ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot; comment_id &#x3D; \&quot;18033049183828491\&quot; pagination_token &#x3D; None
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param commentId Instagram评论ID/Instagram comment ID (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGetAsync(String url, String commentId, String paginationToken, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGetValidateBeforeCall(url, commentId, paginationToken, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_0
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param commentId Instagram评论ID/Instagram comment ID (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_0Call(String url, String commentId, String paginationToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_comment_replies_by_comment_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (commentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("comment_id", commentId));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_0ValidateBeforeCall(String url, String commentId, String paginationToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_0(Async)");
        }
        
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_0Call(url, commentId, paginationToken, _callback);
        return localVarCall;

    }

    /**
     * 根据评论ID获取评论回复数据/Get comment replies by comment ID
     * # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot; comment_id &#x3D; \&quot;18033049183828491\&quot; pagination_token &#x3D; None
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param commentId Instagram评论ID/Instagram comment ID (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_0(String url, String commentId, String paginationToken) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_0WithHttpInfo(url, commentId, paginationToken);
        return localVarResp.getData();
    }

    /**
     * 根据评论ID获取评论回复数据/Get comment replies by comment ID
     * # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot; comment_id &#x3D; \&quot;18033049183828491\&quot; pagination_token &#x3D; None
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param commentId Instagram评论ID/Instagram comment ID (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_0WithHttpInfo(String url, String commentId, String paginationToken) throws ApiException {
        okhttp3.Call localVarCall = fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_0ValidateBeforeCall(url, commentId, paginationToken, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据评论ID获取评论回复数据/Get comment replies by comment ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot; comment_id &#x3D; \&quot;18033049183828491\&quot; pagination_token &#x3D; None
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param commentId Instagram评论ID/Instagram comment ID (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_0Async(String url, String commentId, String paginationToken, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_0ValidateBeforeCall(url, commentId, paginationToken, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet
     * @param keyword 关键词/Query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGetCall(String keyword, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_global_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGetValidateBeforeCall(String keyword, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGetCall(keyword, _callback);
        return localVarCall;

    }

    /**
     * 综合搜索/Search all by query
     * # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot;
     * @param keyword 关键词/Query (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet(String keyword) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGetWithHttpInfo(keyword);
        return localVarResp.getData();
    }

    /**
     * 综合搜索/Search all by query
     * # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot;
     * @param keyword 关键词/Query (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGetWithHttpInfo(String keyword) throws ApiException {
        okhttp3.Call localVarCall = fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGetValidateBeforeCall(keyword, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 综合搜索/Search all by query (asynchronously)
     * # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot;
     * @param keyword 关键词/Query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGetAsync(String keyword, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGetValidateBeforeCall(keyword, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_0
     * @param keyword 关键词/Query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_0Call(String keyword, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_global_search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_0ValidateBeforeCall(String keyword, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_0Call(keyword, _callback);
        return localVarCall;

    }

    /**
     * 综合搜索/Search all by query
     * # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot;
     * @param keyword 关键词/Query (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_0(String keyword) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_0WithHttpInfo(keyword);
        return localVarResp.getData();
    }

    /**
     * 综合搜索/Search all by query
     * # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot;
     * @param keyword 关键词/Query (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_0WithHttpInfo(String keyword) throws ApiException {
        okhttp3.Call localVarCall = fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_0ValidateBeforeCall(keyword, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 综合搜索/Search all by query (asynchronously)
     * # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot;
     * @param keyword 关键词/Query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_0Async(String keyword, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_0ValidateBeforeCall(keyword, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet
     * @param keyword 关键词/Query (required)
     * @param endCursor 结束游标/End cursor (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGetCall(String keyword, String endCursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_hashtag_posts_by_keyword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (endCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_cursor", endCursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGetValidateBeforeCall(String keyword, String endCursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGetCall(keyword, endCursor, _callback);
        return localVarCall;

    }

    /**
     * 根据关键词获取话题帖子/Get hashtag posts by query
     * # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Hashtag posts  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot; end_cursor &#x3D; None
     * @param keyword 关键词/Query (required)
     * @param endCursor 结束游标/End cursor (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet(String keyword, String endCursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGetWithHttpInfo(keyword, endCursor);
        return localVarResp.getData();
    }

    /**
     * 根据关键词获取话题帖子/Get hashtag posts by query
     * # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Hashtag posts  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot; end_cursor &#x3D; None
     * @param keyword 关键词/Query (required)
     * @param endCursor 结束游标/End cursor (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGetWithHttpInfo(String keyword, String endCursor) throws ApiException {
        okhttp3.Call localVarCall = fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGetValidateBeforeCall(keyword, endCursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据关键词获取话题帖子/Get hashtag posts by query (asynchronously)
     * # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Hashtag posts  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot; end_cursor &#x3D; None
     * @param keyword 关键词/Query (required)
     * @param endCursor 结束游标/End cursor (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGetAsync(String keyword, String endCursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGetValidateBeforeCall(keyword, endCursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_0
     * @param keyword 关键词/Query (required)
     * @param endCursor 结束游标/End cursor (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_0Call(String keyword, String endCursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_hashtag_posts_by_keyword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        if (endCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_cursor", endCursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_0ValidateBeforeCall(String keyword, String endCursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_0Call(keyword, endCursor, _callback);
        return localVarCall;

    }

    /**
     * 根据关键词获取话题帖子/Get hashtag posts by query
     * # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Hashtag posts  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot; end_cursor &#x3D; None
     * @param keyword 关键词/Query (required)
     * @param endCursor 结束游标/End cursor (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_0(String keyword, String endCursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_0WithHttpInfo(keyword, endCursor);
        return localVarResp.getData();
    }

    /**
     * 根据关键词获取话题帖子/Get hashtag posts by query
     * # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Hashtag posts  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot; end_cursor &#x3D; None
     * @param keyword 关键词/Query (required)
     * @param endCursor 结束游标/End cursor (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_0WithHttpInfo(String keyword, String endCursor) throws ApiException {
        okhttp3.Call localVarCall = fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_0ValidateBeforeCall(keyword, endCursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据关键词获取话题帖子/Get hashtag posts by query (asynchronously)
     * # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Hashtag posts  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot; end_cursor &#x3D; None
     * @param keyword 关键词/Query (required)
     * @param endCursor 结束游标/End cursor (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_0Async(String keyword, String endCursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_0ValidateBeforeCall(keyword, endCursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet
     * @param highlightId Instagram highlight ID/Instagram highlight ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGetCall(String highlightId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_highlights_by_highlight_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (highlightId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highlight_id", highlightId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGetValidateBeforeCall(String highlightId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'highlightId' is set
        if (highlightId == null) {
            throw new ApiException("Missing the required parameter 'highlightId' when calling fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGetCall(highlightId, _callback);
        return localVarCall;

    }

    /**
     * 根据highlights ID获取highlight数据/Get highlights by highlight ID
     * # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id &#x3D; \&quot;17871373118984285\&quot;
     * @param highlightId Instagram highlight ID/Instagram highlight ID (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet(String highlightId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGetWithHttpInfo(highlightId);
        return localVarResp.getData();
    }

    /**
     * 根据highlights ID获取highlight数据/Get highlights by highlight ID
     * # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id &#x3D; \&quot;17871373118984285\&quot;
     * @param highlightId Instagram highlight ID/Instagram highlight ID (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGetWithHttpInfo(String highlightId) throws ApiException {
        okhttp3.Call localVarCall = fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGetValidateBeforeCall(highlightId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据highlights ID获取highlight数据/Get highlights by highlight ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id &#x3D; \&quot;17871373118984285\&quot;
     * @param highlightId Instagram highlight ID/Instagram highlight ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGetAsync(String highlightId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGetValidateBeforeCall(highlightId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_0
     * @param highlightId Instagram highlight ID/Instagram highlight ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_0Call(String highlightId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_highlights_by_highlight_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (highlightId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("highlight_id", highlightId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_0ValidateBeforeCall(String highlightId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'highlightId' is set
        if (highlightId == null) {
            throw new ApiException("Missing the required parameter 'highlightId' when calling fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_0Call(highlightId, _callback);
        return localVarCall;

    }

    /**
     * 根据highlights ID获取highlight数据/Get highlights by highlight ID
     * # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id &#x3D; \&quot;17871373118984285\&quot;
     * @param highlightId Instagram highlight ID/Instagram highlight ID (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_0(String highlightId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_0WithHttpInfo(highlightId);
        return localVarResp.getData();
    }

    /**
     * 根据highlights ID获取highlight数据/Get highlights by highlight ID
     * # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id &#x3D; \&quot;17871373118984285\&quot;
     * @param highlightId Instagram highlight ID/Instagram highlight ID (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_0WithHttpInfo(String highlightId) throws ApiException {
        okhttp3.Call localVarCall = fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_0ValidateBeforeCall(highlightId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据highlights ID获取highlight数据/Get highlights by highlight ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id &#x3D; \&quot;17871373118984285\&quot;
     * @param highlightId Instagram highlight ID/Instagram highlight ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_0Async(String highlightId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_0ValidateBeforeCall(highlightId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet
     * @param locationId Instagram地点ID/Instagram location ID (required)
     * @param maxId 最大ID/Max ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGetCall(String locationId, String maxId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_location_posts_by_location_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGetValidateBeforeCall(String locationId, String maxId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGetCall(locationId, maxId, _callback);
        return localVarCall;

    }

    /**
     * 根据地点ID获取地点相关的帖子/Get location posts by location ID
     * # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id &#x3D; \&quot;115412053922647\&quot; max_id &#x3D; None
     * @param locationId Instagram地点ID/Instagram location ID (required)
     * @param maxId 最大ID/Max ID (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet(String locationId, String maxId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGetWithHttpInfo(locationId, maxId);
        return localVarResp.getData();
    }

    /**
     * 根据地点ID获取地点相关的帖子/Get location posts by location ID
     * # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id &#x3D; \&quot;115412053922647\&quot; max_id &#x3D; None
     * @param locationId Instagram地点ID/Instagram location ID (required)
     * @param maxId 最大ID/Max ID (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGetWithHttpInfo(String locationId, String maxId) throws ApiException {
        okhttp3.Call localVarCall = fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGetValidateBeforeCall(locationId, maxId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据地点ID获取地点相关的帖子/Get location posts by location ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id &#x3D; \&quot;115412053922647\&quot; max_id &#x3D; None
     * @param locationId Instagram地点ID/Instagram location ID (required)
     * @param maxId 最大ID/Max ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGetAsync(String locationId, String maxId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGetValidateBeforeCall(locationId, maxId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_0
     * @param locationId Instagram地点ID/Instagram location ID (required)
     * @param maxId 最大ID/Max ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_0Call(String locationId, String maxId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_location_posts_by_location_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_0ValidateBeforeCall(String locationId, String maxId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_0Call(locationId, maxId, _callback);
        return localVarCall;

    }

    /**
     * 根据地点ID获取地点相关的帖子/Get location posts by location ID
     * # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id &#x3D; \&quot;115412053922647\&quot; max_id &#x3D; None
     * @param locationId Instagram地点ID/Instagram location ID (required)
     * @param maxId 最大ID/Max ID (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_0(String locationId, String maxId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_0WithHttpInfo(locationId, maxId);
        return localVarResp.getData();
    }

    /**
     * 根据地点ID获取地点相关的帖子/Get location posts by location ID
     * # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id &#x3D; \&quot;115412053922647\&quot; max_id &#x3D; None
     * @param locationId Instagram地点ID/Instagram location ID (required)
     * @param maxId 最大ID/Max ID (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_0WithHttpInfo(String locationId, String maxId) throws ApiException {
        okhttp3.Call localVarCall = fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_0ValidateBeforeCall(locationId, maxId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据地点ID获取地点相关的帖子/Get location posts by location ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id &#x3D; \&quot;115412053922647\&quot; max_id &#x3D; None
     * @param locationId Instagram地点ID/Instagram location ID (required)
     * @param maxId 最大ID/Max ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_0Async(String locationId, String maxId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_0ValidateBeforeCall(locationId, maxId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet
     * @param musicId Instagram音乐ID/Instagram music ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGetCall(String musicId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_music_info_by_music_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (musicId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_id", musicId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGetValidateBeforeCall(String musicId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'musicId' is set
        if (musicId == null) {
            throw new ApiException("Missing the required parameter 'musicId' when calling fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGetCall(musicId, _callback);
        return localVarCall;

    }

    /**
     * 根据音乐ID获取音乐数据/Get music data by music ID
     * # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id &#x3D; \&quot;841270117005292\&quot;
     * @param musicId Instagram音乐ID/Instagram music ID (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet(String musicId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGetWithHttpInfo(musicId);
        return localVarResp.getData();
    }

    /**
     * 根据音乐ID获取音乐数据/Get music data by music ID
     * # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id &#x3D; \&quot;841270117005292\&quot;
     * @param musicId Instagram音乐ID/Instagram music ID (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGetWithHttpInfo(String musicId) throws ApiException {
        okhttp3.Call localVarCall = fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGetValidateBeforeCall(musicId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据音乐ID获取音乐数据/Get music data by music ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id &#x3D; \&quot;841270117005292\&quot;
     * @param musicId Instagram音乐ID/Instagram music ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGetAsync(String musicId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGetValidateBeforeCall(musicId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_0
     * @param musicId Instagram音乐ID/Instagram music ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_0Call(String musicId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_music_info_by_music_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (musicId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("music_id", musicId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_0ValidateBeforeCall(String musicId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'musicId' is set
        if (musicId == null) {
            throw new ApiException("Missing the required parameter 'musicId' when calling fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_0Call(musicId, _callback);
        return localVarCall;

    }

    /**
     * 根据音乐ID获取音乐数据/Get music data by music ID
     * # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id &#x3D; \&quot;841270117005292\&quot;
     * @param musicId Instagram音乐ID/Instagram music ID (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_0(String musicId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_0WithHttpInfo(musicId);
        return localVarResp.getData();
    }

    /**
     * 根据音乐ID获取音乐数据/Get music data by music ID
     * # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id &#x3D; \&quot;841270117005292\&quot;
     * @param musicId Instagram音乐ID/Instagram music ID (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_0WithHttpInfo(String musicId) throws ApiException {
        okhttp3.Call localVarCall = fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_0ValidateBeforeCall(musicId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据音乐ID获取音乐数据/Get music data by music ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id &#x3D; \&quot;841270117005292\&quot;
     * @param musicId Instagram音乐ID/Instagram music ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_0Async(String musicId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_0ValidateBeforeCall(musicId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGetCall(String url, String paginationToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_post_comments_by_url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGetValidateBeforeCall(String url, String paginationToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGetCall(url, paginationToken, _callback);
        return localVarCall;

    }

    /**
     * 根据URL获取帖子评论数据/Get post comments by URL
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot; pagination_token &#x3D; None
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet(String url, String paginationToken) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGetWithHttpInfo(url, paginationToken);
        return localVarResp.getData();
    }

    /**
     * 根据URL获取帖子评论数据/Get post comments by URL
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot; pagination_token &#x3D; None
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGetWithHttpInfo(String url, String paginationToken) throws ApiException {
        okhttp3.Call localVarCall = fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGetValidateBeforeCall(url, paginationToken, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据URL获取帖子评论数据/Get post comments by URL (asynchronously)
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot; pagination_token &#x3D; None
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGetAsync(String url, String paginationToken, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGetValidateBeforeCall(url, paginationToken, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_0
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_0Call(String url, String paginationToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_post_comments_by_url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_0ValidateBeforeCall(String url, String paginationToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_0Call(url, paginationToken, _callback);
        return localVarCall;

    }

    /**
     * 根据URL获取帖子评论数据/Get post comments by URL
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot; pagination_token &#x3D; None
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_0(String url, String paginationToken) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_0WithHttpInfo(url, paginationToken);
        return localVarResp.getData();
    }

    /**
     * 根据URL获取帖子评论数据/Get post comments by URL
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot; pagination_token &#x3D; None
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_0WithHttpInfo(String url, String paginationToken) throws ApiException {
        okhttp3.Call localVarCall = fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_0ValidateBeforeCall(url, paginationToken, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据URL获取帖子评论数据/Get post comments by URL (asynchronously)
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot; pagination_token &#x3D; None
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_0Async(String url, String paginationToken, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_0ValidateBeforeCall(url, paginationToken, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet
     * @param postId Instagram帖子ID/Instagram post ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGetCall(String postId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_post_info_by_post_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (postId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("post_id", postId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGetValidateBeforeCall(String postId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'postId' is set
        if (postId == null) {
            throw new ApiException("Missing the required parameter 'postId' when calling fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGetCall(postId, _callback);
        return localVarCall;

    }

    /**
     * 根据帖子ID获取帖子数据/Get post data by post ID
     * # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id &#x3D; \&quot;3369328379222099122\&quot;
     * @param postId Instagram帖子ID/Instagram post ID (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet(String postId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGetWithHttpInfo(postId);
        return localVarResp.getData();
    }

    /**
     * 根据帖子ID获取帖子数据/Get post data by post ID
     * # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id &#x3D; \&quot;3369328379222099122\&quot;
     * @param postId Instagram帖子ID/Instagram post ID (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGetWithHttpInfo(String postId) throws ApiException {
        okhttp3.Call localVarCall = fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGetValidateBeforeCall(postId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据帖子ID获取帖子数据/Get post data by post ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id &#x3D; \&quot;3369328379222099122\&quot;
     * @param postId Instagram帖子ID/Instagram post ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGetAsync(String postId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGetValidateBeforeCall(postId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_0
     * @param postId Instagram帖子ID/Instagram post ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_0Call(String postId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_post_info_by_post_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (postId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("post_id", postId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_0ValidateBeforeCall(String postId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'postId' is set
        if (postId == null) {
            throw new ApiException("Missing the required parameter 'postId' when calling fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_0Call(postId, _callback);
        return localVarCall;

    }

    /**
     * 根据帖子ID获取帖子数据/Get post data by post ID
     * # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id &#x3D; \&quot;3369328379222099122\&quot;
     * @param postId Instagram帖子ID/Instagram post ID (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_0(String postId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_0WithHttpInfo(postId);
        return localVarResp.getData();
    }

    /**
     * 根据帖子ID获取帖子数据/Get post data by post ID
     * # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id &#x3D; \&quot;3369328379222099122\&quot;
     * @param postId Instagram帖子ID/Instagram post ID (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_0WithHttpInfo(String postId) throws ApiException {
        okhttp3.Call localVarCall = fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_0ValidateBeforeCall(postId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据帖子ID获取帖子数据/Get post data by post ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id &#x3D; \&quot;3369328379222099122\&quot;
     * @param postId Instagram帖子ID/Instagram post ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_0Async(String postId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_0ValidateBeforeCall(postId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGetCall(String url, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_post_info_by_url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGetValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGetCall(url, _callback);
        return localVarCall;

    }

    /**
     * 根据URL获取帖子数据/Get post data by URL
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C7CQk83LQSy/\&quot;
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet(String url) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGetWithHttpInfo(url);
        return localVarResp.getData();
    }

    /**
     * 根据URL获取帖子数据/Get post data by URL
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C7CQk83LQSy/\&quot;
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGetWithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGetValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据URL获取帖子数据/Get post data by URL (asynchronously)
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C7CQk83LQSy/\&quot;
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGetAsync(String url, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGetValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_0
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_0Call(String url, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_post_info_by_url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_0ValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_0Call(url, _callback);
        return localVarCall;

    }

    /**
     * 根据URL获取帖子数据/Get post data by URL
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C7CQk83LQSy/\&quot;
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_0(String url) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_0WithHttpInfo(url);
        return localVarResp.getData();
    }

    /**
     * 根据URL获取帖子数据/Get post data by URL
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C7CQk83LQSy/\&quot;
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_0WithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_0ValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据URL获取帖子数据/Get post data by URL (asynchronously)
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C7CQk83LQSy/\&quot;
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_0Async(String url, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_0ValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGetCall(String url, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_post_likes_by_url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGetValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGetCall(url, _callback);
        return localVarCall;

    }

    /**
     * 根据URL获取帖子点赞数据/Get post likes by URL
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot;
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet(String url) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGetWithHttpInfo(url);
        return localVarResp.getData();
    }

    /**
     * 根据URL获取帖子点赞数据/Get post likes by URL
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot;
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGetWithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGetValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据URL获取帖子点赞数据/Get post likes by URL (asynchronously)
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot;
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGetAsync(String url, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGetValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_0
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_0Call(String url, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_post_likes_by_url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_0ValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_0Call(url, _callback);
        return localVarCall;

    }

    /**
     * 根据URL获取帖子点赞数据/Get post likes by URL
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot;
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_0(String url) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_0WithHttpInfo(url);
        return localVarResp.getData();
    }

    /**
     * 根据URL获取帖子点赞数据/Get post likes by URL
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot;
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_0WithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_0ValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据URL获取帖子点赞数据/Get post likes by URL (asynchronously)
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot;
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_0Async(String url, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_0ValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGetCall(String url, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_post_media_by_url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGetValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGetCall(url, _callback);
        return localVarCall;

    }

    /**
     * 根据帖子URL获取媒体数据/Get media data by URL
     * # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C7CQk83LQSy/\&quot;
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet(String url) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGetWithHttpInfo(url);
        return localVarResp.getData();
    }

    /**
     * 根据帖子URL获取媒体数据/Get media data by URL
     * # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C7CQk83LQSy/\&quot;
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGetWithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGetValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据帖子URL获取媒体数据/Get media data by URL (asynchronously)
     * # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C7CQk83LQSy/\&quot;
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGetAsync(String url, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGetValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_0
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_0Call(String url, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_post_media_by_url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_0ValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_0Call(url, _callback);
        return localVarCall;

    }

    /**
     * 根据帖子URL获取媒体数据/Get media data by URL
     * # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C7CQk83LQSy/\&quot;
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_0(String url) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_0WithHttpInfo(url);
        return localVarResp.getData();
    }

    /**
     * 根据帖子URL获取媒体数据/Get media data by URL
     * # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C7CQk83LQSy/\&quot;
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_0WithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_0ValidateBeforeCall(url, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据帖子URL获取媒体数据/Get media data by URL (asynchronously)
     * # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C7CQk83LQSy/\&quot;
     * @param url Instagram帖子URL/Instagram post URL (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_0Async(String url, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_0ValidateBeforeCall(url, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGetCall(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_related_users_by_user_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGetValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGetCall(userId, _callback);
        return localVarCall;

    }

    /**
     * 根据用户ID获取与用户相关的其他用户/Get user related users by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet(String userId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 根据用户ID获取与用户相关的其他用户/Get user related users by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGetWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户ID获取与用户相关的其他用户/Get user related users by user ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGetAsync(String userId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_0
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_0Call(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_related_users_by_user_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_0ValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_0Call(userId, _callback);
        return localVarCall;

    }

    /**
     * 根据用户ID获取与用户相关的其他用户/Get user related users by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_0(String userId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_0WithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 根据用户ID获取与用户相关的其他用户/Get user related users by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_0WithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_0ValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户ID获取与用户相关的其他用户/Get user related users by user ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_0Async(String userId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_0ValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet
     * @param keyword 关键词/Query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGetCall(String keyword, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_search_hashtags_by_keyword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGetValidateBeforeCall(String keyword, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGetCall(keyword, _callback);
        return localVarCall;

    }

    /**
     * 根据关键词搜索话题数据/Search hashtags by query
     * # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot;
     * @param keyword 关键词/Query (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet(String keyword) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGetWithHttpInfo(keyword);
        return localVarResp.getData();
    }

    /**
     * 根据关键词搜索话题数据/Search hashtags by query
     * # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot;
     * @param keyword 关键词/Query (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGetWithHttpInfo(String keyword) throws ApiException {
        okhttp3.Call localVarCall = fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGetValidateBeforeCall(keyword, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据关键词搜索话题数据/Search hashtags by query (asynchronously)
     * # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot;
     * @param keyword 关键词/Query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGetAsync(String keyword, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGetValidateBeforeCall(keyword, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_0
     * @param keyword 关键词/Query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_0Call(String keyword, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_search_hashtags_by_keyword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_0ValidateBeforeCall(String keyword, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_0Call(keyword, _callback);
        return localVarCall;

    }

    /**
     * 根据关键词搜索话题数据/Search hashtags by query
     * # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot;
     * @param keyword 关键词/Query (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_0(String keyword) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_0WithHttpInfo(keyword);
        return localVarResp.getData();
    }

    /**
     * 根据关键词搜索话题数据/Search hashtags by query
     * # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot;
     * @param keyword 关键词/Query (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_0WithHttpInfo(String keyword) throws ApiException {
        okhttp3.Call localVarCall = fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_0ValidateBeforeCall(keyword, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据关键词搜索话题数据/Search hashtags by query (asynchronously)
     * # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot;
     * @param keyword 关键词/Query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_0Async(String keyword, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_0ValidateBeforeCall(keyword, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet
     * @param keyword 关键词/Query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGetCall(String keyword, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_search_locations_by_keyword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGetValidateBeforeCall(String keyword, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGetCall(keyword, _callback);
        return localVarCall;

    }

    /**
     * 根据关键词搜索地点数据/Search locations by query
     * # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;ShangHai\&quot;
     * @param keyword 关键词/Query (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet(String keyword) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGetWithHttpInfo(keyword);
        return localVarResp.getData();
    }

    /**
     * 根据关键词搜索地点数据/Search locations by query
     * # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;ShangHai\&quot;
     * @param keyword 关键词/Query (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGetWithHttpInfo(String keyword) throws ApiException {
        okhttp3.Call localVarCall = fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGetValidateBeforeCall(keyword, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据关键词搜索地点数据/Search locations by query (asynchronously)
     * # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;ShangHai\&quot;
     * @param keyword 关键词/Query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGetAsync(String keyword, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGetValidateBeforeCall(keyword, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_0
     * @param keyword 关键词/Query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_0Call(String keyword, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_search_locations_by_keyword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_0ValidateBeforeCall(String keyword, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_0Call(keyword, _callback);
        return localVarCall;

    }

    /**
     * 根据关键词搜索地点数据/Search locations by query
     * # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;ShangHai\&quot;
     * @param keyword 关键词/Query (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_0(String keyword) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_0WithHttpInfo(keyword);
        return localVarResp.getData();
    }

    /**
     * 根据关键词搜索地点数据/Search locations by query
     * # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;ShangHai\&quot;
     * @param keyword 关键词/Query (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_0WithHttpInfo(String keyword) throws ApiException {
        okhttp3.Call localVarCall = fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_0ValidateBeforeCall(keyword, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据关键词搜索地点数据/Search locations by query (asynchronously)
     * # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;ShangHai\&quot;
     * @param keyword 关键词/Query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_0Async(String keyword, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_0ValidateBeforeCall(keyword, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet
     * @param keyword 关键词/Query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGetCall(String keyword, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_search_users_by_keyword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGetValidateBeforeCall(String keyword, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGetCall(keyword, _callback);
        return localVarCall;

    }

    /**
     * 根据关键词搜索用户/Search users by query
     * # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;instagram\&quot;
     * @param keyword 关键词/Query (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet(String keyword) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGetWithHttpInfo(keyword);
        return localVarResp.getData();
    }

    /**
     * 根据关键词搜索用户/Search users by query
     * # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;instagram\&quot;
     * @param keyword 关键词/Query (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGetWithHttpInfo(String keyword) throws ApiException {
        okhttp3.Call localVarCall = fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGetValidateBeforeCall(keyword, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据关键词搜索用户/Search users by query (asynchronously)
     * # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;instagram\&quot;
     * @param keyword 关键词/Query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGetAsync(String keyword, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGetValidateBeforeCall(keyword, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_0
     * @param keyword 关键词/Query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_0Call(String keyword, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_search_users_by_keyword";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword", keyword));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_0ValidateBeforeCall(String keyword, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'keyword' is set
        if (keyword == null) {
            throw new ApiException("Missing the required parameter 'keyword' when calling fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_0Call(keyword, _callback);
        return localVarCall;

    }

    /**
     * 根据关键词搜索用户/Search users by query
     * # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;instagram\&quot;
     * @param keyword 关键词/Query (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_0(String keyword) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_0WithHttpInfo(keyword);
        return localVarResp.getData();
    }

    /**
     * 根据关键词搜索用户/Search users by query
     * # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;instagram\&quot;
     * @param keyword 关键词/Query (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_0WithHttpInfo(String keyword) throws ApiException {
        okhttp3.Call localVarCall = fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_0ValidateBeforeCall(keyword, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据关键词搜索用户/Search users by query (asynchronously)
     * # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;instagram\&quot;
     * @param keyword 关键词/Query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_0Async(String keyword, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_0ValidateBeforeCall(keyword, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGetCall(String username, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_similar_accounts_by_username";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGetValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGetCall(username, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取相似的账户数据/Get similar accounts by username
     * # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username &#x3D; \&quot;daily_fuck_people\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet(String username) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGetWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取相似的账户数据/Get similar accounts by username
     * # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username &#x3D; \&quot;daily_fuck_people\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGetWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGetValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取相似的账户数据/Get similar accounts by username (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username &#x3D; \&quot;daily_fuck_people\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGetAsync(String username, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGetValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_0
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_0Call(String username, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_similar_accounts_by_username";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_0ValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_0Call(username, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取相似的账户数据/Get similar accounts by username
     * # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username &#x3D; \&quot;daily_fuck_people\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_0(String username) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_0WithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取相似的账户数据/Get similar accounts by username
     * # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username &#x3D; \&quot;daily_fuck_people\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_0WithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_0ValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取相似的账户数据/Get similar accounts by username (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username &#x3D; \&quot;daily_fuck_people\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_0Async(String username, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_0ValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGetCall(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_about_info_by_user_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGetValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGetCall(userId, _callback);
        return localVarCall;

    }

    /**
     * 根据用户ID获取用户数据关于信息/Get user data about by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet(String userId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 根据用户ID获取用户数据关于信息/Get user data about by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGetWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户ID获取用户数据关于信息/Get user data about by user ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGetAsync(String userId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_0
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_0Call(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_about_info_by_user_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_0ValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_0Call(userId, _callback);
        return localVarCall;

    }

    /**
     * 根据用户ID获取用户数据关于信息/Get user data about by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_0(String userId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_0WithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 根据用户ID获取用户数据关于信息/Get user data about by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_0WithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_0ValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户ID获取用户数据关于信息/Get user data about by user ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_0Async(String userId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_0ValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页令牌/Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGetCall(String username, String paginationToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_followers_by_username";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGetValidateBeforeCall(String username, String paginationToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGetCall(username, paginationToken, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取用户的粉丝数据/Get user followers by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页令牌/Pagination token (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet(String username, String paginationToken) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGetWithHttpInfo(username, paginationToken);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取用户的粉丝数据/Get user followers by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页令牌/Pagination token (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGetWithHttpInfo(String username, String paginationToken) throws ApiException {
        okhttp3.Call localVarCall = fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGetValidateBeforeCall(username, paginationToken, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取用户的粉丝数据/Get user followers by username (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页令牌/Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGetAsync(String username, String paginationToken, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGetValidateBeforeCall(username, paginationToken, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_0
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页令牌/Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_0Call(String username, String paginationToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_followers_by_username";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_0ValidateBeforeCall(String username, String paginationToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_0Call(username, paginationToken, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取用户的粉丝数据/Get user followers by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页令牌/Pagination token (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_0(String username, String paginationToken) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_0WithHttpInfo(username, paginationToken);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取用户的粉丝数据/Get user followers by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页令牌/Pagination token (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_0WithHttpInfo(String username, String paginationToken) throws ApiException {
        okhttp3.Call localVarCall = fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_0ValidateBeforeCall(username, paginationToken, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取用户的粉丝数据/Get user followers by username (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页令牌/Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_0Async(String username, String paginationToken, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_0ValidateBeforeCall(username, paginationToken, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页令牌/Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGetCall(String username, String paginationToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_following_by_username";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGetValidateBeforeCall(String username, String paginationToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGetCall(username, paginationToken, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取用户的正在关注的用户数据/Get user followings by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页令牌/Pagination token (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet(String username, String paginationToken) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGetWithHttpInfo(username, paginationToken);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取用户的正在关注的用户数据/Get user followings by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页令牌/Pagination token (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGetWithHttpInfo(String username, String paginationToken) throws ApiException {
        okhttp3.Call localVarCall = fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGetValidateBeforeCall(username, paginationToken, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取用户的正在关注的用户数据/Get user followings by username (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页令牌/Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGetAsync(String username, String paginationToken, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGetValidateBeforeCall(username, paginationToken, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_0
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页令牌/Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_0Call(String username, String paginationToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_following_by_username";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_0ValidateBeforeCall(String username, String paginationToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_0Call(username, paginationToken, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取用户的正在关注的用户数据/Get user followings by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页令牌/Pagination token (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_0(String username, String paginationToken) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_0WithHttpInfo(username, paginationToken);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取用户的正在关注的用户数据/Get user followings by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页令牌/Pagination token (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_0WithHttpInfo(String username, String paginationToken) throws ApiException {
        okhttp3.Call localVarCall = fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_0ValidateBeforeCall(username, paginationToken, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取用户的正在关注的用户数据/Get user followings by username (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页令牌/Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_0Async(String username, String paginationToken, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_0ValidateBeforeCall(username, paginationToken, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGetCall(String username, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_highlights_by_username";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGetValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGetCall(username, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取用户的highlights数据/Get user highlights by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet(String username) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGetWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取用户的highlights数据/Get user highlights by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGetWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGetValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取用户的highlights数据/Get user highlights by username (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGetAsync(String username, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGetValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_0
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_0Call(String username, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_highlights_by_username";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_0ValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_0Call(username, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取用户的highlights数据/Get user highlights by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_0(String username) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_0WithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取用户的highlights数据/Get user highlights by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_0WithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_0ValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取用户的highlights数据/Get user highlights by username (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_0Async(String username, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_0ValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGetCall(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_user_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGetValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGetCall(userId, _callback);
        return localVarCall;

    }

    /**
     * 根据用户ID获取用户数据/Get user data by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet(String userId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 根据用户ID获取用户数据/Get user data by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGetWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户ID获取用户数据/Get user data by user ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGetAsync(String userId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_0
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_0Call(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_user_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_0ValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_0Call(userId, _callback);
        return localVarCall;

    }

    /**
     * 根据用户ID获取用户数据/Get user data by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_0(String userId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_0WithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 根据用户ID获取用户数据/Get user data by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_0WithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_0ValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户ID获取用户数据/Get user data by user ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_0Async(String userId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_0ValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2GetCall(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_user_id_v2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2GetValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2GetCall(userId, _callback);
        return localVarCall;

    }

    /**
     * 根据用户ID获取用户数据V2/Get user data by user ID V2
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get(String userId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2GetWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 根据用户ID获取用户数据V2/Get user data by user ID V2
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2GetWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2GetValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户ID获取用户数据V2/Get user data by user ID V2 (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2GetAsync(String userId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2GetValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_0
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_0Call(String userId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_user_id_v2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_0ValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_0Call(userId, _callback);
        return localVarCall;

    }

    /**
     * 根据用户ID获取用户数据V2/Get user data by user ID V2
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_0(String userId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_0WithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * 根据用户ID获取用户数据V2/Get user data by user ID V2
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_0WithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_0ValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户ID获取用户数据V2/Get user data by user ID V2 (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_0Async(String userId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_0ValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGetCall(String username, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_username";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGetValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGetCall(username, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取用户数据/Get user data by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet(String username) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGetWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取用户数据/Get user data by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGetWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGetValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取用户数据/Get user data by username (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGetAsync(String username, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGetValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_0
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_0Call(String username, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_username";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_0ValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_0Call(username, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取用户数据/Get user data by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_0(String username) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_0WithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取用户数据/Get user data by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_0WithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_0ValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取用户数据/Get user data by username (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_0Async(String username, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_0ValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2GetCall(String username, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_username_v2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2GetValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2GetCall(username, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取用户数据V2/Get user data by username V2
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get(String username) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2GetWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取用户数据V2/Get user data by username V2
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2GetWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2GetValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取用户数据V2/Get user data by username V2 (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2GetAsync(String username, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2GetValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_0
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_0Call(String username, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_username_v2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_0ValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_0Call(username, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取用户数据V2/Get user data by username V2
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_0(String username) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_0WithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取用户数据V2/Get user data by username V2
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_0WithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_0ValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取用户数据V2/Get user data by username V2 (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_0Async(String username, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_0ValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGetCall(String username, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_username_web";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGetValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGetCall(username, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取用户网页接口的个人信息/Get user info by username web API
     * # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet(String username) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGetWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取用户网页接口的个人信息/Get user info by username web API
     * # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGetWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGetValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取用户网页接口的个人信息/Get user info by username web API (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGetAsync(String username, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGetValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_0
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_0Call(String username, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_username_web";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_0ValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_0Call(username, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取用户网页接口的个人信息/Get user info by username web API
     * # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_0(String username) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_0WithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取用户网页接口的个人信息/Get user info by username web API
     * # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_0WithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_0ValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取用户网页接口的个人信息/Get user info by username web API (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_0Async(String username, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_0ValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param endCursor 结束游标/End cursor (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGetCall(String userId, Integer count, String endCursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_posts_by_user_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (endCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_cursor", endCursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGetValidateBeforeCall(String userId, Integer count, String endCursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGetCall(userId, count, endCursor, _callback);
        return localVarCall;

    }

    /**
     * 根据用户ID获取用户发布的帖子/Get user posts by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 end_cursor &#x3D; None
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param endCursor 结束游标/End cursor (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet(String userId, Integer count, String endCursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGetWithHttpInfo(userId, count, endCursor);
        return localVarResp.getData();
    }

    /**
     * 根据用户ID获取用户发布的帖子/Get user posts by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 end_cursor &#x3D; None
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param endCursor 结束游标/End cursor (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGetWithHttpInfo(String userId, Integer count, String endCursor) throws ApiException {
        okhttp3.Call localVarCall = fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGetValidateBeforeCall(userId, count, endCursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户ID获取用户发布的帖子/Get user posts by user ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 end_cursor &#x3D; None
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param endCursor 结束游标/End cursor (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGetAsync(String userId, Integer count, String endCursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGetValidateBeforeCall(userId, count, endCursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_0
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param endCursor 结束游标/End cursor (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_0Call(String userId, Integer count, String endCursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_posts_by_user_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (endCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_cursor", endCursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_0ValidateBeforeCall(String userId, Integer count, String endCursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_0Call(userId, count, endCursor, _callback);
        return localVarCall;

    }

    /**
     * 根据用户ID获取用户发布的帖子/Get user posts by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 end_cursor &#x3D; None
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param endCursor 结束游标/End cursor (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_0(String userId, Integer count, String endCursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_0WithHttpInfo(userId, count, endCursor);
        return localVarResp.getData();
    }

    /**
     * 根据用户ID获取用户发布的帖子/Get user posts by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 end_cursor &#x3D; None
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param endCursor 结束游标/End cursor (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_0WithHttpInfo(String userId, Integer count, String endCursor) throws ApiException {
        okhttp3.Call localVarCall = fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_0ValidateBeforeCall(userId, count, endCursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户ID获取用户发布的帖子/Get user posts by user ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 end_cursor &#x3D; None
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param endCursor 结束游标/End cursor (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_0Async(String userId, Integer count, String endCursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_0ValidateBeforeCall(userId, count, endCursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param maxId 最大ID/Max ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGetCall(String userId, Integer count, String maxId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_reels_by_user_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGetValidateBeforeCall(String userId, Integer count, String maxId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGetCall(userId, count, maxId, _callback);
        return localVarCall;

    }

    /**
     * 根据用户ID获取用户发布的快拍/Get user reels by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 max_id &#x3D; None
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param maxId 最大ID/Max ID (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet(String userId, Integer count, String maxId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGetWithHttpInfo(userId, count, maxId);
        return localVarResp.getData();
    }

    /**
     * 根据用户ID获取用户发布的快拍/Get user reels by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 max_id &#x3D; None
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param maxId 最大ID/Max ID (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGetWithHttpInfo(String userId, Integer count, String maxId) throws ApiException {
        okhttp3.Call localVarCall = fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGetValidateBeforeCall(userId, count, maxId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户ID获取用户发布的快拍/Get user reels by user ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 max_id &#x3D; None
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param maxId 最大ID/Max ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGetAsync(String userId, Integer count, String maxId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGetValidateBeforeCall(userId, count, maxId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_0
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param maxId 最大ID/Max ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_0Call(String userId, Integer count, String maxId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_reels_by_user_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (maxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_id", maxId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_0ValidateBeforeCall(String userId, Integer count, String maxId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_0Call(userId, count, maxId, _callback);
        return localVarCall;

    }

    /**
     * 根据用户ID获取用户发布的快拍/Get user reels by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 max_id &#x3D; None
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param maxId 最大ID/Max ID (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_0(String userId, Integer count, String maxId) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_0WithHttpInfo(userId, count, maxId);
        return localVarResp.getData();
    }

    /**
     * 根据用户ID获取用户发布的快拍/Get user reels by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 max_id &#x3D; None
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param maxId 最大ID/Max ID (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_0WithHttpInfo(String userId, Integer count, String maxId) throws ApiException {
        okhttp3.Call localVarCall = fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_0ValidateBeforeCall(userId, count, maxId, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户ID获取用户发布的快拍/Get user reels by user ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 max_id &#x3D; None
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param maxId 最大ID/Max ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_0Async(String userId, Integer count, String maxId, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_0ValidateBeforeCall(userId, count, maxId, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2GetCall(String username, String paginationToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_reels_by_username_v2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2GetValidateBeforeCall(String username, String paginationToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2GetCall(username, paginationToken, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取用户的Reels数据V2/Get user reels by username V2
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get(String username, String paginationToken) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2GetWithHttpInfo(username, paginationToken);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取用户的Reels数据V2/Get user reels by username V2
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2GetWithHttpInfo(String username, String paginationToken) throws ApiException {
        okhttp3.Call localVarCall = fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2GetValidateBeforeCall(username, paginationToken, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取用户的Reels数据V2/Get user reels by username V2 (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2GetAsync(String username, String paginationToken, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2GetValidateBeforeCall(username, paginationToken, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_0
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_0Call(String username, String paginationToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_reels_by_username_v2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_0ValidateBeforeCall(String username, String paginationToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_0Call(username, paginationToken, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取用户的Reels数据V2/Get user reels by username V2
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_0(String username, String paginationToken) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_0WithHttpInfo(username, paginationToken);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取用户的Reels数据V2/Get user reels by username V2
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_0WithHttpInfo(String username, String paginationToken) throws ApiException {
        okhttp3.Call localVarCall = fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_0ValidateBeforeCall(username, paginationToken, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取用户的Reels数据V2/Get user reels by username V2 (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_0Async(String username, String paginationToken, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_0ValidateBeforeCall(username, paginationToken, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGetCall(String username, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_stories_by_username";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGetValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGetCall(username, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取用户的Stories数据/Get user stories by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet(String username) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGetWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取用户的Stories数据/Get user stories by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGetWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGetValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取用户的Stories数据/Get user stories by username (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGetAsync(String username, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGetValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_0
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_0Call(String username, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_stories_by_username";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_0ValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_0Call(username, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取用户的Stories数据/Get user stories by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_0(String username) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_0WithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取用户的Stories数据/Get user stories by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_0WithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_0ValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取用户的Stories数据/Get user stories by username (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
     * @param username Instagram用户名/Instagram username (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_0Async(String username, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_0ValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param endCursor 结束游标/End cursor (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGetCall(String userId, Integer count, String endCursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_tagged_posts_by_user_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (endCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_cursor", endCursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGetValidateBeforeCall(String userId, Integer count, String endCursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGetCall(userId, count, endCursor, _callback);
        return localVarCall;

    }

    /**
     * 根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 end_cursor &#x3D; None
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param endCursor 结束游标/End cursor (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet(String userId, Integer count, String endCursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGetWithHttpInfo(userId, count, endCursor);
        return localVarResp.getData();
    }

    /**
     * 根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 end_cursor &#x3D; None
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param endCursor 结束游标/End cursor (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGetWithHttpInfo(String userId, Integer count, String endCursor) throws ApiException {
        okhttp3.Call localVarCall = fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGetValidateBeforeCall(userId, count, endCursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 end_cursor &#x3D; None
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param endCursor 结束游标/End cursor (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGetAsync(String userId, Integer count, String endCursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGetValidateBeforeCall(userId, count, endCursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_0
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param endCursor 结束游标/End cursor (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_0Call(String userId, Integer count, String endCursor, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_tagged_posts_by_user_id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (endCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_cursor", endCursor));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_0ValidateBeforeCall(String userId, Integer count, String endCursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_0Call(userId, count, endCursor, _callback);
        return localVarCall;

    }

    /**
     * 根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 end_cursor &#x3D; None
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param endCursor 结束游标/End cursor (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_0(String userId, Integer count, String endCursor) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_0WithHttpInfo(userId, count, endCursor);
        return localVarResp.getData();
    }

    /**
     * 根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 end_cursor &#x3D; None
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param endCursor 结束游标/End cursor (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_0WithHttpInfo(String userId, Integer count, String endCursor) throws ApiException {
        okhttp3.Call localVarCall = fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_0ValidateBeforeCall(userId, count, endCursor, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 end_cursor &#x3D; None
     * @param userId Instagram用户ID/Instagram user ID (required)
     * @param count 每页数量/Count per page (optional, default to 12)
     * @param endCursor 结束游标/End cursor (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_0Async(String userId, Integer count, String endCursor, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_0ValidateBeforeCall(userId, count, endCursor, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGetCall(String username, String paginationToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_tv_posts_by_username";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGetValidateBeforeCall(String username, String paginationToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGetCall(username, paginationToken, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取用户的tv_posts数据/Get user tv_posts by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet(String username, String paginationToken) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGetWithHttpInfo(username, paginationToken);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取用户的tv_posts数据/Get user tv_posts by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGetWithHttpInfo(String username, String paginationToken) throws ApiException {
        okhttp3.Call localVarCall = fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGetValidateBeforeCall(username, paginationToken, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取用户的tv_posts数据/Get user tv_posts by username (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGetAsync(String username, String paginationToken, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGetValidateBeforeCall(username, paginationToken, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_0
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_0Call(String username, String paginationToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/instagram/web_app/fetch_user_tv_posts_by_username";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (paginationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagination_token", paginationToken));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_0ValidateBeforeCall(String username, String paginationToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_0Call(username, paginationToken, _callback);
        return localVarCall;

    }

    /**
     * 根据用户名获取用户的tv_posts数据/Get user tv_posts by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_0(String username, String paginationToken) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_0WithHttpInfo(username, paginationToken);
        return localVarResp.getData();
    }

    /**
     * 根据用户名获取用户的tv_posts数据/Get user tv_posts by username
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_0WithHttpInfo(String username, String paginationToken) throws ApiException {
        okhttp3.Call localVarCall = fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_0ValidateBeforeCall(username, paginationToken, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 根据用户名获取用户的tv_posts数据/Get user tv_posts by username (asynchronously)
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
     * @param username Instagram用户名/Instagram username (required)
     * @param paginationToken 分页token/Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_0Async(String username, String paginationToken, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_0ValidateBeforeCall(username, paginationToken, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
