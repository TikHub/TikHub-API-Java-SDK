/*
 * Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HttpValidationError;
import org.openapitools.client.model.ResponseModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HybridParsingApi {
    private ApiClient localVarApiClient;

    public HybridParsingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HybridParsingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for hybridParsingSingleVideoApiV1HybridVideoDataGet
     * @param url  (required)
     * @param minimal 是否返回最小数据/Whether to return minimal data (optional, default to false)
     * @param base64Url 是否Base64编码提交URL/Base64 encoding URL (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridParsingSingleVideoApiV1HybridVideoDataGetCall(String url, Boolean minimal, Boolean base64Url, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/hybrid/video_data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (minimal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minimal", minimal));
        }

        if (base64Url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base64_url", base64Url));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hybridParsingSingleVideoApiV1HybridVideoDataGetValidateBeforeCall(String url, Boolean minimal, Boolean base64Url, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling hybridParsingSingleVideoApiV1HybridVideoDataGet(Async)");
        }
        

        okhttp3.Call localVarCall = hybridParsingSingleVideoApiV1HybridVideoDataGetCall(url, minimal, base64Url, _callback);
        return localVarCall;

    }

    /**
     * 混合解析单一视频接口/Hybrid parsing single video endpoint
     * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - &#x60;url&#x60;: 视频链接、分享链接、分享文本。 ### 返回: - &#x60;data&#x60;: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - &#x60;url&#x60;: Video link, share link, or share text. ### Returns: - &#x60;data&#x60;: Video data.  # [Example] url &#x3D; \&quot;https://v.douyin.com/L4FJNR3/\&quot;
     * @param url  (required)
     * @param minimal 是否返回最小数据/Whether to return minimal data (optional, default to false)
     * @param base64Url 是否Base64编码提交URL/Base64 encoding URL (optional, default to false)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel hybridParsingSingleVideoApiV1HybridVideoDataGet(String url, Boolean minimal, Boolean base64Url) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = hybridParsingSingleVideoApiV1HybridVideoDataGetWithHttpInfo(url, minimal, base64Url);
        return localVarResp.getData();
    }

    /**
     * 混合解析单一视频接口/Hybrid parsing single video endpoint
     * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - &#x60;url&#x60;: 视频链接、分享链接、分享文本。 ### 返回: - &#x60;data&#x60;: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - &#x60;url&#x60;: Video link, share link, or share text. ### Returns: - &#x60;data&#x60;: Video data.  # [Example] url &#x3D; \&quot;https://v.douyin.com/L4FJNR3/\&quot;
     * @param url  (required)
     * @param minimal 是否返回最小数据/Whether to return minimal data (optional, default to false)
     * @param base64Url 是否Base64编码提交URL/Base64 encoding URL (optional, default to false)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> hybridParsingSingleVideoApiV1HybridVideoDataGetWithHttpInfo(String url, Boolean minimal, Boolean base64Url) throws ApiException {
        okhttp3.Call localVarCall = hybridParsingSingleVideoApiV1HybridVideoDataGetValidateBeforeCall(url, minimal, base64Url, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 混合解析单一视频接口/Hybrid parsing single video endpoint (asynchronously)
     * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - &#x60;url&#x60;: 视频链接、分享链接、分享文本。 ### 返回: - &#x60;data&#x60;: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - &#x60;url&#x60;: Video link, share link, or share text. ### Returns: - &#x60;data&#x60;: Video data.  # [Example] url &#x3D; \&quot;https://v.douyin.com/L4FJNR3/\&quot;
     * @param url  (required)
     * @param minimal 是否返回最小数据/Whether to return minimal data (optional, default to false)
     * @param base64Url 是否Base64编码提交URL/Base64 encoding URL (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridParsingSingleVideoApiV1HybridVideoDataGetAsync(String url, Boolean minimal, Boolean base64Url, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = hybridParsingSingleVideoApiV1HybridVideoDataGetValidateBeforeCall(url, minimal, base64Url, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hybridParsingSingleVideoApiV1HybridVideoDataGet_0
     * @param url  (required)
     * @param minimal 是否返回最小数据/Whether to return minimal data (optional, default to false)
     * @param base64Url 是否Base64编码提交URL/Base64 encoding URL (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridParsingSingleVideoApiV1HybridVideoDataGet_0Call(String url, Boolean minimal, Boolean base64Url, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/hybrid/video_data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (minimal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minimal", minimal));
        }

        if (base64Url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base64_url", base64Url));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hybridParsingSingleVideoApiV1HybridVideoDataGet_0ValidateBeforeCall(String url, Boolean minimal, Boolean base64Url, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling hybridParsingSingleVideoApiV1HybridVideoDataGet_0(Async)");
        }
        

        okhttp3.Call localVarCall = hybridParsingSingleVideoApiV1HybridVideoDataGet_0Call(url, minimal, base64Url, _callback);
        return localVarCall;

    }

    /**
     * 混合解析单一视频接口/Hybrid parsing single video endpoint
     * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - &#x60;url&#x60;: 视频链接、分享链接、分享文本。 ### 返回: - &#x60;data&#x60;: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - &#x60;url&#x60;: Video link, share link, or share text. ### Returns: - &#x60;data&#x60;: Video data.  # [Example] url &#x3D; \&quot;https://v.douyin.com/L4FJNR3/\&quot;
     * @param url  (required)
     * @param minimal 是否返回最小数据/Whether to return minimal data (optional, default to false)
     * @param base64Url 是否Base64编码提交URL/Base64 encoding URL (optional, default to false)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel hybridParsingSingleVideoApiV1HybridVideoDataGet_0(String url, Boolean minimal, Boolean base64Url) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = hybridParsingSingleVideoApiV1HybridVideoDataGet_0WithHttpInfo(url, minimal, base64Url);
        return localVarResp.getData();
    }

    /**
     * 混合解析单一视频接口/Hybrid parsing single video endpoint
     * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - &#x60;url&#x60;: 视频链接、分享链接、分享文本。 ### 返回: - &#x60;data&#x60;: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - &#x60;url&#x60;: Video link, share link, or share text. ### Returns: - &#x60;data&#x60;: Video data.  # [Example] url &#x3D; \&quot;https://v.douyin.com/L4FJNR3/\&quot;
     * @param url  (required)
     * @param minimal 是否返回最小数据/Whether to return minimal data (optional, default to false)
     * @param base64Url 是否Base64编码提交URL/Base64 encoding URL (optional, default to false)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> hybridParsingSingleVideoApiV1HybridVideoDataGet_0WithHttpInfo(String url, Boolean minimal, Boolean base64Url) throws ApiException {
        okhttp3.Call localVarCall = hybridParsingSingleVideoApiV1HybridVideoDataGet_0ValidateBeforeCall(url, minimal, base64Url, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 混合解析单一视频接口/Hybrid parsing single video endpoint (asynchronously)
     * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - &#x60;url&#x60;: 视频链接、分享链接、分享文本。 ### 返回: - &#x60;data&#x60;: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - &#x60;url&#x60;: Video link, share link, or share text. ### Returns: - &#x60;data&#x60;: Video data.  # [Example] url &#x3D; \&quot;https://v.douyin.com/L4FJNR3/\&quot;
     * @param url  (required)
     * @param minimal 是否返回最小数据/Whether to return minimal data (optional, default to false)
     * @param base64Url 是否Base64编码提交URL/Base64 encoding URL (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridParsingSingleVideoApiV1HybridVideoDataGet_0Async(String url, Boolean minimal, Boolean base64Url, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = hybridParsingSingleVideoApiV1HybridVideoDataGet_0ValidateBeforeCall(url, minimal, base64Url, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hybridParsingSingleVideoApiV1HybridVideoDataGet_1
     * @param url  (required)
     * @param minimal 是否返回最小数据/Whether to return minimal data (optional, default to false)
     * @param base64Url 是否Base64编码提交URL/Base64 encoding URL (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridParsingSingleVideoApiV1HybridVideoDataGet_1Call(String url, Boolean minimal, Boolean base64Url, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/hybrid/video_data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (minimal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minimal", minimal));
        }

        if (base64Url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("base64_url", base64Url));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hybridParsingSingleVideoApiV1HybridVideoDataGet_1ValidateBeforeCall(String url, Boolean minimal, Boolean base64Url, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling hybridParsingSingleVideoApiV1HybridVideoDataGet_1(Async)");
        }
        

        okhttp3.Call localVarCall = hybridParsingSingleVideoApiV1HybridVideoDataGet_1Call(url, minimal, base64Url, _callback);
        return localVarCall;

    }

    /**
     * 混合解析单一视频接口/Hybrid parsing single video endpoint
     * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - &#x60;url&#x60;: 视频链接、分享链接、分享文本。 ### 返回: - &#x60;data&#x60;: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - &#x60;url&#x60;: Video link, share link, or share text. ### Returns: - &#x60;data&#x60;: Video data.  # [Example] url &#x3D; \&quot;https://v.douyin.com/L4FJNR3/\&quot;
     * @param url  (required)
     * @param minimal 是否返回最小数据/Whether to return minimal data (optional, default to false)
     * @param base64Url 是否Base64编码提交URL/Base64 encoding URL (optional, default to false)
     * @return ResponseModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResponseModel hybridParsingSingleVideoApiV1HybridVideoDataGet_1(String url, Boolean minimal, Boolean base64Url) throws ApiException {
        ApiResponse<ResponseModel> localVarResp = hybridParsingSingleVideoApiV1HybridVideoDataGet_1WithHttpInfo(url, minimal, base64Url);
        return localVarResp.getData();
    }

    /**
     * 混合解析单一视频接口/Hybrid parsing single video endpoint
     * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - &#x60;url&#x60;: 视频链接、分享链接、分享文本。 ### 返回: - &#x60;data&#x60;: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - &#x60;url&#x60;: Video link, share link, or share text. ### Returns: - &#x60;data&#x60;: Video data.  # [Example] url &#x3D; \&quot;https://v.douyin.com/L4FJNR3/\&quot;
     * @param url  (required)
     * @param minimal 是否返回最小数据/Whether to return minimal data (optional, default to false)
     * @param base64Url 是否Base64编码提交URL/Base64 encoding URL (optional, default to false)
     * @return ApiResponse&lt;ResponseModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResponseModel> hybridParsingSingleVideoApiV1HybridVideoDataGet_1WithHttpInfo(String url, Boolean minimal, Boolean base64Url) throws ApiException {
        okhttp3.Call localVarCall = hybridParsingSingleVideoApiV1HybridVideoDataGet_1ValidateBeforeCall(url, minimal, base64Url, null);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 混合解析单一视频接口/Hybrid parsing single video endpoint (asynchronously)
     * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - &#x60;url&#x60;: 视频链接、分享链接、分享文本。 ### 返回: - &#x60;data&#x60;: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - &#x60;url&#x60;: Video link, share link, or share text. ### Returns: - &#x60;data&#x60;: Video data.  # [Example] url &#x3D; \&quot;https://v.douyin.com/L4FJNR3/\&quot;
     * @param url  (required)
     * @param minimal 是否返回最小数据/Whether to return minimal data (optional, default to false)
     * @param base64Url 是否Base64编码提交URL/Base64 encoding URL (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hybridParsingSingleVideoApiV1HybridVideoDataGet_1Async(String url, Boolean minimal, Boolean base64Url, final ApiCallback<ResponseModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = hybridParsingSingleVideoApiV1HybridVideoDataGet_1ValidateBeforeCall(url, minimal, base64Url, _callback);
        Type localVarReturnType = new TypeToken<ResponseModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
