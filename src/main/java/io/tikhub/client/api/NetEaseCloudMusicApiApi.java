/*
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.tikhub.client.api;

import io.tikhub.client.ApiClient;
import io.tikhub.client.ApiException;
import io.tikhub.client.Pair;

import org.openapitools.client.model.HttpValidationError;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;


public class NetEaseCloudMusicApiApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  
  public NetEaseCloudMusicApiApi() {
    this(new ApiClient());
  }

  public NetEaseCloudMusicApiApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  /**
   * 解密POST请求中的16进制payload/Decrypt the 16-bit payload in the POST request
   * # [中文] ### 用途: - 解密网易云音乐APP POST请求中的16进制payload。 ### 参数: - payload: 16进制payload。 ### 返回: - 解密后的payload  # [English] ### Purpose: - Decrypt the 16-bit payload in the POST request of NetEase Cloud Music APP. ### Parameters: - payload: 16-bit payload. ### Returns: - Decrypted payload  # [示例/Example] payload &#x3D; \&quot;4AEEAB033C3F4068DBB74379B8C889D2187585FBBBC7CA1ADA7D10714AA139AE279A615DE7B87483A83A9091ED52D70B70DA02A7FE8A20317AA40F0FF461AC33DB77371E30F9C7F57783E800559AE08DD1E10EFC9CDC69D6815ADCDBF5A7D3006AA3B102FBE7296AB0DB9EA5C46AD12B\&quot;
   * @param body  (optional)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost (String body) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/decrypt_post_payload";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 解密POST请求中的16进制payload/Decrypt the 16-bit payload in the POST request
   * # [中文] ### 用途: - 解密网易云音乐APP POST请求中的16进制payload。 ### 参数: - payload: 16进制payload。 ### 返回: - 解密后的payload  # [English] ### Purpose: - Decrypt the 16-bit payload in the POST request of NetEase Cloud Music APP. ### Parameters: - payload: 16-bit payload. ### Returns: - Decrypted payload  # [示例/Example] payload &#x3D; \&quot;4AEEAB033C3F4068DBB74379B8C889D2187585FBBBC7CA1ADA7D10714AA139AE279A615DE7B87483A83A9091ED52D70B70DA02A7FE8A20317AA40F0FF461AC33DB77371E30F9C7F57783E800559AE08DD1E10EFC9CDC69D6815ADCDBF5A7D3006AA3B102FBE7296AB0DB9EA5C46AD12B\&quot;
   * @param body  (optional)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost_0 (String body) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/decrypt_post_payload";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 加密POST请求中的payload并且返回16进制/Encrypt the payload in the POST request and return 16 hexadecimal
   * # [中文] ### 用途: - 加密POST请求中的payload并且返回16进制。 ### 参数: - payload: 需要加密的payload。 ### 返回: - 加密后的16进制payload  # [English] ### Purpose: - Encrypt the payload in the POST request and return 16 hexadecimal. ### Parameters: - payload: Payload to be encrypted. ### Returns: - Encrypted 16 hexadecimal payload  # [示例/Example] payload &#x3D; {\&quot;id\&quot;: 2135155051, \&quot;br\&quot;: 192000}
   * @param uri 请求URI/Request URI (required)
   * @param addVariable 是否添加变量/Whether to add variables (optional, default to false)
   * @param body  (optional)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost (String uri, Boolean addVariable, Object body) throws ApiException {
    // verify the required parameter 'uri' is set
    if (uri == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uri' when calling encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/encrypt_post_payload";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uri", uri));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("add_variable", addVariable));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 加密POST请求中的payload并且返回16进制/Encrypt the payload in the POST request and return 16 hexadecimal
   * # [中文] ### 用途: - 加密POST请求中的payload并且返回16进制。 ### 参数: - payload: 需要加密的payload。 ### 返回: - 加密后的16进制payload  # [English] ### Purpose: - Encrypt the payload in the POST request and return 16 hexadecimal. ### Parameters: - payload: Payload to be encrypted. ### Returns: - Encrypted 16 hexadecimal payload  # [示例/Example] payload &#x3D; {\&quot;id\&quot;: 2135155051, \&quot;br\&quot;: 192000}
   * @param uri 请求URI/Request URI (required)
   * @param addVariable 是否添加变量/Whether to add variables (optional, default to false)
   * @param body  (optional)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost_0 (String uri, Boolean addVariable, Object body) throws ApiException {
    // verify the required parameter 'uri' is set
    if (uri == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uri' when calling encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/encrypt_post_payload";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uri", uri));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("add_variable", addVariable));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取歌手信息/Fetch artist detail
   * # [中文] ### 用途: - 获取歌手信息。 ### 参数: - artist_id: 歌手ID。 ### 返回: - 歌手信息  # [English] ### Purpose: - Fetch artist detail. ### Parameters: - artist_id: Artist ID. ### Returns: - Artist detail  # [示例/Example] artist_id &#x3D; \&quot;12213291\&quot;
   * @param artistId 歌手ID/Artist ID (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet (String artistId) throws ApiException {
    // verify the required parameter 'artistId' is set
    if (artistId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'artistId' when calling fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_artist_detail";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("artist_id", artistId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取歌手信息/Fetch artist detail
   * # [中文] ### 用途: - 获取歌手信息。 ### 参数: - artist_id: 歌手ID。 ### 返回: - 歌手信息  # [English] ### Purpose: - Fetch artist detail. ### Parameters: - artist_id: Artist ID. ### Returns: - Artist detail  # [示例/Example] artist_id &#x3D; \&quot;12213291\&quot;
   * @param artistId 歌手ID/Artist ID (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet_0 (String artistId) throws ApiException {
    // verify the required parameter 'artistId' is set
    if (artistId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'artistId' when calling fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_artist_detail";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("artist_id", artistId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取歌曲评论/Fetch music comment
   * # [中文] ### 用途: - 获取歌曲评论。 ### 参数: - resource_id: 资源ID，可以是歌曲ID，专辑ID等。 - beforeTime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条评论的时间戳，或者查看返回的Next_Page_beforeTime字段。 - limit: 每页数量，默认为30。 ### 返回: - 歌曲评论  # [English] ### Purpose: - Fetch music comment. ### Parameters: - resource_id: Resource ID, can be song ID, album ID, etc. - beforeTime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last comment returned on the first page on the second page, or check the Next_Page_beforeTime field returned. - limit: Number per page, default is 30. ### Returns: - Music comment  # [示例/Example] resource_id &#x3D; \&quot;2135155051\&quot; beforeTime &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;30\&quot;
   * @param resourceId 资源ID/Resource ID (required)
   * @param beforeTime 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page (optional, default to &quot;&quot;)
   * @param limit 每页数量，保持默认即可/Number per page, keep the default (optional, default to &quot;30&quot;)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet (String resourceId, String beforeTime, String limit) throws ApiException {
    // verify the required parameter 'resourceId' is set
    if (resourceId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'resourceId' when calling fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_music_comment";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("resource_id", resourceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("beforeTime", beforeTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取歌曲评论/Fetch music comment
   * # [中文] ### 用途: - 获取歌曲评论。 ### 参数: - resource_id: 资源ID，可以是歌曲ID，专辑ID等。 - beforeTime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条评论的时间戳，或者查看返回的Next_Page_beforeTime字段。 - limit: 每页数量，默认为30。 ### 返回: - 歌曲评论  # [English] ### Purpose: - Fetch music comment. ### Parameters: - resource_id: Resource ID, can be song ID, album ID, etc. - beforeTime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last comment returned on the first page on the second page, or check the Next_Page_beforeTime field returned. - limit: Number per page, default is 30. ### Returns: - Music comment  # [示例/Example] resource_id &#x3D; \&quot;2135155051\&quot; beforeTime &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;30\&quot;
   * @param resourceId 资源ID/Resource ID (required)
   * @param beforeTime 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page (optional, default to &quot;&quot;)
   * @param limit 每页数量，保持默认即可/Number per page, keep the default (optional, default to &quot;30&quot;)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet_0 (String resourceId, String beforeTime, String limit) throws ApiException {
    // verify the required parameter 'resourceId' is set
    if (resourceId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'resourceId' when calling fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_music_comment";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("resource_id", resourceId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("beforeTime", beforeTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * Mlog（音乐视频）播放地址/Mlog (music video) playback address
   * # [中文] ### 用途: - 获取Mlog（音乐视频）播放地址。 ### 参数: - mlogId: Mlog ID，可以在APP中点击分享按钮获取链接，链接中包含mlogId。 - resolution: 分辨率，默认为1080，保持默认即可。 ### 返回: - Mlog播放地址（有时候会有水印，根据视频源而定。）  # [English] ### Purpose: - Fetch Mlog (music video) playback address. ### Parameters: - mlogId: Mlog ID, you can get the link by clicking the share button in the APP, the link contains mlogId. - resolution: Resolution, default is 1080, keep the default. ### Returns: - Mlog playback address (sometimes there will be a watermark, depending on the video source.)  # [示例/Example] &gt; 分享链接/Share link: https://fn.music.163.com/g/mlog/mlog-mobile/landing/mlog?id&#x3D;a1qQQOQNVueO2g7&amp;type&#x3D;2 mlogId &#x3D; \&quot;a1qQQOQNVueO2g7\&quot;
   * @param mlogId Mlog ID/Mlog ID (required)
   * @param resolution 分辨率/Resolution (optional, default to &quot;1080&quot;)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet (String mlogId, String resolution) throws ApiException {
    // verify the required parameter 'mlogId' is set
    if (mlogId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'mlogId' when calling fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_music_log_video_url";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mlogId", mlogId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("resolution", resolution));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * Mlog（音乐视频）播放地址/Mlog (music video) playback address
   * # [中文] ### 用途: - 获取Mlog（音乐视频）播放地址。 ### 参数: - mlogId: Mlog ID，可以在APP中点击分享按钮获取链接，链接中包含mlogId。 - resolution: 分辨率，默认为1080，保持默认即可。 ### 返回: - Mlog播放地址（有时候会有水印，根据视频源而定。）  # [English] ### Purpose: - Fetch Mlog (music video) playback address. ### Parameters: - mlogId: Mlog ID, you can get the link by clicking the share button in the APP, the link contains mlogId. - resolution: Resolution, default is 1080, keep the default. ### Returns: - Mlog playback address (sometimes there will be a watermark, depending on the video source.)  # [示例/Example] &gt; 分享链接/Share link: https://fn.music.163.com/g/mlog/mlog-mobile/landing/mlog?id&#x3D;a1qQQOQNVueO2g7&amp;type&#x3D;2 mlogId &#x3D; \&quot;a1qQQOQNVueO2g7\&quot;
   * @param mlogId Mlog ID/Mlog ID (required)
   * @param resolution 分辨率/Resolution (optional, default to &quot;1080&quot;)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet_0 (String mlogId, String resolution) throws ApiException {
    // verify the required parameter 'mlogId' is set
    if (mlogId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'mlogId' when calling fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_music_log_video_url";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mlogId", mlogId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("resolution", resolution));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单一歌曲歌词/Fetch one music lyric
   * # [中文] ### 用途: - 获取单个音乐歌词。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐歌词  # [English] ### Purpose: - Fetch single music lyric. ### Parameters: - music_id: Music ID ### Returns: - Music lyric  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot;
   * @param musicId 歌曲ID/Music ID (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet (String musicId) throws ApiException {
    // verify the required parameter 'musicId' is set
    if (musicId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'musicId' when calling fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_one_music_lyric";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("music_id", musicId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单一歌曲歌词/Fetch one music lyric
   * # [中文] ### 用途: - 获取单个音乐歌词。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐歌词  # [English] ### Purpose: - Fetch single music lyric. ### Parameters: - music_id: Music ID ### Returns: - Music lyric  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot;
   * @param musicId 歌曲ID/Music ID (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet_0 (String musicId) throws ApiException {
    // verify the required parameter 'musicId' is set
    if (musicId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'musicId' when calling fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_one_music_lyric";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("music_id", musicId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单一歌曲播放地址V1（只能返回MP3格式，支持参数较少）/Fetch one music URL V1 (only MP3 format is supported, with fewer parameters)
   * # [中文] ### 用途: - 获取单个音乐播放地址，此接口只能返回MP3格式的音频文件链接。 ### 参数: - music_id: 音乐ID - br: 音质码率，分四个等级，128000,192000,320000,999000 ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface can only return MP3 format audio file link. ### Parameters: - music_id: Music ID - br: Bitrate, divided into four levels, 128000,192000,320000,999000 ### Returns: - Music URL  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot; br &#x3D; \&quot;192000\&quot;
   * @param musicId 歌曲ID/Music ID (required)
   * @param br 音质码率/Bitrate (optional, default to &quot;192000&quot;)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get (String musicId, String br) throws ApiException {
    // verify the required parameter 'musicId' is set
    if (musicId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'musicId' when calling fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_one_music_url_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("music_id", musicId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("br", br));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单一歌曲播放地址V1（只能返回MP3格式，支持参数较少）/Fetch one music URL V1 (only MP3 format is supported, with fewer parameters)
   * # [中文] ### 用途: - 获取单个音乐播放地址，此接口只能返回MP3格式的音频文件链接。 ### 参数: - music_id: 音乐ID - br: 音质码率，分四个等级，128000,192000,320000,999000 ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface can only return MP3 format audio file link. ### Parameters: - music_id: Music ID - br: Bitrate, divided into four levels, 128000,192000,320000,999000 ### Returns: - Music URL  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot; br &#x3D; \&quot;192000\&quot;
   * @param musicId 歌曲ID/Music ID (required)
   * @param br 音质码率/Bitrate (optional, default to &quot;192000&quot;)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get_0 (String musicId, String br) throws ApiException {
    // verify the required parameter 'musicId' is set
    if (musicId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'musicId' when calling fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_one_music_url_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("music_id", musicId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("br", br));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单一歌曲播放地址V2（支持更多参数）/Fetch one music URL V2 (support more parameters)
   * # [中文] ### 用途: - 获取单个音乐播放地址，此接口支持更多参数。 ### 参数: - music_id: 音乐ID - level: 音质等级，分五个等级，标准，较高，极高，无损，hires，后两个等级不一定有支持的音源。     - 标准：standard     - 较高：higher     - 极高：exhigh     - 无损：lossLess     - hires：hires - encodeType: 编码类型，分六种类型。     - aac：aac     - mp3：mp3（默认）     - flac：flac     - alac：alac     - ape：ape     - wav：wav ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface supports more parameters. ### Parameters: - music_id: Music ID - level: Quality level, divided into five levels, standard, higher, exhigh, lossLess, hires, the last two levels may not have supported audio sources.     - standard     - higher     - exhigh     - lossLess     - hires - encodeType: Encoding type, divided into six types.     - aac     - mp3 (default)     - flac     - alac     - ape     - wav ### Returns: - Music URL  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot; level &#x3D; \&quot;exhigh\&quot; encodeType &#x3D; \&quot;mp3\&quot;
   * @param musicId 歌曲ID/Music ID (required)
   * @param level 音质等级/Quality level (optional, default to &quot;exhigh&quot;)
   * @param encodeType 编码类型/Encoding type (optional, default to &quot;mp3&quot;)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get (String musicId, String level, String encodeType) throws ApiException {
    // verify the required parameter 'musicId' is set
    if (musicId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'musicId' when calling fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_one_music_url_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("music_id", musicId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("level", level));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("encodeType", encodeType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单一歌曲播放地址V2（支持更多参数）/Fetch one music URL V2 (support more parameters)
   * # [中文] ### 用途: - 获取单个音乐播放地址，此接口支持更多参数。 ### 参数: - music_id: 音乐ID - level: 音质等级，分五个等级，标准，较高，极高，无损，hires，后两个等级不一定有支持的音源。     - 标准：standard     - 较高：higher     - 极高：exhigh     - 无损：lossLess     - hires：hires - encodeType: 编码类型，分六种类型。     - aac：aac     - mp3：mp3（默认）     - flac：flac     - alac：alac     - ape：ape     - wav：wav ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface supports more parameters. ### Parameters: - music_id: Music ID - level: Quality level, divided into five levels, standard, higher, exhigh, lossLess, hires, the last two levels may not have supported audio sources.     - standard     - higher     - exhigh     - lossLess     - hires - encodeType: Encoding type, divided into six types.     - aac     - mp3 (default)     - flac     - alac     - ape     - wav ### Returns: - Music URL  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot; level &#x3D; \&quot;exhigh\&quot; encodeType &#x3D; \&quot;mp3\&quot;
   * @param musicId 歌曲ID/Music ID (required)
   * @param level 音质等级/Quality level (optional, default to &quot;exhigh&quot;)
   * @param encodeType 编码类型/Encoding type (optional, default to &quot;mp3&quot;)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get_0 (String musicId, String level, String encodeType) throws ApiException {
    // verify the required parameter 'musicId' is set
    if (musicId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'musicId' when calling fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_one_music_url_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("music_id", musicId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("level", level));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("encodeType", encodeType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单一歌曲信息V1（信息更全）| Fetch one music information V1 (more information)
   * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot;
   * @param musicId 歌曲ID/Music ID (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get (String musicId) throws ApiException {
    // verify the required parameter 'musicId' is set
    if (musicId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'musicId' when calling fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_one_music_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("music_id", musicId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单一歌曲信息V1（信息更全）| Fetch one music information V1 (more information)
   * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot;
   * @param musicId 歌曲ID/Music ID (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get_0 (String musicId) throws ApiException {
    // verify the required parameter 'musicId' is set
    if (musicId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'musicId' when calling fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_one_music_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("music_id", musicId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单一歌曲信息V2（信息更少）| Fetch one music information V2 (less information)
   * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot;
   * @param musicId 歌曲ID/Music ID (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get (String musicId) throws ApiException {
    // verify the required parameter 'musicId' is set
    if (musicId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'musicId' when calling fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_one_music_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("music_id", musicId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单一歌曲信息V2（信息更少）| Fetch one music information V2 (less information)
   * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id &#x3D; \&quot;2135155051\&quot;
   * @param musicId 歌曲ID/Music ID (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get_0 (String musicId) throws ApiException {
    // verify the required parameter 'musicId' is set
    if (musicId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'musicId' when calling fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_one_music_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("music_id", musicId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户动态/Fetch user event
   * # [中文] ### 用途: - 获取用户动态。 ### 参数: - uid: 用户ID。 - _time: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_time字段。 - limit: 每页数量，默认为10。 ### 返回: - 用户动态  # [English] ### Purpose: - Fetch user event. ### Parameters: - uid: User ID. - _time: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_time field returned. - limit: Number per page, default is 10. ### Returns: - User event  # [示例/Example] uid &#x3D; \&quot;254132915\&quot; _time &#x3D; \&quot;-1\&quot; limit &#x3D; \&quot;10\&quot;
   * @param uid 用户ID/User ID (required)
   * @param time 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page (optional, default to &quot;-1&quot;)
   * @param limit 每页数量，保持默认即可/Number per page, keep the default (optional, default to &quot;10&quot;)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet (String uid, String time, String limit) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uid' when calling fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_user_event";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uid", uid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_time", time));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户动态/Fetch user event
   * # [中文] ### 用途: - 获取用户动态。 ### 参数: - uid: 用户ID。 - _time: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_time字段。 - limit: 每页数量，默认为10。 ### 返回: - 用户动态  # [English] ### Purpose: - Fetch user event. ### Parameters: - uid: User ID. - _time: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_time field returned. - limit: Number per page, default is 10. ### Returns: - User event  # [示例/Example] uid &#x3D; \&quot;254132915\&quot; _time &#x3D; \&quot;-1\&quot; limit &#x3D; \&quot;10\&quot;
   * @param uid 用户ID/User ID (required)
   * @param time 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page (optional, default to &quot;-1&quot;)
   * @param limit 每页数量，保持默认即可/Number per page, keep the default (optional, default to &quot;10&quot;)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet_0 (String uid, String time, String limit) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uid' when calling fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_user_event";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uid", uid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_time", time));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户粉丝列表/Fetch user followers
   * # [中文] ### 用途: - 获取用户粉丝列表。 ### 参数: - uid: 用户ID。 - lasttime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_lasttime字段。 - pagesize: 每页数量，保持默认即可。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Fetch user followers. ### Parameters: - uid: User ID. - lasttime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_lasttime field returned. - pagesize: Number per page, keep the default. ### Returns: - User followers list  # [示例/Example] uid &#x3D; \&quot;254132915\&quot; lasttime &#x3D; \&quot;0\&quot; pagesize &#x3D; \&quot;20\&quot;
   * @param uid 用户ID/User ID (required)
   * @param lasttime 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page (optional, default to &quot;0&quot;)
   * @param pagesize 每页数量，保持默认即可/Number per page, keep the default (optional, default to &quot;20&quot;)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet (String uid, String lasttime, String pagesize) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uid' when calling fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_user_followers";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uid", uid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lasttime", lasttime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pagesize", pagesize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户粉丝列表/Fetch user followers
   * # [中文] ### 用途: - 获取用户粉丝列表。 ### 参数: - uid: 用户ID。 - lasttime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_lasttime字段。 - pagesize: 每页数量，保持默认即可。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Fetch user followers. ### Parameters: - uid: User ID. - lasttime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_lasttime field returned. - pagesize: Number per page, keep the default. ### Returns: - User followers list  # [示例/Example] uid &#x3D; \&quot;254132915\&quot; lasttime &#x3D; \&quot;0\&quot; pagesize &#x3D; \&quot;20\&quot;
   * @param uid 用户ID/User ID (required)
   * @param lasttime 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page (optional, default to &quot;0&quot;)
   * @param pagesize 每页数量，保持默认即可/Number per page, keep the default (optional, default to &quot;20&quot;)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet_0 (String uid, String lasttime, String pagesize) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uid' when calling fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_user_followers";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uid", uid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lasttime", lasttime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pagesize", pagesize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户关注列表/Fetch user follows
   * # [中文] ### 用途: - 获取用户关注列表。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Fetch user follows. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User follows list  # [示例/Example] uid &#x3D; \&quot;254132915\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
   * @param uid 用户ID/User ID (required)
   * @param offset 偏移量，保持默认即可/Offset, keep the default (optional, default to &quot;0&quot;)
   * @param limit 每页数量，保持默认即可/Number per page, keep the default (optional, default to &quot;20&quot;)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet (String uid, String offset, String limit) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uid' when calling fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_user_follows";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uid", uid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户关注列表/Fetch user follows
   * # [中文] ### 用途: - 获取用户关注列表。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Fetch user follows. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User follows list  # [示例/Example] uid &#x3D; \&quot;254132915\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
   * @param uid 用户ID/User ID (required)
   * @param offset 偏移量，保持默认即可/Offset, keep the default (optional, default to &quot;0&quot;)
   * @param limit 每页数量，保持默认即可/Number per page, keep the default (optional, default to &quot;20&quot;)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet_0 (String uid, String offset, String limit) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uid' when calling fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_user_follows";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uid", uid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户信息/Get user information
   * # [中文] ### 用途: - 获取用户信息。 ### 参数: - uid: 用户ID。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information. ### Parameters: - uid: User ID. ### Returns: - User information  # [示例/Example] uid &#x3D; \&quot;254132915\&quot;
   * @param uid 用户ID/User ID (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet (String uid) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uid' when calling fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_user_info";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uid", uid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户信息/Get user information
   * # [中文] ### 用途: - 获取用户信息。 ### 参数: - uid: 用户ID。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information. ### Parameters: - uid: User ID. ### Returns: - User information  # [示例/Example] uid &#x3D; \&quot;254132915\&quot;
   * @param uid 用户ID/User ID (required)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet_0 (String uid) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uid' when calling fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_user_info";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uid", uid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户歌单/Get user playlist
   * # [中文] ### 用途: - 获取用户歌单。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户歌单  # [English] ### Purpose: - Get user playlist. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User playlist  # [示例/Example] uid &#x3D; \&quot;254132915\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
   * @param uid 用户ID/User ID (required)
   * @param offset 偏移量，保持默认即可/Offset, keep the default (optional, default to &quot;0&quot;)
   * @param limit 每页数量，保持默认即可/Number per page, keep the default (optional, default to &quot;20&quot;)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet (String uid, String offset, String limit) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uid' when calling fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_user_playlist";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uid", uid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户歌单/Get user playlist
   * # [中文] ### 用途: - 获取用户歌单。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户歌单  # [English] ### Purpose: - Get user playlist. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User playlist  # [示例/Example] uid &#x3D; \&quot;254132915\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
   * @param uid 用户ID/User ID (required)
   * @param offset 偏移量，保持默认即可/Offset, keep the default (optional, default to &quot;0&quot;)
   * @param limit 每页数量，保持默认即可/Number per page, keep the default (optional, default to &quot;20&quot;)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet_0 (String uid, String offset, String limit) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uid' when calling fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/fetch_user_playlist";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uid", uid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 搜索接口V1/Search interface V1
   * # [中文] ### 用途: - 搜索接口V1。 ### 参数: - keywords: 关键词。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 - _type: 搜索类型     **搜索类型 (&#x60;type&#x60;)**：     * 单曲搜索：&#x60;\&quot;type\&quot;:\&quot;1\&quot;&#x60;     * 歌手搜索：&#x60;\&quot;type\&quot;:\&quot;100\&quot;&#x60;     * 专辑搜索：&#x60;\&quot;type\&quot;:\&quot;10\&quot;&#x60;     * 歌单搜索：&#x60;\&quot;type\&quot;:\&quot;1000\&quot;&#x60;     * MV搜索：&#x60;\&quot;type\&quot;:\&quot;1004\&quot;&#x60;     * 主播电台搜索：&#x60;\&quot;type\&quot;:\&quot;1009\&quot;&#x60;     * 用户搜索：&#x60;\&quot;type\&quot;:\&quot;1002\&quot;&#x60; ### 返回: - 搜索结果  # [English] ### Purpose: - Search interface V1. ### Parameters: - keywords: Keywords. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. - _type: Search type     **Search type (&#x60;type&#x60;)**:     * Single search: &#x60;\&quot;type\&quot;:\&quot;1\&quot;&#x60;     * Singer search: &#x60;\&quot;type\&quot;:\&quot;100\&quot;&#x60;     * Album search: &#x60;\&quot;type\&quot;:\&quot;10\&quot;&#x60;     * Playlist search: &#x60;\&quot;type\&quot;:\&quot;1000\&quot;&#x60;     * MV search: &#x60;\&quot;type\&quot;:\&quot;1004\&quot;&#x60;     * Anchor radio search: &#x60;\&quot;type\&quot;:\&quot;1009\&quot;&#x60;     * User search: &#x60;\&quot;type\&quot;:\&quot;1002\&quot;&#x60; ### Returns: - Search results  # [示例/Example] keywords &#x3D; \&quot;周杰伦\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot; _type &#x3D; \&quot;1\&quot;
   * @param keywords 关键词/Keywords (required)
   * @param offset 偏移量，保持默认即可/Offset, keep the default (optional, default to &quot;0&quot;)
   * @param limit 每页数量，保持默认即可/Number per page, keep the default (optional, default to &quot;20&quot;)
   * @param type 搜索类型/Search type (optional, default to &quot;1&quot;)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> searchV1ApiV1NetEaseCloudMusicAppSearchV1Get (String keywords, String offset, String limit, String type) throws ApiException {
    // verify the required parameter 'keywords' is set
    if (keywords == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keywords' when calling searchV1ApiV1NetEaseCloudMusicAppSearchV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/search_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keywords", keywords));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "searchV1ApiV1NetEaseCloudMusicAppSearchV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 搜索接口V1/Search interface V1
   * # [中文] ### 用途: - 搜索接口V1。 ### 参数: - keywords: 关键词。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 - _type: 搜索类型     **搜索类型 (&#x60;type&#x60;)**：     * 单曲搜索：&#x60;\&quot;type\&quot;:\&quot;1\&quot;&#x60;     * 歌手搜索：&#x60;\&quot;type\&quot;:\&quot;100\&quot;&#x60;     * 专辑搜索：&#x60;\&quot;type\&quot;:\&quot;10\&quot;&#x60;     * 歌单搜索：&#x60;\&quot;type\&quot;:\&quot;1000\&quot;&#x60;     * MV搜索：&#x60;\&quot;type\&quot;:\&quot;1004\&quot;&#x60;     * 主播电台搜索：&#x60;\&quot;type\&quot;:\&quot;1009\&quot;&#x60;     * 用户搜索：&#x60;\&quot;type\&quot;:\&quot;1002\&quot;&#x60; ### 返回: - 搜索结果  # [English] ### Purpose: - Search interface V1. ### Parameters: - keywords: Keywords. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. - _type: Search type     **Search type (&#x60;type&#x60;)**:     * Single search: &#x60;\&quot;type\&quot;:\&quot;1\&quot;&#x60;     * Singer search: &#x60;\&quot;type\&quot;:\&quot;100\&quot;&#x60;     * Album search: &#x60;\&quot;type\&quot;:\&quot;10\&quot;&#x60;     * Playlist search: &#x60;\&quot;type\&quot;:\&quot;1000\&quot;&#x60;     * MV search: &#x60;\&quot;type\&quot;:\&quot;1004\&quot;&#x60;     * Anchor radio search: &#x60;\&quot;type\&quot;:\&quot;1009\&quot;&#x60;     * User search: &#x60;\&quot;type\&quot;:\&quot;1002\&quot;&#x60; ### Returns: - Search results  # [示例/Example] keywords &#x3D; \&quot;周杰伦\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot; _type &#x3D; \&quot;1\&quot;
   * @param keywords 关键词/Keywords (required)
   * @param offset 偏移量，保持默认即可/Offset, keep the default (optional, default to &quot;0&quot;)
   * @param limit 每页数量，保持默认即可/Number per page, keep the default (optional, default to &quot;20&quot;)
   * @param type 搜索类型/Search type (optional, default to &quot;1&quot;)
   * @return String
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<String> searchV1ApiV1NetEaseCloudMusicAppSearchV1Get_0 (String keywords, String offset, String limit, String type) throws ApiException {
    // verify the required parameter 'keywords' is set
    if (keywords == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keywords' when calling searchV1ApiV1NetEaseCloudMusicAppSearchV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/net_ease_cloud_music/app/search_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keywords", keywords));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_type", type));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "searchV1ApiV1NetEaseCloudMusicAppSearchV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
}
