/*
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.tikhub.client.api;

import io.tikhub.client.ApiClient;
import io.tikhub.client.ApiException;
import io.tikhub.client.Pair;

import org.openapitools.client.model.BodyFetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost;
import org.openapitools.client.model.BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost;
import org.openapitools.client.model.BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost;
import org.openapitools.client.model.BodyFetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost;
import org.openapitools.client.model.BodyFetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost;
import org.openapitools.client.model.BodyFetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost;
import org.openapitools.client.model.BodyFetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost;
import org.openapitools.client.model.BodyFetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost;
import org.openapitools.client.model.BodyFetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost;
import org.openapitools.client.model.BodyFetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost;
import org.openapitools.client.model.BodyFetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost;
import org.openapitools.client.model.BodyFetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost;
import org.openapitools.client.model.HttpValidationError;
import org.openapitools.client.model.ResponseModel;
import org.openapitools.client.model.UNKNOWN_BASE_TYPE;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;


public class DouyinBillboardApiApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  
  public DouyinBillboardApiApi() {
    this(new ApiClient());
  }

  public DouyinBillboardApiApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  /**
   * 获取中国城市列表
   * # [中文] ### 用途: - 获取城市列表 ### 参数: - 无 ### 返回: - 中国城市列表  # [English] ### Purpose: - Get city list ### Parameters: - None ### Return: - Chinese city list
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchCityListApiV1DouyinBillboardFetchCityListGet () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_city_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchCityListApiV1DouyinBillboardFetchCityListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取中国城市列表
   * # [中文] ### 用途: - 获取城市列表 ### 参数: - 无 ### 返回: - 中国城市列表  # [English] ### Purpose: - Get city list ### Parameters: - None ### Return: - Chinese city list
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchCityListApiV1DouyinBillboardFetchCityListGet_0 () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_city_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchCityListApiV1DouyinBillboardFetchCityListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取垂类内容标签
   * # [中文] ### 用途: - 获取垂类内容标签 ### 参数: - 无 ### 返回: - 垂类内容标签 ### 注意: - 该接口用于获取垂类内容标签，用于query_tag参数构建 ### 示例: 已知顶级垂类内容标签 &#x60;美食&#x60;，它的顶级垂类id为 &#x60;628&#x60;；&#x60;美食&#x60; 的子垂类标签 &#x60;品酒教学&#x60;，它的子垂类id为 &#x60;62802&#x60;。 那么构建标签查询参数为 &#x60;{\&quot;value\&quot;: 628, \&quot;children\&quot;: [{\&quot;value\&quot;: 62808}]}&#x60;  如果需要多个子垂类标签，所有的美食子垂类标签为 &#x60;{\&quot;value\&quot;:628,\&quot;children\&quot;:[{\&quot;value\&quot;:62808},{\&quot;value\&quot;:62804},{\&quot;value\&quot;:62806},{\&quot;value\&quot;:62803},{\&quot;value\&quot;:62802},{\&quot;value\&quot;:62801},{\&quot;value\&quot;:62811},{\&quot;value\&quot;:62807},{\&quot;value\&quot;:62805},{\&quot;value\&quot;:62810}]}&#x60;  # [English] ### Purpose: - Get vertical content tags ### Parameters: - None ### Return: - Vertical content tags ### Note: - This interface is used to obtain vertical content tags, used to construct the query_tag parameter ### Example: Given the top-level vertical content tag &#x60;Food&#x60;, its top-level vertical id is &#x60;628&#x60;; &#x60;Food&#x60;&#39;s sub-vertical tag &#x60;Wine Tasting&#x60;, its sub-vertical id is &#x60;62802&#x60;. Then the constructed tag query parameter is &#x60;{\&quot;value\&quot;: 628, \&quot;children\&quot;: [{\&quot;value\&quot;: 62808}]}&#x60;  If you need multiple sub-vertical tags, all food sub-vertical tags are &#x60;{\&quot;value\&quot;:628,\&quot;children\&quot;:[{\&quot;value\&quot;:62808},{\&quot;value\&quot;:62804},{\&quot;value\&quot;:62806},{\&quot;value\&quot;:62803},{\&quot;value\&quot;:62802},{\&quot;value\&quot;:62801},{\&quot;value\&quot;:62811},{\&quot;value\&quot;:62807},{\&quot;value\&quot;:62805},{\&quot;value\&quot;:62810}]}&#x60;
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchContentTagApiV1DouyinBillboardFetchContentTagGet () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_content_tag";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchContentTagApiV1DouyinBillboardFetchContentTagGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取垂类内容标签
   * # [中文] ### 用途: - 获取垂类内容标签 ### 参数: - 无 ### 返回: - 垂类内容标签 ### 注意: - 该接口用于获取垂类内容标签，用于query_tag参数构建 ### 示例: 已知顶级垂类内容标签 &#x60;美食&#x60;，它的顶级垂类id为 &#x60;628&#x60;；&#x60;美食&#x60; 的子垂类标签 &#x60;品酒教学&#x60;，它的子垂类id为 &#x60;62802&#x60;。 那么构建标签查询参数为 &#x60;{\&quot;value\&quot;: 628, \&quot;children\&quot;: [{\&quot;value\&quot;: 62808}]}&#x60;  如果需要多个子垂类标签，所有的美食子垂类标签为 &#x60;{\&quot;value\&quot;:628,\&quot;children\&quot;:[{\&quot;value\&quot;:62808},{\&quot;value\&quot;:62804},{\&quot;value\&quot;:62806},{\&quot;value\&quot;:62803},{\&quot;value\&quot;:62802},{\&quot;value\&quot;:62801},{\&quot;value\&quot;:62811},{\&quot;value\&quot;:62807},{\&quot;value\&quot;:62805},{\&quot;value\&quot;:62810}]}&#x60;  # [English] ### Purpose: - Get vertical content tags ### Parameters: - None ### Return: - Vertical content tags ### Note: - This interface is used to obtain vertical content tags, used to construct the query_tag parameter ### Example: Given the top-level vertical content tag &#x60;Food&#x60;, its top-level vertical id is &#x60;628&#x60;; &#x60;Food&#x60;&#39;s sub-vertical tag &#x60;Wine Tasting&#x60;, its sub-vertical id is &#x60;62802&#x60;. Then the constructed tag query parameter is &#x60;{\&quot;value\&quot;: 628, \&quot;children\&quot;: [{\&quot;value\&quot;: 62808}]}&#x60;  If you need multiple sub-vertical tags, all food sub-vertical tags are &#x60;{\&quot;value\&quot;:628,\&quot;children\&quot;:[{\&quot;value\&quot;:62808},{\&quot;value\&quot;:62804},{\&quot;value\&quot;:62806},{\&quot;value\&quot;:62803},{\&quot;value\&quot;:62802},{\&quot;value\&quot;:62801},{\&quot;value\&quot;:62811},{\&quot;value\&quot;:62807},{\&quot;value\&quot;:62805},{\&quot;value\&quot;:62810}]}&#x60;
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchContentTagApiV1DouyinBillboardFetchContentTagGet_0 () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_content_tag";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchContentTagApiV1DouyinBillboardFetchContentTagGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取粉丝兴趣作者 20个用户
   * # [中文] ### 用途: - 获取粉丝兴趣作者 20个用户 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝兴趣作者 20个用户  # [English] ### Purpose: - Get the fan interest author 20 users ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest author 20 users
   * @param secUid 用户sec_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet (String secUid) throws ApiException {
    // verify the required parameter 'secUid' is set
    if (secUid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUid' when calling fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_account_fans_interest_account_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_uid", secUid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取粉丝兴趣作者 20个用户
   * # [中文] ### 用途: - 获取粉丝兴趣作者 20个用户 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝兴趣作者 20个用户  # [English] ### Purpose: - Get the fan interest author 20 users ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest author 20 users
   * @param secUid 用户sec_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet_0 (String secUid) throws ApiException {
    // verify the required parameter 'secUid' is set
    if (secUid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUid' when calling fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_account_fans_interest_account_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_uid", secUid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取粉丝近3天搜索词 10个搜索词
   * # [中文] ### 用途: - 获取粉丝近3天搜索词 10个搜索词 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天搜索词 10个搜索词  # [English] ### Purpose: - Get the fan interest search term in the last 3 days 10 search terms ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest search term in the last 3 days 10 search terms
   * @param secUid 用户sec_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet (String secUid) throws ApiException {
    // verify the required parameter 'secUid' is set
    if (secUid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUid' when calling fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_account_fans_interest_search_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_uid", secUid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取粉丝近3天搜索词 10个搜索词
   * # [中文] ### 用途: - 获取粉丝近3天搜索词 10个搜索词 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天搜索词 10个搜索词  # [English] ### Purpose: - Get the fan interest search term in the last 3 days 10 search terms ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest search term in the last 3 days 10 search terms
   * @param secUid 用户sec_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet_0 (String secUid) throws ApiException {
    // verify the required parameter 'secUid' is set
    if (secUid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUid' when calling fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_account_fans_interest_search_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_uid", secUid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取粉丝近3天感兴趣的话题 10个话题
   * # [中文] ### 用途: - 获取粉丝近3天感兴趣的话题 10个话题 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天感兴趣的话题 10个话题  # [English] ### Purpose: - Get the fan interest topic in the last 3 days 10 topics ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest topic in the last 3 days 10 topics
   * @param secUid 用户sec_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet (String secUid) throws ApiException {
    // verify the required parameter 'secUid' is set
    if (secUid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUid' when calling fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_account_fans_interest_topic_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_uid", secUid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取粉丝近3天感兴趣的话题 10个话题
   * # [中文] ### 用途: - 获取粉丝近3天感兴趣的话题 10个话题 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天感兴趣的话题 10个话题  # [English] ### Purpose: - Get the fan interest topic in the last 3 days 10 topics ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest topic in the last 3 days 10 topics
   * @param secUid 用户sec_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet_0 (String secUid) throws ApiException {
    // verify the required parameter 'secUid' is set
    if (secUid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUid' when calling fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_account_fans_interest_topic_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_uid", secUid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取粉丝画像
   * # [中文] ### 用途: - 获取粉丝画像 ### 参数: - sec_uid: 用户sec_id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比 ### 返回: - 粉丝画像  # [English] ### Purpose: - Get the fan portrait ### Parameters: - sec_uid: User sec_id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution     - 8 Interest tag analysis percentage ### Return: - Fan portrait
   * @param secUid 用户sec_id (required)
   * @param option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比 (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet (String secUid, String option) throws ApiException {
    // verify the required parameter 'secUid' is set
    if (secUid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUid' when calling fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet"));
    }
    // verify the required parameter 'option' is set
    if (option == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'option' when calling fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_account_fans_portrait_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_uid", secUid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("option", option));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取粉丝画像
   * # [中文] ### 用途: - 获取粉丝画像 ### 参数: - sec_uid: 用户sec_id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比 ### 返回: - 粉丝画像  # [English] ### Purpose: - Get the fan portrait ### Parameters: - sec_uid: User sec_id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution     - 8 Interest tag analysis percentage ### Return: - Fan portrait
   * @param secUid 用户sec_id (required)
   * @param option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比 (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet_0 (String secUid, String option) throws ApiException {
    // verify the required parameter 'secUid' is set
    if (secUid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUid' when calling fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet_0"));
    }
    // verify the required parameter 'option' is set
    if (option == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'option' when calling fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_account_fans_portrait_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_uid", secUid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("option", option));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取账号作品分析-上周
   * # [中文] ### 用途: - 获取账号作品分析 ### 参数: - sec_uid: 用户sec_id - day: 天数，默认7天 ### 返回: - 账号作品分析  # [English] ### Purpose: - Get the account work analysis ### Parameters: - sec_uid: User sec_id - day: Number of days, default 7 days ### Return: - Account work analysis
   * @param secUid 用户sec_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet (String secUid) throws ApiException {
    // verify the required parameter 'secUid' is set
    if (secUid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUid' when calling fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_account_item_analysis_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_uid", secUid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取账号作品分析-上周
   * # [中文] ### 用途: - 获取账号作品分析 ### 参数: - sec_uid: 用户sec_id - day: 天数，默认7天 ### 返回: - 账号作品分析  # [English] ### Purpose: - Get the account work analysis ### Parameters: - sec_uid: User sec_id - day: Number of days, default 7 days ### Return: - Account work analysis
   * @param secUid 用户sec_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet_0 (String secUid) throws ApiException {
    // verify the required parameter 'secUid' is set
    if (secUid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUid' when calling fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_account_item_analysis_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_uid", secUid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取热门账号
   * # [中文] ### 用途: - 获取热门账号 ### 参数: - date_window: 时间窗口，格式 小时，默认24小时 - page_num: 页码，默认1 - page_size: 每页数量，默认20 - query_tag: 子级垂类标签，空则为全部，多个标签需传入 {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [     {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},     {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;} ]} ### 返回: - 热门账号  # [English] ### Purpose: - Get the hot account ### Parameters: - date_window: Time window, format hour, default 24 hours - page_num: Page number, default 1 - page_size: Number of items per page, default 20 - query_tag: Sub-level vertical category tag, empty for all, multiple tags need to be passed in {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [     {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},     {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;} ]} ### Return: - Hot account
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_account_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取热门账号
   * # [中文] ### 用途: - 获取热门账号 ### 参数: - date_window: 时间窗口，格式 小时，默认24小时 - page_num: 页码，默认1 - page_size: 每页数量，默认20 - query_tag: 子级垂类标签，空则为全部，多个标签需传入 {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [     {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},     {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;} ]} ### 返回: - 热门账号  # [English] ### Purpose: - Get the hot account ### Parameters: - date_window: Time window, format hour, default 24 hours - page_num: Page number, default 1 - page_size: Number of items per page, default 20 - query_tag: Sub-level vertical category tag, empty for all, multiple tags need to be passed in {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [     {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},     {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;} ]} ### Return: - Hot account
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost_0 (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_account_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取搜索用户名或抖音号
   * # [中文] ### 用途: - 获取搜索用户名或抖音号 ### 参数: - keyword: 搜索的用户名或抖音号 - cursor: 游标，默认空 ### 返回: - 搜索结果  # [English] ### Purpose: - Get the search username or Douyin number ### Parameters: - keyword: Search username or Douyin number - cursor: Cursor, default empty ### Return: - Search result
   * @param keyword 搜索的用户名或抖音号 (required)
   * @param cursor 游标，默认空 (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet (String keyword, Integer cursor) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet"));
    }
    // verify the required parameter 'cursor' is set
    if (cursor == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'cursor' when calling fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_account_search_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取搜索用户名或抖音号
   * # [中文] ### 用途: - 获取搜索用户名或抖音号 ### 参数: - keyword: 搜索的用户名或抖音号 - cursor: 游标，默认空 ### 返回: - 搜索结果  # [English] ### Purpose: - Get the search username or Douyin number ### Parameters: - keyword: Search username or Douyin number - cursor: Cursor, default empty ### Return: - Search result
   * @param keyword 搜索的用户名或抖音号 (required)
   * @param cursor 游标，默认空 (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet_0 (String keyword, Integer cursor) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet_0"));
    }
    // verify the required parameter 'cursor' is set
    if (cursor == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'cursor' when calling fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_account_search_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取账号粉丝数据趋势
   * # [中文] ### 用途: - 获取账号粉丝数据趋势 ### 参数: - sec_uid: 用户sec_id - option: 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 账号粉丝数据趋势  # [English] ### Purpose: - Get the account fan data trend ### Parameters: - sec_uid: User sec_id - option: Option, 2 New like 3 New work 4 New comment 5 New share - date_window: Time window, 1 by hour 2 by day ### Return: - Account fan data trend
   * @param secUid 用户sec_id (required)
   * @param option 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量 (required)
   * @param dateWindow 时间窗口，1 按小时 2 按天 (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet (String secUid, String option, String dateWindow) throws ApiException {
    // verify the required parameter 'secUid' is set
    if (secUid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUid' when calling fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet"));
    }
    // verify the required parameter 'option' is set
    if (option == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'option' when calling fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet"));
    }
    // verify the required parameter 'dateWindow' is set
    if (dateWindow == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'dateWindow' when calling fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_account_trends_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_uid", secUid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("option", option));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("date_window", dateWindow));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取账号粉丝数据趋势
   * # [中文] ### 用途: - 获取账号粉丝数据趋势 ### 参数: - sec_uid: 用户sec_id - option: 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 账号粉丝数据趋势  # [English] ### Purpose: - Get the account fan data trend ### Parameters: - sec_uid: User sec_id - option: Option, 2 New like 3 New work 4 New comment 5 New share - date_window: Time window, 1 by hour 2 by day ### Return: - Account fan data trend
   * @param secUid 用户sec_id (required)
   * @param option 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量 (required)
   * @param dateWindow 时间窗口，1 按小时 2 按天 (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet_0 (String secUid, String option, String dateWindow) throws ApiException {
    // verify the required parameter 'secUid' is set
    if (secUid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUid' when calling fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet_0"));
    }
    // verify the required parameter 'option' is set
    if (option == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'option' when calling fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet_0"));
    }
    // verify the required parameter 'dateWindow' is set
    if (dateWindow == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'dateWindow' when calling fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_account_trends_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_uid", secUid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("option", option));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("date_window", dateWindow));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取活动日历详情
   * # [中文] ### 用途: - 获取活动日历详情 ### 参数: - calendar_id: 活动id ### 返回: - 活动日历详情  # [English] ### Purpose: - Get the activity calendar details ### Parameters: - calendar_id: Activity id ### Return: - Activity calendar details
   * @param calendarId 活动id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet (String calendarId) throws ApiException {
    // verify the required parameter 'calendarId' is set
    if (calendarId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'calendarId' when calling fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_calendar_detail";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("calendar_id", calendarId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取活动日历详情
   * # [中文] ### 用途: - 获取活动日历详情 ### 参数: - calendar_id: 活动id ### 返回: - 活动日历详情  # [English] ### Purpose: - Get the activity calendar details ### Parameters: - calendar_id: Activity id ### Return: - Activity calendar details
   * @param calendarId 活动id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet_0 (String calendarId) throws ApiException {
    // verify the required parameter 'calendarId' is set
    if (calendarId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'calendarId' when calling fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_calendar_detail";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("calendar_id", calendarId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取活动日历
   * # [中文] ### 用途: - 获取活动日历 ### 参数: - city_code: 城市编码，从城市列表获取，空为全部 - category_code: 热点榜分类编码，从热点榜分类获取，空为全部 - end_date: 快照结束时间 格式10位时间戳 - start_date: 快照开始时间 格式10位时间戳 ### 返回: - 活动日历  # [English] ### Purpose: - Get the activity calendar ### Parameters: - city_code: City code, get from city list, empty for all - category_code: Hot list category code, get from hot list category, empty for all - end_date: Snapshot end time format 10 digit timestamp - start_date: Snapshot start time format 10 digit timestamp ### Return: - Activity calendar
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_calendar_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取活动日历
   * # [中文] ### 用途: - 获取活动日历 ### 参数: - city_code: 城市编码，从城市列表获取，空为全部 - category_code: 热点榜分类编码，从热点榜分类获取，空为全部 - end_date: 快照结束时间 格式10位时间戳 - start_date: 快照开始时间 格式10位时间戳 ### 返回: - 活动日历  # [English] ### Purpose: - Get the activity calendar ### Parameters: - city_code: City code, get from city list, empty for all - category_code: Hot list category code, get from hot list category, empty for all - end_date: Snapshot end time format 10 digit timestamp - start_date: Snapshot start time format 10 digit timestamp ### Return: - Activity calendar
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost_0 (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_calendar_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取热点榜分类
   * # [中文] ### 用途: - 获取热点榜分类的id与热度 - 注意：使用start_date和end_date参数需要移除snapshot_time参数才可以生效 ### 参数: - billboard_type: 榜单类型     - rise 上升热点榜     - city 城市热点榜     - total 热点总榜 - snapshot_time: 快照时间 - start_date: 快照开始时间 - end_date: 快照结束时间 - keyword: 热点搜索词 ### 返回: - 热点榜分类  # [English] ### Purpose: - Get the id and popularity of the hot list category - Note: Using start_date and end_date parameters requires removing the snapshot_time parameter - Note: snapshot_time and start_date, end_date parameters cannot be empty at the same time ### Parameters: - billboard_type: Billboard type     - rise Rising hot list     - city City hot list     - total Total hot list - snapshot_time: Snapshot time - start_date: Snapshot start time - end_date: Snapshot end time - keyword: Hot search term ### Return: - Hot category list
   * @param billboardType 榜单类型 (required)
   * @param snapshotTime 快照时间 格式yyyyMMddHHmmss (optional, default to &quot;20250106151500&quot;)
   * @param startDate 快照开始时间 格式yyyyMMdd (optional, default to &quot;&quot;)
   * @param endDate 快照结束时间 格式yyyyMMdd (optional, default to &quot;&quot;)
   * @param keyword 热点搜索词 (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet (String billboardType, String snapshotTime, String startDate, String endDate, String keyword) throws ApiException {
    // verify the required parameter 'billboardType' is set
    if (billboardType == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'billboardType' when calling fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_category_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("billboard_type", billboardType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("snapshot_time", snapshotTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start_date", startDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("end_date", endDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取热点榜分类
   * # [中文] ### 用途: - 获取热点榜分类的id与热度 - 注意：使用start_date和end_date参数需要移除snapshot_time参数才可以生效 ### 参数: - billboard_type: 榜单类型     - rise 上升热点榜     - city 城市热点榜     - total 热点总榜 - snapshot_time: 快照时间 - start_date: 快照开始时间 - end_date: 快照结束时间 - keyword: 热点搜索词 ### 返回: - 热点榜分类  # [English] ### Purpose: - Get the id and popularity of the hot list category - Note: Using start_date and end_date parameters requires removing the snapshot_time parameter - Note: snapshot_time and start_date, end_date parameters cannot be empty at the same time ### Parameters: - billboard_type: Billboard type     - rise Rising hot list     - city City hot list     - total Total hot list - snapshot_time: Snapshot time - start_date: Snapshot start time - end_date: Snapshot end time - keyword: Hot search term ### Return: - Hot category list
   * @param billboardType 榜单类型 (required)
   * @param snapshotTime 快照时间 格式yyyyMMddHHmmss (optional, default to &quot;20250106151500&quot;)
   * @param startDate 快照开始时间 格式yyyyMMdd (optional, default to &quot;&quot;)
   * @param endDate 快照结束时间 格式yyyyMMdd (optional, default to &quot;&quot;)
   * @param keyword 热点搜索词 (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet_0 (String billboardType, String snapshotTime, String startDate, String endDate, String keyword) throws ApiException {
    // verify the required parameter 'billboardType' is set
    if (billboardType == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'billboardType' when calling fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_category_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("billboard_type", billboardType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("snapshot_time", snapshotTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start_date", startDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("end_date", endDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取挑战榜
   * # [中文] ### 用途: - 获取挑战榜 ### 参数: - page: 页码 - page_size: 每页数量 - keyword: 热点搜索词 ### 返回: - 挑战榜  # [English] ### Purpose: - Get the challenge list ### Parameters: - page: Page number - page_size: Number of items per page - keyword: Hot search term ### Return: - Challenge list
   * @param page 页码 (required)
   * @param pageSize 每页数量 (required)
   * @param keyword 热点搜索词 (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet (Integer page, Integer pageSize, String keyword) throws ApiException {
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_challenge_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取挑战榜
   * # [中文] ### 用途: - 获取挑战榜 ### 参数: - page: 页码 - page_size: 每页数量 - keyword: 热点搜索词 ### 返回: - 挑战榜  # [English] ### Purpose: - Get the challenge list ### Parameters: - page: Page number - page_size: Number of items per page - keyword: Hot search term ### Return: - Challenge list
   * @param page 页码 (required)
   * @param pageSize 每页数量 (required)
   * @param keyword 热点搜索词 (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet_0 (Integer page, Integer pageSize, String keyword) throws ApiException {
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet_0"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_challenge_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取同城热点榜
   * # [中文] ### 用途: - 获取同城热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - city_code: 城市编码，从城市列表获取，空为全部 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 同城热点榜  # [English] ### Purpose: - Get the city hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - city_code: City code, get from city list, empty for all - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - City hot list
   * @param page 页码 (required)
   * @param pageSize 每页数量 (required)
   * @param order 排序方式 (required)
   * @param cityCode 城市编码，从城市列表获取，空为全部 (optional, default to &quot;&quot;)
   * @param sentenceTag 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 (optional, default to &quot;&quot;)
   * @param keyword 热点搜索词 (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet (Integer page, Integer pageSize, String order, String cityCode, String sentenceTag, String keyword) throws ApiException {
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet"));
    }
    // verify the required parameter 'order' is set
    if (order == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'order' when calling fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_city_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order", order));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("city_code", cityCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sentence_tag", sentenceTag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取同城热点榜
   * # [中文] ### 用途: - 获取同城热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - city_code: 城市编码，从城市列表获取，空为全部 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 同城热点榜  # [English] ### Purpose: - Get the city hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - city_code: City code, get from city list, empty for all - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - City hot list
   * @param page 页码 (required)
   * @param pageSize 每页数量 (required)
   * @param order 排序方式 (required)
   * @param cityCode 城市编码，从城市列表获取，空为全部 (optional, default to &quot;&quot;)
   * @param sentenceTag 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 (optional, default to &quot;&quot;)
   * @param keyword 热点搜索词 (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet_0 (Integer page, Integer pageSize, String order, String cityCode, String sentenceTag, String keyword) throws ApiException {
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet_0"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet_0"));
    }
    // verify the required parameter 'order' is set
    if (order == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'order' when calling fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_city_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order", order));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("city_code", cityCode));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sentence_tag", sentenceTag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取作品评论分析-词云权重
   * # [中文] ### 用途: - 获取作品评论分析-词云权重 ### 参数: - aweme_id: 作品id ### 返回: - 作品评论分析-词云权重  # [English] ### Purpose: - Get the work comment analysis word cloud weight ### Parameters: - aweme_id: Work id ### Return: - Work comment analysis word cloud weight
   * @param awemeId 作品id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet (String awemeId) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_comment_word_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取作品评论分析-词云权重
   * # [中文] ### 用途: - 获取作品评论分析-词云权重 ### 参数: - aweme_id: 作品id ### 返回: - 作品评论分析-词云权重  # [English] ### Purpose: - Get the work comment analysis word cloud weight ### Parameters: - aweme_id: Work id ### Return: - Work comment analysis word cloud weight
   * @param awemeId 作品id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet_0 (String awemeId) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_comment_word_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取作品数据趋势
   * # [中文] ### 用途: - 获取作品数据趋势 ### 参数: - aweme_id: 作品id - option: 选项，7 点赞量 8 分享量 9 评论量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 作品数据趋势  # [English] ### Purpose: - Get the work data trend ### Parameters: - aweme_id: Work id - option: Option, 7 Like 8 Share 9 Comment - date_window: Time window, 1 by hour 2 by day ### Return: - Work data trend
   * @param option 选项，7 点赞量 8 分享量 9 评论量 (required)
   * @param dateWindow 时间窗口，1 按小时 2 按天 (required)
   * @param awemeId 作品id (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet (String option, String dateWindow, String awemeId) throws ApiException {
    // verify the required parameter 'option' is set
    if (option == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'option' when calling fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet"));
    }
    // verify the required parameter 'dateWindow' is set
    if (dateWindow == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'dateWindow' when calling fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_item_trends_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("option", option));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("date_window", dateWindow));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取作品数据趋势
   * # [中文] ### 用途: - 获取作品数据趋势 ### 参数: - aweme_id: 作品id - option: 选项，7 点赞量 8 分享量 9 评论量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 作品数据趋势  # [English] ### Purpose: - Get the work data trend ### Parameters: - aweme_id: Work id - option: Option, 7 Like 8 Share 9 Comment - date_window: Time window, 1 by hour 2 by day ### Return: - Work data trend
   * @param option 选项，7 点赞量 8 分享量 9 评论量 (required)
   * @param dateWindow 时间窗口，1 按小时 2 按天 (required)
   * @param awemeId 作品id (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet_0 (String option, String dateWindow, String awemeId) throws ApiException {
    // verify the required parameter 'option' is set
    if (option == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'option' when calling fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet_0"));
    }
    // verify the required parameter 'dateWindow' is set
    if (dateWindow == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'dateWindow' when calling fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_item_trends_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("option", option));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("date_window", dateWindow));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取上升热点榜
   * # [中文] ### 用途: - 获取上升热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 上升热点榜  # [English] ### Purpose: - Get the rising hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Rising hot list
   * @param page 页码 (required)
   * @param pageSize 每页数量 (required)
   * @param order 排序方式 (required)
   * @param sentenceTag 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 (optional, default to &quot;&quot;)
   * @param keyword 热点搜索词 (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet (Integer page, Integer pageSize, String order, String sentenceTag, String keyword) throws ApiException {
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet"));
    }
    // verify the required parameter 'order' is set
    if (order == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'order' when calling fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_rise_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order", order));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sentence_tag", sentenceTag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取上升热点榜
   * # [中文] ### 用途: - 获取上升热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 上升热点榜  # [English] ### Purpose: - Get the rising hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Rising hot list
   * @param page 页码 (required)
   * @param pageSize 每页数量 (required)
   * @param order 排序方式 (required)
   * @param sentenceTag 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 (optional, default to &quot;&quot;)
   * @param keyword 热点搜索词 (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet_0 (Integer page, Integer pageSize, String order, String sentenceTag, String keyword) throws ApiException {
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet_0"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet_0"));
    }
    // verify the required parameter 'order' is set
    if (order == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'order' when calling fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_rise_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order", order));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sentence_tag", sentenceTag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取高涨粉率榜
   * # [中文] ### 用途: - 获取高涨粉率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 高涨粉率榜  # [English] ### Purpose: - Get the high fan rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - High fan rate list
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_high_fan_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取高涨粉率榜
   * # [中文] ### 用途: - 获取高涨粉率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 高涨粉率榜  # [English] ### Purpose: - Get the high fan rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - High fan rate list
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost_0 (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_high_fan_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取高点赞率榜
   * # [中文] ### 用途: - 获取高点赞率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 高点赞率榜  # [English] ### Purpose: - Get the high like rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - High like rate list
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_high_like_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取高点赞率榜
   * # [中文] ### 用途: - 获取高点赞率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 高点赞率榜  # [English] ### Purpose: - Get the high like rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - High like rate list
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost_0 (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_high_like_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取高完播率榜
   * # [中文] ### 用途: - 获取高完播率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 高完播率榜  # [English] ### Purpose: - Get the high completion rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - High completion rate list
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_high_play_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取高完播率榜
   * # [中文] ### 用途: - 获取高完播率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 高完播率榜  # [English] ### Purpose: - Get the high completion rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - High completion rate list
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost_0 (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_high_play_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取热度飙升的搜索榜
   * # [中文] ### 用途: - 获取热度飙升的搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 热度飙升的搜索榜  # [English] ### Purpose: - Get the search list with rising popularity ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list with rising popularity
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_high_search_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取热度飙升的搜索榜
   * # [中文] ### 用途: - 获取热度飙升的搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 热度飙升的搜索榜  # [English] ### Purpose: - Get the search list with rising popularity ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list with rising popularity
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost_0 (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_high_search_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取热度飙升的话题榜
   * # [中文] ### 用途: - 获取热度飙升的话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 热度飙升的话题榜  # [English] ### Purpose: - Get the topic list with rising popularity ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - Topic list with rising popularity
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_high_topic_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取热度飙升的话题榜
   * # [中文] ### 用途: - 获取热度飙升的话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 热度飙升的话题榜  # [English] ### Purpose: - Get the topic list with rising popularity ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - Topic list with rising popularity
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost_0 (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_high_topic_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取内容词详情
   * # [中文] ### 用途: - 获取内容词详情 ### 参数: - keyword: 搜索关键字 - word_id: 内容词id - query_day: 查询日期，格式为YYYYMMDD ### 返回: - 内容词详情  # [English] ### Purpose: - Get the details of content words ### Parameters: - keyword: Search keyword - word_id: Content word id - query_day: Query date, format is YYYYMMDD ### Return: - Details of content words
   * @param keyword 搜索关键字 (required)
   * @param wordId 内容词id (required)
   * @param queryDay 查询日期，格式为YYYYMMDD，需为当日 (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet (String keyword, String wordId, Integer queryDay) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet"));
    }
    // verify the required parameter 'wordId' is set
    if (wordId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'wordId' when calling fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet"));
    }
    // verify the required parameter 'queryDay' is set
    if (queryDay == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'queryDay' when calling fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_hot_word_detail_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("word_id", wordId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("query_day", queryDay));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取内容词详情
   * # [中文] ### 用途: - 获取内容词详情 ### 参数: - keyword: 搜索关键字 - word_id: 内容词id - query_day: 查询日期，格式为YYYYMMDD ### 返回: - 内容词详情  # [English] ### Purpose: - Get the details of content words ### Parameters: - keyword: Search keyword - word_id: Content word id - query_day: Query date, format is YYYYMMDD ### Return: - Details of content words
   * @param keyword 搜索关键字 (required)
   * @param wordId 内容词id (required)
   * @param queryDay 查询日期，格式为YYYYMMDD，需为当日 (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet_0 (String keyword, String wordId, Integer queryDay) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet_0"));
    }
    // verify the required parameter 'wordId' is set
    if (wordId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'wordId' when calling fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet_0"));
    }
    // verify the required parameter 'queryDay' is set
    if (queryDay == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'queryDay' when calling fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_hot_word_detail_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("word_id", wordId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("query_day", queryDay));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取全部内容词
   * # [中文] ### 用途: - 获取全部内容词 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 全部内容词  # [English] ### Purpose: - Get the list of all content words ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - List of all content words
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_hot_word_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取全部内容词
   * # [中文] ### 用途: - 获取全部内容词 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 全部内容词  # [English] ### Purpose: - Get the list of all content words ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - List of all content words
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost_0 (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_hot_word_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取热点总榜
   * # [中文] ### 用途: - 获取热点总榜 ### 参数: - page: 页码 - page_size: 每页数量 - type: 快照类型 snapshot 按时刻查看 range 按时间范围。     - 备注：snapshot_time 在 snapshot时有效，start_date 和 end_date 在 range 时有效 - snapshot_time: 快照时间 格式yyyyMMddHHmmss - start_date: 快照开始时间 格式yyyyMMdd - end_date: 快照结束时间 格式yyyyMMdd - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 热点总榜  # [English] ### Purpose: - Get the total hot list ### Parameters: - page: Page number - page_size: Number of items per page - type: Snapshot type snapshot view by time range view by time range.     - Note: snapshot_time is valid when snapshot, start_date and end_date are valid when range - snapshot_time: Snapshot time format yyyyMMddHHmmss - start_date: Snapshot start time format yyyyMMdd - end_date: Snapshot end time format yyyyMMdd - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Total hot list
   * @param page 页码 (required)
   * @param pageSize 每页数量 (required)
   * @param type 快照类型 snapshot 按时刻查看 range 按时间范围 (required)
   * @param snapshotTime 快照时间 格式yyyyMMddHHmmss (optional, default to &quot;20250106151500&quot;)
   * @param startDate 快照开始时间 格式yyyyMMdd (optional, default to &quot;&quot;)
   * @param endDate 快照结束时间 格式yyyyMMdd (optional, default to &quot;&quot;)
   * @param sentenceTag 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 (optional, default to &quot;&quot;)
   * @param keyword 热点搜索词 (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet (Integer page, Integer pageSize, String type, String snapshotTime, String startDate, String endDate, String sentenceTag, String keyword) throws ApiException {
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'type' when calling fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("snapshot_time", snapshotTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start_date", startDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("end_date", endDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sentence_tag", sentenceTag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取热点总榜
   * # [中文] ### 用途: - 获取热点总榜 ### 参数: - page: 页码 - page_size: 每页数量 - type: 快照类型 snapshot 按时刻查看 range 按时间范围。     - 备注：snapshot_time 在 snapshot时有效，start_date 和 end_date 在 range 时有效 - snapshot_time: 快照时间 格式yyyyMMddHHmmss - start_date: 快照开始时间 格式yyyyMMdd - end_date: 快照结束时间 格式yyyyMMdd - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 热点总榜  # [English] ### Purpose: - Get the total hot list ### Parameters: - page: Page number - page_size: Number of items per page - type: Snapshot type snapshot view by time range view by time range.     - Note: snapshot_time is valid when snapshot, start_date and end_date are valid when range - snapshot_time: Snapshot time format yyyyMMddHHmmss - start_date: Snapshot start time format yyyyMMdd - end_date: Snapshot end time format yyyyMMdd - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Total hot list
   * @param page 页码 (required)
   * @param pageSize 每页数量 (required)
   * @param type 快照类型 snapshot 按时刻查看 range 按时间范围 (required)
   * @param snapshotTime 快照时间 格式yyyyMMddHHmmss (optional, default to &quot;20250106151500&quot;)
   * @param startDate 快照开始时间 格式yyyyMMdd (optional, default to &quot;&quot;)
   * @param endDate 快照结束时间 格式yyyyMMdd (optional, default to &quot;&quot;)
   * @param sentenceTag 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 (optional, default to &quot;&quot;)
   * @param keyword 热点搜索词 (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet_0 (Integer page, Integer pageSize, String type, String snapshotTime, String startDate, String endDate, String sentenceTag, String keyword) throws ApiException {
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet_0"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet_0"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'type' when calling fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("snapshot_time", snapshotTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start_date", startDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("end_date", endDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sentence_tag", sentenceTag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取低粉爆款榜
   * # [中文] ### 用途: - 获取低粉爆款榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 低粉爆款榜  # [English] ### Purpose: - Get the low fan explosion list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - Low fan explosion list
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_low_fan_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取低粉爆款榜
   * # [中文] ### 用途: - 获取低粉爆款榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 低粉爆款榜  # [English] ### Purpose: - Get the low fan explosion list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - Low fan explosion list
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost_0 (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_low_fan_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取搜索榜
   * # [中文] ### 用途: - 获取搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 搜索榜  # [English] ### Purpose: - Get the search list ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_search_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取搜索榜
   * # [中文] ### 用途: - 获取搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 搜索榜  # [English] ### Purpose: - Get the search list ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost_0 (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_search_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取话题榜
   * # [中文] ### 用途: - 获取话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 话题榜  # [English] ### Purpose: - Get the topic list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - Topic list
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_topic_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取话题榜
   * # [中文] ### 用途: - 获取话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 话题榜  # [English] ### Purpose: - Get the topic list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - Topic list
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost_0 (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_topic_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取视频榜
   * # [中文] ### 用途: - 获取视频榜 ### 参数: - page: 页码，默认1 - page_size: 每页数量，默认10 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 视频榜  # [English] ### Purpose: - Get the video list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - Video list
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_video_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取视频榜
   * # [中文] ### 用途: - 获取视频榜 ### 参数: - page: 页码，默认1 - page_size: 每页数量，默认10 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\&quot;value\&quot;: \&quot;{顶级垂类标签id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;},         {\&quot;value\&quot;: \&quot;{子级垂类标签id}\&quot;}     ]} ### 返回: - 视频榜  # [English] ### Purpose: - Get the video list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\&quot;value\&quot;: \&quot;{top-level vertical category id}\&quot;, \&quot;children\&quot;: [         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;},         {\&quot;value\&quot;: \&quot;{sub-level vertical category id}\&quot;}     ]} ### Return: - Video list
   * @param UNKNOWN_BASE_TYPE  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost_0 (UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_total_video_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(UNKNOWN_BASE_TYPE);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取作品点赞观众画像-仅限热门榜
   * # [中文] ### 用途: - 获取作品点赞观众画像 ### 参数: - aweme_id: 作品id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 ### 返回: - 作品点赞观众画像  # [English] ### Purpose: - Get the work like audience portrait ### Parameters: - aweme_id: Work id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution ### Return: - Work like audience portrait
   * @param awemeId 作品id (required)
   * @param option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet (String awemeId, String option) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet"));
    }
    // verify the required parameter 'option' is set
    if (option == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'option' when calling fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_user_portrait_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("option", option));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取作品点赞观众画像-仅限热门榜
   * # [中文] ### 用途: - 获取作品点赞观众画像 ### 参数: - aweme_id: 作品id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 ### 返回: - 作品点赞观众画像  # [English] ### Purpose: - Get the work like audience portrait ### Parameters: - aweme_id: Work id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution ### Return: - Work like audience portrait
   * @param awemeId 作品id (required)
   * @param option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet_0 (String awemeId, String option) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet_0"));
    }
    // verify the required parameter 'option' is set
    if (option == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'option' when calling fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/billboard/fetch_hot_user_portrait_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("option", option));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
}
