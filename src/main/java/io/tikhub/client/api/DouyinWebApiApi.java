/*
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.tikhub.client.api;

import io.tikhub.client.ApiClient;
import io.tikhub.client.ApiException;
import io.tikhub.client.Pair;

import org.openapitools.client.model.ABogusModel;
import org.openapitools.client.model.ChallengePostRequest;
import org.openapitools.client.model.HttpValidationError;
import org.openapitools.client.model.ResponseModel;
import org.openapitools.client.model.SearchChallengeRequest;
import org.openapitools.client.model.XBogusModel;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;


public class DouyinWebApiApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  
  public DouyinWebApiApi() {
    this(new ApiClient());
  }

  public DouyinWebApiApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  /**
   * 提取直播间弹幕/Extract live room danmaku
   * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastRoomMessage：直播间消息     - WebcastLikeMessage：点赞消息     - WebcastMemberMessage：成员消息     - WebcastChatMessage：聊天消息     - WebcastGiftMessage：礼物消息     - WebcastSocialMessage：社交消息     - WebcastRoomUserSeqMessage：用户序列消息     - WebcastUpdateFanTicketMessage：更新粉丝消息     - WebcastCommonTextMessage：常规文本消息     - WebcastMatchAgainstScoreMessage：比赛得分消息     - WebcastFansclubMessage：粉丝俱乐部消息     - WebcastRanklistHourEntranceMessage：排行榜小时入口消息     - WebcastRoomStatsMessage：直播间统计消息     - WebcastLiveShoppingMessage: 直播购物消息     - WebcastLiveEcomGeneralMessage: 直播电商通用消息     - WebcastProductChangeMessage: 直播商品变更消息     - WebcastRoomStreamAdaptationMessage: 直播间流适配消息     - WebcastNotifyEffectMessage: 通知效果消息     - WebcastLightGiftMessage: 亮礼物消息     - WebcastProfitInteractionScoreMessage: 收益互动分消息     - WebcastRoomRankMessage: 直播间排行消息 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discounts. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastRoomMessage: Live room message     - WebcastLikeMessage: Like message     - WebcastMemberMessage: Member message     - WebcastChatMessage: Chat message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastUpdateFanTicketMessage: Update fan message     - WebcastCommonTextMessage: Common text message     - WebcastMatchAgainstScoreMessage: Match score message     - WebcastFansclubMessage: Fans club message     - WebcastRanklistHourEntranceMessage: Ranking list hour entrance message     - WebcastRoomStatsMessage: Live room statistics message     - WebcastLiveShoppingMessage: Live shopping message     - WebcastLiveEcomGeneralMessage: Live e-commerce general message     - WebcastProductChangeMessage: Live product change message     - WebcastRoomStreamAdaptationMessage: Live room stream adaptation message     - WebcastNotifyEffectMessage: Notification effect message     - WebcastLightGiftMessage: Light gift message     - WebcastProfitInteractionScoreMessage: Profit interaction score message     - WebcastRoomRankMessage: Live room ranking message ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
   * @param liveRoomUrl 直播间链接/Live room link (required)
   * @param danmakuType 消息类型/Message type (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet (String liveRoomUrl, String danmakuType) throws ApiException {
    // verify the required parameter 'liveRoomUrl' is set
    if (liveRoomUrl == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'liveRoomUrl' when calling douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet"));
    }
    // verify the required parameter 'danmakuType' is set
    if (danmakuType == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'danmakuType' when calling douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/douyin_live_room";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("live_room_url", liveRoomUrl));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("danmaku_type", danmakuType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 提取直播间弹幕/Extract live room danmaku
   * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastRoomMessage：直播间消息     - WebcastLikeMessage：点赞消息     - WebcastMemberMessage：成员消息     - WebcastChatMessage：聊天消息     - WebcastGiftMessage：礼物消息     - WebcastSocialMessage：社交消息     - WebcastRoomUserSeqMessage：用户序列消息     - WebcastUpdateFanTicketMessage：更新粉丝消息     - WebcastCommonTextMessage：常规文本消息     - WebcastMatchAgainstScoreMessage：比赛得分消息     - WebcastFansclubMessage：粉丝俱乐部消息     - WebcastRanklistHourEntranceMessage：排行榜小时入口消息     - WebcastRoomStatsMessage：直播间统计消息     - WebcastLiveShoppingMessage: 直播购物消息     - WebcastLiveEcomGeneralMessage: 直播电商通用消息     - WebcastProductChangeMessage: 直播商品变更消息     - WebcastRoomStreamAdaptationMessage: 直播间流适配消息     - WebcastNotifyEffectMessage: 通知效果消息     - WebcastLightGiftMessage: 亮礼物消息     - WebcastProfitInteractionScoreMessage: 收益互动分消息     - WebcastRoomRankMessage: 直播间排行消息 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discounts. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastRoomMessage: Live room message     - WebcastLikeMessage: Like message     - WebcastMemberMessage: Member message     - WebcastChatMessage: Chat message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastUpdateFanTicketMessage: Update fan message     - WebcastCommonTextMessage: Common text message     - WebcastMatchAgainstScoreMessage: Match score message     - WebcastFansclubMessage: Fans club message     - WebcastRanklistHourEntranceMessage: Ranking list hour entrance message     - WebcastRoomStatsMessage: Live room statistics message     - WebcastLiveShoppingMessage: Live shopping message     - WebcastLiveEcomGeneralMessage: Live e-commerce general message     - WebcastProductChangeMessage: Live product change message     - WebcastRoomStreamAdaptationMessage: Live room stream adaptation message     - WebcastNotifyEffectMessage: Notification effect message     - WebcastLightGiftMessage: Light gift message     - WebcastProfitInteractionScoreMessage: Profit interaction score message     - WebcastRoomRankMessage: Live room ranking message ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
   * @param liveRoomUrl 直播间链接/Live room link (required)
   * @param danmakuType 消息类型/Message type (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet_0 (String liveRoomUrl, String danmakuType) throws ApiException {
    // verify the required parameter 'liveRoomUrl' is set
    if (liveRoomUrl == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'liveRoomUrl' when calling douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet_0"));
    }
    // verify the required parameter 'danmakuType' is set
    if (danmakuType == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'danmakuType' when calling douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/douyin_live_room";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("live_room_url", liveRoomUrl));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("danmaku_type", danmakuType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音热点分类/Douyin Billboard Categories
   * # [中文] ### 用途: - 抖音热点分类 ### 参数: - billboard_type: 热点类型     - rise: 上升热点榜分类     - city: 同城热点榜分类     - total: 热点总榜分类 ### 返回: - 热点分类数据  # [English] ### Purpose: - Douyin Billboard Categories ### Parameters: - billboard_type: Hotspot type     - rise: Rising hot spot list category     - city: City hot spot list category     - total: Total hot spot list category ### Return: - Hotspot category data
   * @param billboardType 热点类型/Hotspot type (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet (String billboardType) throws ApiException {
    // verify the required parameter 'billboardType' is set
    if (billboardType == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'billboardType' when calling fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_billboard_categories";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("billboard_type", billboardType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音热点分类/Douyin Billboard Categories
   * # [中文] ### 用途: - 抖音热点分类 ### 参数: - billboard_type: 热点类型     - rise: 上升热点榜分类     - city: 同城热点榜分类     - total: 热点总榜分类 ### 返回: - 热点分类数据  # [English] ### Purpose: - Douyin Billboard Categories ### Parameters: - billboard_type: Hotspot type     - rise: Rising hot spot list category     - city: City hot spot list category     - total: Total hot spot list category ### Return: - Hotspot category data
   * @param billboardType 热点类型/Hotspot type (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet_0 (String billboardType) throws ApiException {
    // verify the required parameter 'billboardType' is set
    if (billboardType == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'billboardType' when calling fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_billboard_categories";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("billboard_type", billboardType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音榜单相关视频/Douyin Billboard Related Videos
   * # [中文] ### 用途: - 抖音榜单相关视频 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_id: 分类ID ### 返回: - 相关视频数据  # [English] ### Purpose: - Douyin Billboard Related Videos ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_id: Category ID ### Return: - Related video data
   * @param page 页码/Page number (required)
   * @param pageSize 每页数量/Number per page (required)
   * @param sentenceId 分类ID/Category ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet (Integer page, Integer pageSize, String sentenceId) throws ApiException {
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet"));
    }
    // verify the required parameter 'sentenceId' is set
    if (sentenceId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'sentenceId' when calling fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_billboard_related_videos";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sentence_id", sentenceId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音榜单相关视频/Douyin Billboard Related Videos
   * # [中文] ### 用途: - 抖音榜单相关视频 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_id: 分类ID ### 返回: - 相关视频数据  # [English] ### Purpose: - Douyin Billboard Related Videos ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_id: Category ID ### Return: - Related video data
   * @param page 页码/Page number (required)
   * @param pageSize 每页数量/Number per page (required)
   * @param sentenceId 分类ID/Category ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet_0 (Integer page, Integer pageSize, String sentenceId) throws ApiException {
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet_0"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet_0"));
    }
    // verify the required parameter 'sentenceId' is set
    if (sentenceId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'sentenceId' when calling fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_billboard_related_videos";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sentence_id", sentenceId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 二次元作品推荐/Knowledge Video
   * # [中文] ### 用途: - 二次元作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 二次元作品数据  # [English] ### Purpose: - Cartoon Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Cartoon Video data
   * @param count 每页数量/Number per page (required)
   * @param refreshIndex 翻页索引/Paging index (optional, default to 1)
   * @param cookie 用户自行提供的Cookie/User provided Cookie (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet (Integer count, Integer refreshIndex, String cookie) throws ApiException {
    // verify the required parameter 'count' is set
    if (count == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'count' when calling fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_cartoon_aweme";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("refresh_index", refreshIndex));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cookie", cookie));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 二次元作品推荐/Knowledge Video
   * # [中文] ### 用途: - 二次元作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 二次元作品数据  # [English] ### Purpose: - Cartoon Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Cartoon Video data
   * @param count 每页数量/Number per page (required)
   * @param refreshIndex 翻页索引/Paging index (optional, default to 1)
   * @param cookie 用户自行提供的Cookie/User provided Cookie (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet_0 (Integer count, Integer refreshIndex, String cookie) throws ApiException {
    // verify the required parameter 'count' is set
    if (count == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'count' when calling fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_cartoon_aweme";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("refresh_index", refreshIndex));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cookie", cookie));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 美食作品推荐/Knowledge Video
   * # [中文] ### 用途: - 美食作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 美食作品数据  # [English] ### Purpose: - Food Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Food Video data
   * @param count 每页数量/Number per page (required)
   * @param refreshIndex 翻页索引/Paging index (optional, default to 1)
   * @param cookie 用户自行提供的Cookie/User provided Cookie (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet (Integer count, Integer refreshIndex, String cookie) throws ApiException {
    // verify the required parameter 'count' is set
    if (count == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'count' when calling fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_food_aweme";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("refresh_index", refreshIndex));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cookie", cookie));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 美食作品推荐/Knowledge Video
   * # [中文] ### 用途: - 美食作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 美食作品数据  # [English] ### Purpose: - Food Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Food Video data
   * @param count 每页数量/Number per page (required)
   * @param refreshIndex 翻页索引/Paging index (optional, default to 1)
   * @param cookie 用户自行提供的Cookie/User provided Cookie (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet_0 (Integer count, Integer refreshIndex, String cookie) throws ApiException {
    // verify the required parameter 'count' is set
    if (count == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'count' when calling fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_food_aweme";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("refresh_index", refreshIndex));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cookie", cookie));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 音乐作品推荐/Knowledge Video
   * # [中文] ### 用途: - 音乐作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 音乐作品数据  # [English] ### Purpose: - Music Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Music Video data
   * @param count 每页数量/Number per page (required)
   * @param refreshIndex 翻页索引/Paging index (optional, default to 1)
   * @param cookie 用户自行提供的Cookie/User provided Cookie (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet (Integer count, Integer refreshIndex, String cookie) throws ApiException {
    // verify the required parameter 'count' is set
    if (count == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'count' when calling fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_music_aweme";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("refresh_index", refreshIndex));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cookie", cookie));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 音乐作品推荐/Knowledge Video
   * # [中文] ### 用途: - 音乐作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 音乐作品数据  # [English] ### Purpose: - Music Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Music Video data
   * @param count 每页数量/Number per page (required)
   * @param refreshIndex 翻页索引/Paging index (optional, default to 1)
   * @param cookie 用户自行提供的Cookie/User provided Cookie (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet_0 (Integer count, Integer refreshIndex, String cookie) throws ApiException {
    // verify the required parameter 'count' is set
    if (count == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'count' when calling fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_music_aweme";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("refresh_index", refreshIndex));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cookie", cookie));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 话题作品/Challenge Posts
   * # [中文] ### 用途: - 话题作品 ### 参数: - challenge_id: 话题id - sort_type: 排序类型     - 0:综合排序 1:最热排序 2:最新排序 - cursor: 游标 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题作品  # [English] ### Purpose: - Challenge Posts ### Parameters: - challenge_id: Challenge id - sort_type: Sort type     - 0: Comprehensive sorting 1: Hottest sorting 2: Latest sorting - cursor: Cursor - count: Number - cookie: User provided Cookie, used to get more data ### Return: - Challenge Posts  # [示例/Example] challenge_id &#x3D; \&quot;1750525814851611\&quot; sort_type &#x3D; 0 offset &#x3D; 0 cursor &#x3D; 0 count &#x3D; 20
   * @param challengePostRequest  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost (ChallengePostRequest challengePostRequest) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_challenge_posts";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(challengePostRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 话题作品/Challenge Posts
   * # [中文] ### 用途: - 话题作品 ### 参数: - challenge_id: 话题id - sort_type: 排序类型     - 0:综合排序 1:最热排序 2:最新排序 - cursor: 游标 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题作品  # [English] ### Purpose: - Challenge Posts ### Parameters: - challenge_id: Challenge id - sort_type: Sort type     - 0: Comprehensive sorting 1: Hottest sorting 2: Latest sorting - cursor: Cursor - count: Number - cookie: User provided Cookie, used to get more data ### Return: - Challenge Posts  # [示例/Example] challenge_id &#x3D; \&quot;1750525814851611\&quot; sort_type &#x3D; 0 offset &#x3D; 0 cursor &#x3D; 0 count &#x3D; 20
   * @param challengePostRequest  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost_0 (ChallengePostRequest challengePostRequest) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_challenge_posts";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(challengePostRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 抖音同城热点榜单/Douyin City Hot List
   * # [中文] ### 用途: - 抖音同城热点榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 - city_code: 城市代码，默认为110000(北京)     - 110000: 北京     - 更多城市代码请参考城市列表接口     - f\&quot;{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\&quot; ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin City Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change - city_code: City code, default is 110000     - 110000: Beijing     - For more city codes, please refer to the city list interface     - f\&quot;{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\&quot; ### Return: - Hotspot list data
   * @param page 页码/Page number (required)
   * @param pageSize 每页数量/Number per page (required)
   * @param sentenceTag 分类标签/Category tag (required)
   * @param order 排序方式/Sorting method (required)
   * @param cityCode 城市代码/City code (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchCityHotListApiV1DouyinWebFetchCityHotListGet (Integer page, Integer pageSize, String sentenceTag, String order, String cityCode) throws ApiException {
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet"));
    }
    // verify the required parameter 'sentenceTag' is set
    if (sentenceTag == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'sentenceTag' when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet"));
    }
    // verify the required parameter 'order' is set
    if (order == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'order' when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet"));
    }
    // verify the required parameter 'cityCode' is set
    if (cityCode == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'cityCode' when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_city_hot_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sentence_tag", sentenceTag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order", order));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("city_code", cityCode));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchCityHotListApiV1DouyinWebFetchCityHotListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音同城热点榜单/Douyin City Hot List
   * # [中文] ### 用途: - 抖音同城热点榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 - city_code: 城市代码，默认为110000(北京)     - 110000: 北京     - 更多城市代码请参考城市列表接口     - f\&quot;{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\&quot; ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin City Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change - city_code: City code, default is 110000     - 110000: Beijing     - For more city codes, please refer to the city list interface     - f\&quot;{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\&quot; ### Return: - Hotspot list data
   * @param page 页码/Page number (required)
   * @param pageSize 每页数量/Number per page (required)
   * @param sentenceTag 分类标签/Category tag (required)
   * @param order 排序方式/Sorting method (required)
   * @param cityCode 城市代码/City code (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchCityHotListApiV1DouyinWebFetchCityHotListGet_0 (Integer page, Integer pageSize, String sentenceTag, String order, String cityCode) throws ApiException {
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet_0"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet_0"));
    }
    // verify the required parameter 'sentenceTag' is set
    if (sentenceTag == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'sentenceTag' when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet_0"));
    }
    // verify the required parameter 'order' is set
    if (order == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'order' when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet_0"));
    }
    // verify the required parameter 'cityCode' is set
    if (cityCode == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'cityCode' when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_city_hot_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sentence_tag", sentenceTag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order", order));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("city_code", cityCode));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchCityHotListApiV1DouyinWebFetchCityHotListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音城市列表/Douyin City List
   * # [中文] ### 用途: - 抖音城市列表以及城市ID ### 返回: - 城市列表数据  # [English] ### Purpose: - Douyin City List and City ID ### Return: - City list data
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchCityListApiV1DouyinWebFetchCityListGet () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_city_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchCityListApiV1DouyinWebFetchCityListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音城市列表/Douyin City List
   * # [中文] ### 用途: - 抖音城市列表以及城市ID ### 返回: - 城市列表数据  # [English] ### Purpose: - Douyin City List and City ID ### Return: - City list data
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchCityListApiV1DouyinWebFetchCityListGet_0 () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_city_list";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchCityListApiV1DouyinWebFetchCityListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取抖音Web的游客Cookie/Get the guest Cookie of Douyin Web
   * # [中文] ### 用途: - 获取抖音Web的游客Cookie - 可以用于爬取抖音Web的数据，如用户作品、合辑作品等。 - 可以固定身份避免部分接口重复数据。 - 请注意：游客Cookie无法爬取所有数据，有一定的限制。 - 可以配合开源项目使用此接口实现抖音Web的数据爬取。 ### 参数: - user_agent: 用户浏览器代理 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get the guest Cookie of Douyin Web - Can be used to crawl data of Douyin Web, such as user videos, mix videos, etc. - Can fix identity to avoid duplicate data for some interfaces. - Please note: Guest Cookie cannot crawl all data, there are certain restrictions. - Can be used with open source projects to implement data crawling of Douyin Web using this interface. ### Parameters: - user_agent: User browser agent ### Return: - Guest Cookie  # [示例/Example] user_agent &#x3D; \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\&quot;
   * @param userAgent 用户浏览器代理/User browser agent (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet (String userAgent) throws ApiException {
    // verify the required parameter 'userAgent' is set
    if (userAgent == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userAgent' when calling fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_douyin_web_guest_cookie";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_agent", userAgent));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取抖音Web的游客Cookie/Get the guest Cookie of Douyin Web
   * # [中文] ### 用途: - 获取抖音Web的游客Cookie - 可以用于爬取抖音Web的数据，如用户作品、合辑作品等。 - 可以固定身份避免部分接口重复数据。 - 请注意：游客Cookie无法爬取所有数据，有一定的限制。 - 可以配合开源项目使用此接口实现抖音Web的数据爬取。 ### 参数: - user_agent: 用户浏览器代理 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get the guest Cookie of Douyin Web - Can be used to crawl data of Douyin Web, such as user videos, mix videos, etc. - Can fix identity to avoid duplicate data for some interfaces. - Please note: Guest Cookie cannot crawl all data, there are certain restrictions. - Can be used with open source projects to implement data crawling of Douyin Web using this interface. ### Parameters: - user_agent: User browser agent ### Return: - Guest Cookie  # [示例/Example] user_agent &#x3D; \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\&quot;
   * @param userAgent 用户浏览器代理/User browser agent (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet_0 (String userAgent) throws ApiException {
    // verify the required parameter 'userAgent' is set
    if (userAgent == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userAgent' when calling fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_douyin_web_guest_cookie";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_agent", userAgent));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 游戏作品推荐/Knowledge Video
   * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 游戏作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Game Video data
   * @param count 每页数量/Number per page (required)
   * @param refreshIndex 翻页索引/Paging index (optional, default to 1)
   * @param cookie 用户自行提供的Cookie/User provided Cookie (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet (Integer count, Integer refreshIndex, String cookie) throws ApiException {
    // verify the required parameter 'count' is set
    if (count == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'count' when calling fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_game_aweme";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("refresh_index", refreshIndex));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cookie", cookie));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 游戏作品推荐/Knowledge Video
   * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 游戏作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Game Video data
   * @param count 每页数量/Number per page (required)
   * @param refreshIndex 翻页索引/Paging index (optional, default to 1)
   * @param cookie 用户自行提供的Cookie/User provided Cookie (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet_0 (Integer count, Integer refreshIndex, String cookie) throws ApiException {
    // verify the required parameter 'count' is set
    if (count == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'count' when calling fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_game_aweme";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("refresh_index", refreshIndex));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cookie", cookie));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
   * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 -search_range: 0:不限 1:最近看过 2:还未看过 3:关注的人 -content_type: 0:不限 1:视频 2:图集 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - search_range: 0: Unlimited 1: Recently viewed 2: Not yet viewed 3: Followed - content_type: 0: Unlimited 1: Video 2: Album - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Comprehensive search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; \&quot;0\&quot; publish_time &#x3D; \&quot;0\&quot; filter_duration &#x3D; \&quot;0\&quot;
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @param sortType 排序类型/Sort type (optional, default to &quot;0&quot;)
   * @param publishTime 发布时间/Publish time (optional, default to &quot;0&quot;)
   * @param filterDuration 视频时长/Duration filter (optional, default to &quot;0&quot;)
   * @param searchRange 搜索范围/Search range (optional, default to &quot;0&quot;)
   * @param contentType 内容类型/Content type (optional, default to &quot;0&quot;)
   * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet (String keyword, Integer offset, Integer count, String sortType, String publishTime, String filterDuration, String searchRange, String contentType, String searchId) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_general_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort_type", sortType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("publish_time", publishTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter_duration", filterDuration));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_range", searchRange));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type", contentType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_id", searchId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
   * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 -search_range: 0:不限 1:最近看过 2:还未看过 3:关注的人 -content_type: 0:不限 1:视频 2:图集 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - search_range: 0: Unlimited 1: Recently viewed 2: Not yet viewed 3: Followed - content_type: 0: Unlimited 1: Video 2: Album - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Comprehensive search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; \&quot;0\&quot; publish_time &#x3D; \&quot;0\&quot; filter_duration &#x3D; \&quot;0\&quot;
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @param sortType 排序类型/Sort type (optional, default to &quot;0&quot;)
   * @param publishTime 发布时间/Publish time (optional, default to &quot;0&quot;)
   * @param filterDuration 视频时长/Duration filter (optional, default to &quot;0&quot;)
   * @param searchRange 搜索范围/Search range (optional, default to &quot;0&quot;)
   * @param contentType 内容类型/Content type (optional, default to &quot;0&quot;)
   * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet_0 (String keyword, Integer offset, Integer count, String sortType, String publishTime, String filterDuration, String searchRange, String contentType, String searchId) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_general_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort_type", sortType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("publish_time", publishTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter_duration", filterDuration));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_range", searchRange));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type", contentType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_id", searchId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取首页推荐数据/Get home feed data
   * # [中文] ### 用途: - 获取首页推荐数据 ### 参数: - count: 数量，默认为10，建议保持不变。 - refresh_index: 翻页索引，默认为0，然后每次增加1用于翻页。 ### 返回: - Feed数据  # [English] ### Purpose: - Get home feed data ### Parameters: - count: Number, default is 10, it is recommended to keep it unchanged. - refresh_index: Paging index, default is 0, then increase by 1 each time for paging. ### Return: - Feed data  # [示例/Example] count &#x3D; 10 refresh_index &#x3D; 0
   * @param count 数量/Number (optional, default to 10)
   * @param refreshIndex 翻页索引/Paging index (optional, default to 0)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet (Integer count, Integer refreshIndex) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_home_feed";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("refresh_index", refreshIndex));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取首页推荐数据/Get home feed data
   * # [中文] ### 用途: - 获取首页推荐数据 ### 参数: - count: 数量，默认为10，建议保持不变。 - refresh_index: 翻页索引，默认为0，然后每次增加1用于翻页。 ### 返回: - Feed数据  # [English] ### Purpose: - Get home feed data ### Parameters: - count: Number, default is 10, it is recommended to keep it unchanged. - refresh_index: Paging index, default is 0, then increase by 1 each time for paging. ### Return: - Feed data  # [示例/Example] count &#x3D; 10 refresh_index &#x3D; 0
   * @param count 数量/Number (optional, default to 10)
   * @param refreshIndex 翻页索引/Paging index (optional, default to 0)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet_0 (Integer count, Integer refreshIndex) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_home_feed";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("refresh_index", refreshIndex));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音热点总榜单/Douyin Hot List
   * # [中文] ### 用途: - 抖音热点总榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty ### Return: - Hotspot list data
   * @param page 页码/Page number (required)
   * @param pageSize 每页数量/Number per page (required)
   * @param sentenceTag 分类标签/Category tag (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotListApiV1DouyinWebFetchHotListGet (Integer page, Integer pageSize, String sentenceTag) throws ApiException {
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchHotListApiV1DouyinWebFetchHotListGet"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchHotListApiV1DouyinWebFetchHotListGet"));
    }
    // verify the required parameter 'sentenceTag' is set
    if (sentenceTag == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'sentenceTag' when calling fetchHotListApiV1DouyinWebFetchHotListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_hot_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sentence_tag", sentenceTag));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotListApiV1DouyinWebFetchHotListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音热点总榜单/Douyin Hot List
   * # [中文] ### 用途: - 抖音热点总榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty ### Return: - Hotspot list data
   * @param page 页码/Page number (required)
   * @param pageSize 每页数量/Number per page (required)
   * @param sentenceTag 分类标签/Category tag (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotListApiV1DouyinWebFetchHotListGet_0 (Integer page, Integer pageSize, String sentenceTag) throws ApiException {
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchHotListApiV1DouyinWebFetchHotListGet_0"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchHotListApiV1DouyinWebFetchHotListGet_0"));
    }
    // verify the required parameter 'sentenceTag' is set
    if (sentenceTag == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'sentenceTag' when calling fetchHotListApiV1DouyinWebFetchHotListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_hot_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sentence_tag", sentenceTag));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotListApiV1DouyinWebFetchHotListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取抖音热榜数据/Get Douyin hot search results
   * # [中文] ### 用途: - 获取抖音热榜数据 ### 返回: - 热榜数据  # [English] ### Purpose: - Get Douyin hot search results ### Return: - Hot search results
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_hot_search_result";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取抖音热榜数据/Get Douyin hot search results
   * # [中文] ### 用途: - 获取抖音热榜数据 ### 返回: - 热榜数据  # [English] ### Purpose: - Get Douyin hot search results ### Return: - Hot search results
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet_0 () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_hot_search_result";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 知识作品推荐/Knowledge Video
   * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 知识作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Knowledge Video data
   * @param count 每页数量/Number per page (required)
   * @param refreshIndex 翻页索引/Paging index (optional, default to 1)
   * @param cookie 用户自行提供的Cookie/User provided Cookie (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet (Integer count, Integer refreshIndex, String cookie) throws ApiException {
    // verify the required parameter 'count' is set
    if (count == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'count' when calling fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_knowledge_aweme";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("refresh_index", refreshIndex));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cookie", cookie));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 知识作品推荐/Knowledge Video
   * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 知识作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Knowledge Video data
   * @param count 每页数量/Number per page (required)
   * @param refreshIndex 翻页索引/Paging index (optional, default to 1)
   * @param cookie 用户自行提供的Cookie/User provided Cookie (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet_0 (Integer count, Integer refreshIndex, String cookie) throws ApiException {
    // verify the required parameter 'count' is set
    if (count == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'count' when calling fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_knowledge_aweme";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("refresh_index", refreshIndex));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cookie", cookie));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取直播间送礼用户排行榜/Get live room gift user ranking
   * # [中文] ### 用途: - 获取直播间送礼用户排行榜 ### 参数: - room_id: 直播间room_id - rank_type: 排行类型，默认为30不用修改。 ### 返回: - 排行榜数据  # [English] ### Purpose: - Get live room gift user ranking ### Parameters: - room_id: Room room_id - rank_type: Leaderboard type, default is 30, no need to modify. ### Return: - Leaderboard data  # [示例/Example] room_id &#x3D; \&quot;7356585666190461731\&quot; rank_type &#x3D; 30
   * @param roomId 直播间room_id/Room room_id (required)
   * @param rankType 排行类型/Leaderboard type (optional, default to 30)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet (String roomId, Integer rankType) throws ApiException {
    // verify the required parameter 'roomId' is set
    if (roomId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'roomId' when calling fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_live_gift_ranking";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("room_id", roomId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rank_type", rankType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取直播间送礼用户排行榜/Get live room gift user ranking
   * # [中文] ### 用途: - 获取直播间送礼用户排行榜 ### 参数: - room_id: 直播间room_id - rank_type: 排行类型，默认为30不用修改。 ### 返回: - 排行榜数据  # [English] ### Purpose: - Get live room gift user ranking ### Parameters: - room_id: Room room_id - rank_type: Leaderboard type, default is 30, no need to modify. ### Return: - Leaderboard data  # [示例/Example] room_id &#x3D; \&quot;7356585666190461731\&quot; rank_type &#x3D; 30
   * @param roomId 直播间room_id/Room room_id (required)
   * @param rankType 排行类型/Leaderboard type (optional, default to 30)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet_0 (String roomId, Integer rankType) throws ApiException {
    // verify the required parameter 'roomId' is set
    if (roomId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'roomId' when calling fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_live_gift_ranking";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("room_id", roomId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("rank_type", rankType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音直播间商品信息/Douyin live room product information
   * # [中文] ### 用途: - 抖音直播间商品信息 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie，如获取失败请手动过一次验证码) - room_id: 直播间room_id - author_id: 作者id - limit: 数量 ### 返回: - 商品信息  # [English] ### Purpose: - Douyin live room product information ### Parameters: - cookie: User&#39;s web version of Douyin Cookie (This interface requires users to provide their own Cookie, if the acquisition fails, please manually pass the captcha code once) - room_id: Room room_id - author_id: Author id - limit: Number ### Return: - Product information  # [示例/Example] cookie &#x3D; \&quot;YOUR_COOKIE\&quot; room_id &#x3D; \&quot;7356742011975715619\&quot; author_id &#x3D; \&quot;2207432981615527\&quot; limit &#x3D; 20
   * @param roomId 直播间room_id/Room room_id (required)
   * @param authorId 作者id/Author id (required)
   * @param limit 数量/Number (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet (String roomId, String authorId, Integer limit) throws ApiException {
    // verify the required parameter 'roomId' is set
    if (roomId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'roomId' when calling fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet"));
    }
    // verify the required parameter 'authorId' is set
    if (authorId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'authorId' when calling fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_live_room_product_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("room_id", roomId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("author_id", authorId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音直播间商品信息/Douyin live room product information
   * # [中文] ### 用途: - 抖音直播间商品信息 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie，如获取失败请手动过一次验证码) - room_id: 直播间room_id - author_id: 作者id - limit: 数量 ### 返回: - 商品信息  # [English] ### Purpose: - Douyin live room product information ### Parameters: - cookie: User&#39;s web version of Douyin Cookie (This interface requires users to provide their own Cookie, if the acquisition fails, please manually pass the captcha code once) - room_id: Room room_id - author_id: Author id - limit: Number ### Return: - Product information  # [示例/Example] cookie &#x3D; \&quot;YOUR_COOKIE\&quot; room_id &#x3D; \&quot;7356742011975715619\&quot; author_id &#x3D; \&quot;2207432981615527\&quot; limit &#x3D; 20
   * @param roomId 直播间room_id/Room room_id (required)
   * @param authorId 作者id/Author id (required)
   * @param limit 数量/Number (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_0 (String roomId, String authorId, Integer limit) throws ApiException {
    // verify the required parameter 'roomId' is set
    if (roomId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'roomId' when calling fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_0"));
    }
    // verify the required parameter 'authorId' is set
    if (authorId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'authorId' when calling fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_live_room_product_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("room_id", roomId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("author_id", authorId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的直播搜索结果/Get live search results of specified keywords
   * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword &#x3D; \&quot;动漫\&quot; offset &#x3D; 0 count &#x3D; 20
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet (String keyword, Integer offset, Integer count, String searchId) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_live_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_id", searchId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的直播搜索结果/Get live search results of specified keywords
   * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword &#x3D; \&quot;动漫\&quot; offset &#x3D; 0 count &#x3D; 20
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet_0 (String keyword, Integer offset, Integer count, String searchId) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_live_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_id", searchId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 批量获取视频信息/Batch Get Video Information
   * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持50个视频，此接口收费固定价格为0.001$ * 50 &#x3D; 0.05$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持50个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 50 videos at a time, this interface charges a fixed price of 0.001$ * 50 &#x3D; 0.05$ each time. ### Parameters: - aweme_ids: List of video ids, up to 50 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids &#x3D; [\&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;, \&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;, \&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;, \&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;, \&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;]
   * @param requestBody  (optional
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost (List<String> requestBody) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_multi_video";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 批量获取视频信息/Batch Get Video Information
   * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持50个视频，此接口收费固定价格为0.001$ * 50 &#x3D; 0.05$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持50个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 50 videos at a time, this interface charges a fixed price of 0.001$ * 50 &#x3D; 0.05$ each time. ### Parameters: - aweme_ids: List of video ids, up to 50 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids &#x3D; [\&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;, \&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;, \&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;, \&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;, \&quot;7372484719365098803\&quot;, \&quot;7126745726494821640\&quot;]
   * @param requestBody  (optional
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost_0 (List<String> requestBody) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_multi_video";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取单个作品数据，此接口即将废弃，请使用APP接口/Get single video data, this endpoint will be deprecated soon, please use APP endpoint
   * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法保障稳定性，如果有爬取单一视频需求，请使用下面的接口。 - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot guarantee stability. If you need to crawl a single video, please use the following interface. - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7372484719365098803\&quot;
   * @param awemeId 作品id/Video id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneVideoApiV1DouyinWebFetchOneVideoGet (String awemeId) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchOneVideoApiV1DouyinWebFetchOneVideoGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_one_video";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneVideoApiV1DouyinWebFetchOneVideoGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单个作品数据，此接口即将废弃，请使用APP接口/Get single video data, this endpoint will be deprecated soon, please use APP endpoint
   * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法保障稳定性，如果有爬取单一视频需求，请使用下面的接口。 - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot guarantee stability. If you need to crawl a single video, please use the following interface. - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7372484719365098803\&quot;
   * @param awemeId 作品id/Video id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneVideoApiV1DouyinWebFetchOneVideoGet_0 (String awemeId) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchOneVideoApiV1DouyinWebFetchOneVideoGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_one_video";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneVideoApiV1DouyinWebFetchOneVideoGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单个作品数据 V2/Get single video data V2
   * # [中文] ### 用途: - 获取单个作品数据V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7372484719365098803\&quot;
   * @param awemeId 作品id/Video id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get (String awemeId) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_one_video_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单个作品数据 V2/Get single video data V2
   * # [中文] ### 用途: - 获取单个作品数据V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7372484719365098803\&quot;
   * @param awemeId 作品id/Video id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get_0 (String awemeId) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_one_video_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据分享链接获取单个作品数据/Get single video data by sharing link
   * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url &#x3D; \&quot;https://v.douyin.com/e3x2fjE/\&quot;
   * @param shareUrl 分享链接/Share link (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet (String shareUrl) throws ApiException {
    // verify the required parameter 'shareUrl' is set
    if (shareUrl == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'shareUrl' when calling fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_one_video_by_share_url";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_url", shareUrl));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据分享链接获取单个作品数据/Get single video data by sharing link
   * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url &#x3D; \&quot;https://v.douyin.com/e3x2fjE/\&quot;
   * @param shareUrl 分享链接/Share link (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet_0 (String shareUrl) throws ApiException {
    // verify the required parameter 'shareUrl' is set
    if (shareUrl == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'shareUrl' when calling fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_one_video_by_share_url";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_url", shareUrl));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单个作品视频弹幕数据/Get single video danmaku data
   * # [中文] ### 用途: - 获取单个作品视频弹幕数据 ### 参数: - item_id: 作品id - duration: 视频总时长 - end_time: 结束时间 - start_time: 开始时间 ### 返回: - 视频弹幕数据  # [English] ### Purpose: - Get single video danmaku data ### Parameters: - item_id: Video id - duration: Video total duration - end_time: End time - start_time: Start time ### Return: - Video danmaku data  # [示例/Example] item_id &#x3D; \&quot;7355433624046472498\&quot; duration &#x3D; 15134 end_time &#x3D; 15133 start_time &#x3D; 0
   * @param itemId 作品id/Video id (required)
   * @param duration 视频总时长/Video total duration (required)
   * @param endTime 结束时间/End time (required)
   * @param startTime 开始时间/Start time (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet (String itemId, Integer duration, Integer endTime, Integer startTime) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'itemId' when calling fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet"));
    }
    // verify the required parameter 'duration' is set
    if (duration == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'duration' when calling fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet"));
    }
    // verify the required parameter 'endTime' is set
    if (endTime == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'endTime' when calling fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet"));
    }
    // verify the required parameter 'startTime' is set
    if (startTime == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'startTime' when calling fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_one_video_danmaku";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("item_id", itemId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("duration", duration));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("end_time", endTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start_time", startTime));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单个作品视频弹幕数据/Get single video danmaku data
   * # [中文] ### 用途: - 获取单个作品视频弹幕数据 ### 参数: - item_id: 作品id - duration: 视频总时长 - end_time: 结束时间 - start_time: 开始时间 ### 返回: - 视频弹幕数据  # [English] ### Purpose: - Get single video danmaku data ### Parameters: - item_id: Video id - duration: Video total duration - end_time: End time - start_time: Start time ### Return: - Video danmaku data  # [示例/Example] item_id &#x3D; \&quot;7355433624046472498\&quot; duration &#x3D; 15134 end_time &#x3D; 15133 start_time &#x3D; 0
   * @param itemId 作品id/Video id (required)
   * @param duration 视频总时长/Video total duration (required)
   * @param endTime 结束时间/End time (required)
   * @param startTime 开始时间/Start time (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_0 (String itemId, Integer duration, Integer endTime, Integer startTime) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'itemId' when calling fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_0"));
    }
    // verify the required parameter 'duration' is set
    if (duration == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'duration' when calling fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_0"));
    }
    // verify the required parameter 'endTime' is set
    if (endTime == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'endTime' when calling fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_0"));
    }
    // verify the required parameter 'startTime' is set
    if (startTime == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'startTime' when calling fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_one_video_danmaku";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("item_id", itemId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("duration", duration));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("end_time", endTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("start_time", startTime));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音实时挑战榜单/Douyin Real-time Challenge List
   * # [中文] ### 用途: - 抖音实时挑战榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 ### 返回: - 挑战榜数据  # [English] ### Purpose: - Douyin Real-time Challenge List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 ### Return: - Challenge list data
   * @param page 页码/Page number (required)
   * @param pageSize 每页数量/Number per page (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet (Integer page, Integer pageSize) throws ApiException {
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_real_time_challenge_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音实时挑战榜单/Douyin Real-time Challenge List
   * # [中文] ### 用途: - 抖音实时挑战榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 ### 返回: - 挑战榜数据  # [English] ### Purpose: - Douyin Real-time Challenge List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 ### Return: - Challenge list data
   * @param page 页码/Page number (required)
   * @param pageSize 每页数量/Number per page (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet_0 (Integer page, Integer pageSize) throws ApiException {
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet_0"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_real_time_challenge_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音实时上升热点榜/Douyin Real-time Rising Hot List
   * # [中文] ### 用途: - 抖音实时上升热点榜 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Real-time Rising Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change ### Return: - Hotspot list data
   * @param page 页码/Page number (required)
   * @param pageSize 每页数量/Number per page (required)
   * @param sentenceTag 分类标签/Category tag (required)
   * @param order 排序方式/Sorting method (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet (Integer page, Integer pageSize, String sentenceTag, String order) throws ApiException {
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet"));
    }
    // verify the required parameter 'sentenceTag' is set
    if (sentenceTag == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'sentenceTag' when calling fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet"));
    }
    // verify the required parameter 'order' is set
    if (order == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'order' when calling fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_real_time_rising_hot_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sentence_tag", sentenceTag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order", order));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音实时上升热点榜/Douyin Real-time Rising Hot List
   * # [中文] ### 用途: - 抖音实时上升热点榜 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Real-time Rising Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change ### Return: - Hotspot list data
   * @param page 页码/Page number (required)
   * @param pageSize 每页数量/Number per page (required)
   * @param sentenceTag 分类标签/Category tag (required)
   * @param order 排序方式/Sorting method (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_0 (Integer page, Integer pageSize, String sentenceTag, String order) throws ApiException {
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_0"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_0"));
    }
    // verify the required parameter 'sentenceTag' is set
    if (sentenceTag == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'sentenceTag' when calling fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_0"));
    }
    // verify the required parameter 'order' is set
    if (order == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'order' when calling fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_real_time_rising_hot_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sentence_tag", sentenceTag));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order", order));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取相关作品推荐数据/Get related posts recommendation data
   * # [中文] ### 用途: - 获取相关作品推荐数据 ### 参数: - aweme_id: 作品id - refresh_index: 翻页索引，默认为1，然后每次增加1用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 作品数据  # [English] ### Purpose: - Get related posts recommendation data ### Parameters: - aweme_id: Video id - refresh_index: Paging index, default is 1, then increase by 1 each time for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7393365489105358132\&quot; refresh_index &#x3D; 1 count &#x3D; 20
   * @param awemeId 作品id/Video id (required)
   * @param refreshIndex 翻页索引/Paging index (optional, default to 1)
   * @param count 数量/Number (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet (String awemeId, Integer refreshIndex, Integer count) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_related_posts";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("refresh_index", refreshIndex));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取相关作品推荐数据/Get related posts recommendation data
   * # [中文] ### 用途: - 获取相关作品推荐数据 ### 参数: - aweme_id: 作品id - refresh_index: 翻页索引，默认为1，然后每次增加1用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 作品数据  # [English] ### Purpose: - Get related posts recommendation data ### Parameters: - aweme_id: Video id - refresh_index: Paging index, default is 1, then increase by 1 each time for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7393365489105358132\&quot; refresh_index &#x3D; 1 count &#x3D; 20
   * @param awemeId 作品id/Video id (required)
   * @param refreshIndex 翻页索引/Paging index (optional, default to 1)
   * @param count 数量/Number (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet_0 (String awemeId, Integer refreshIndex, Integer count) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_related_posts";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("refresh_index", refreshIndex));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 搜索话题/Search Challenge
   * # [中文] ### 用途: - 搜索话题，此接口不带Cookie请求时只能获取到前30条数据，建议自行提供Cookie获取更多数据。 - Cookie获取方式：打开网页抖音，登录后，按F12打开开发者工具，点击Network，刷新页面，找到第一个请求，复制Cookie。 ### 参数: - keyword: 关键词 - cursor: 偏移量 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Search Challenge, when this interface is requested without Cookie, only the first 30 data can be obtained, it is recommended to provide Cookie to get more data. - Cookie acquisition method: Open the Douyin webpage, log in, press F12 to open the developer tool, click Network, refresh the page, find the first request, copy the Cookie. ### Parameters: - keyword: Keyword - cursor: Offset - count: Number - cookie: User provided Cookie, used to get more data. ### Return: - Challenge search results  # [示例/Example] keyword &#x3D; \&quot;动漫\&quot; cursor &#x3D; 0 count &#x3D; 20
   * @param searchChallengeRequest  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost (SearchChallengeRequest searchChallengeRequest) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_search_challenge";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(searchChallengeRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 搜索话题/Search Challenge
   * # [中文] ### 用途: - 搜索话题，此接口不带Cookie请求时只能获取到前30条数据，建议自行提供Cookie获取更多数据。 - Cookie获取方式：打开网页抖音，登录后，按F12打开开发者工具，点击Network，刷新页面，找到第一个请求，复制Cookie。 ### 参数: - keyword: 关键词 - cursor: 偏移量 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Search Challenge, when this interface is requested without Cookie, only the first 30 data can be obtained, it is recommended to provide Cookie to get more data. - Cookie acquisition method: Open the Douyin webpage, log in, press F12 to open the developer tool, click Network, refresh the page, find the first request, copy the Cookie. ### Parameters: - keyword: Keyword - cursor: Offset - count: Number - cookie: User provided Cookie, used to get more data. ### Return: - Challenge search results  # [示例/Example] keyword &#x3D; \&quot;动漫\&quot; cursor &#x3D; 0 count &#x3D; 20
   * @param searchChallengeRequest  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost_0 (SearchChallengeRequest searchChallengeRequest) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_search_challenge";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(searchChallengeRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 短剧作品/Series Video
   * # [中文] ### 用途: - 短剧作品 ### 参数: - offset: 页码，默认为0 - count: 每页数量，默认为16 - content_type: 子类型，默认为0     - 0: 热榜     - 101: 甜宠     - 102: 搞笑     - 104: 正能量     - 105: 成长     - 106: 悬疑     - 109: 家庭     - 110: 都市     - 112: 奇幻     - 113: 玄幻     - 114: 职场     - 115: 青春     - 116: 古装     - 117: 动作     - 119: 逆袭     - 124: 其他 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie ### 返回: - 短剧作品数据  # [English] ### Purpose: - Series Video ### Parameters: - offset: Page number, default is 0 - count: Number per page, default is 16 - content_type: Subtype, default is 0     - 0: Hot list     - 101: Sweet pet     - 102: Funny     - 104: Positive energy     - 105: Growth     - 106: Suspense     - 109: Family     - 110: Urban     - 112: Fantasy     - 113: Fantasy     - 114: Workplace     - 115: Youth     - 116: Ancient costume     - 117: Action     - 119: Counterattack     - 124: Other - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Series Video data
   * @param offset 页码/Page number (required)
   * @param count 每页数量/Number per page (required)
   * @param contentType 短剧类型/Subtype (required)
   * @param cookie 用户自行提供的Cookie/User provided Cookie (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet (Integer offset, Integer count, Integer contentType, String cookie) throws ApiException {
    // verify the required parameter 'offset' is set
    if (offset == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'offset' when calling fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet"));
    }
    // verify the required parameter 'count' is set
    if (count == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'count' when calling fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet"));
    }
    // verify the required parameter 'contentType' is set
    if (contentType == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'contentType' when calling fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_series_aweme";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type", contentType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cookie", cookie));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 短剧作品/Series Video
   * # [中文] ### 用途: - 短剧作品 ### 参数: - offset: 页码，默认为0 - count: 每页数量，默认为16 - content_type: 子类型，默认为0     - 0: 热榜     - 101: 甜宠     - 102: 搞笑     - 104: 正能量     - 105: 成长     - 106: 悬疑     - 109: 家庭     - 110: 都市     - 112: 奇幻     - 113: 玄幻     - 114: 职场     - 115: 青春     - 116: 古装     - 117: 动作     - 119: 逆袭     - 124: 其他 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie ### 返回: - 短剧作品数据  # [English] ### Purpose: - Series Video ### Parameters: - offset: Page number, default is 0 - count: Number per page, default is 16 - content_type: Subtype, default is 0     - 0: Hot list     - 101: Sweet pet     - 102: Funny     - 104: Positive energy     - 105: Growth     - 106: Suspense     - 109: Family     - 110: Urban     - 112: Fantasy     - 113: Fantasy     - 114: Workplace     - 115: Youth     - 116: Ancient costume     - 117: Action     - 119: Counterattack     - 124: Other - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Series Video data
   * @param offset 页码/Page number (required)
   * @param count 每页数量/Number per page (required)
   * @param contentType 短剧类型/Subtype (required)
   * @param cookie 用户自行提供的Cookie/User provided Cookie (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_0 (Integer offset, Integer count, Integer contentType, String cookie) throws ApiException {
    // verify the required parameter 'offset' is set
    if (offset == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'offset' when calling fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_0"));
    }
    // verify the required parameter 'count' is set
    if (count == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'count' when calling fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_0"));
    }
    // verify the required parameter 'contentType' is set
    if (contentType == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'contentType' when calling fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_series_aweme";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("content_type", contentType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cookie", cookie));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户收藏作品数据/Get user collection video data
   * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection video data ### Parameters: - cookie: User&#39;s web version of Douyin Cookie (This interface requires users to provide their own Cookie) - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] cookie &#x3D; \&quot;YOUR_COOKIE\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
   * @param cookie 用户网页版抖音Cookie/Your web version of Douyin Cookie (required)
   * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
   * @param counts 每页数量/Number per page (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet (String cookie, Integer maxCursor, Integer counts) throws ApiException {
    // verify the required parameter 'cookie' is set
    if (cookie == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'cookie' when calling fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_collection_videos";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cookie", cookie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_cursor", maxCursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("counts", counts));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户收藏作品数据/Get user collection video data
   * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection video data ### Parameters: - cookie: User&#39;s web version of Douyin Cookie (This interface requires users to provide their own Cookie) - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] cookie &#x3D; \&quot;YOUR_COOKIE\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
   * @param cookie 用户网页版抖音Cookie/Your web version of Douyin Cookie (required)
   * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
   * @param counts 每页数量/Number per page (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet_0 (String cookie, Integer maxCursor, Integer counts) throws ApiException {
    // verify the required parameter 'cookie' is set
    if (cookie == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'cookie' when calling fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_collection_videos";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cookie", cookie));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_cursor", maxCursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("counts", counts));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户收藏夹数据/Get user collection data
   * # [中文] ### 用途: - 获取用户收藏夹数据 ### 参数: - collects_id: 收藏夹id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection data ### Parameters: - collects_id: Collection id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] collects_id &#x3D; \&quot;\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
   * @param collectsId 收藏夹id/Collection id (required)
   * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
   * @param counts 每页数量/Number per page (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet (String collectsId, Integer maxCursor, Integer counts) throws ApiException {
    // verify the required parameter 'collectsId' is set
    if (collectsId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'collectsId' when calling fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_collects_videos";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("collects_id", collectsId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_cursor", maxCursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("counts", counts));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户收藏夹数据/Get user collection data
   * # [中文] ### 用途: - 获取用户收藏夹数据 ### 参数: - collects_id: 收藏夹id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection data ### Parameters: - collects_id: Collection id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] collects_id &#x3D; \&quot;\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
   * @param collectsId 收藏夹id/Collection id (required)
   * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
   * @param counts 每页数量/Number per page (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet_0 (String collectsId, Integer maxCursor, Integer counts) throws ApiException {
    // verify the required parameter 'collectsId' is set
    if (collectsId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'collectsId' when calling fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_collects_videos";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("collects_id", collectsId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_cursor", maxCursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("counts", counts));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音用户粉丝兴趣/Douyin User Fans Interest
   * # [中文] ### 用途: - 抖音用户粉丝兴趣 ### 参数: - sec_uid: 用户sec_uid - interest_type: 兴趣类型，默认为search     - similar_author: 粉丝感兴趣同类型作者     - interest_topic: 粉丝近3天感兴趣的话题     - search: 粉丝近3天搜索词 ### 返回: - 用户粉丝兴趣数据  # [English] ### Purpose: - Douyin User Fans Interest ### Parameters: - sec_uid: Sec_uid of user - interest_type: Interest type, default is search     - similar_author: Fans interested in the same type of author     - interest_topic: Topics that fans are interested in the last 3 days     - search: Search terms for fans in the last 3 days ### Return: - User fans interest data
   * @param secUid 用户sec_uid/Sec_uid of user (required)
   * @param interestType 兴趣类型/Interest type (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet (String secUid, String interestType) throws ApiException {
    // verify the required parameter 'secUid' is set
    if (secUid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUid' when calling fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet"));
    }
    // verify the required parameter 'interestType' is set
    if (interestType == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'interestType' when calling fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_fans_interest";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_uid", secUid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interest_type", interestType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音用户粉丝兴趣/Douyin User Fans Interest
   * # [中文] ### 用途: - 抖音用户粉丝兴趣 ### 参数: - sec_uid: 用户sec_uid - interest_type: 兴趣类型，默认为search     - similar_author: 粉丝感兴趣同类型作者     - interest_topic: 粉丝近3天感兴趣的话题     - search: 粉丝近3天搜索词 ### 返回: - 用户粉丝兴趣数据  # [English] ### Purpose: - Douyin User Fans Interest ### Parameters: - sec_uid: Sec_uid of user - interest_type: Interest type, default is search     - similar_author: Fans interested in the same type of author     - interest_topic: Topics that fans are interested in the last 3 days     - search: Search terms for fans in the last 3 days ### Return: - User fans interest data
   * @param secUid 用户sec_uid/Sec_uid of user (required)
   * @param interestType 兴趣类型/Interest type (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet_0 (String secUid, String interestType) throws ApiException {
    // verify the required parameter 'secUid' is set
    if (secUid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUid' when calling fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet_0"));
    }
    // verify the required parameter 'interestType' is set
    if (interestType == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'interestType' when calling fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_fans_interest";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_uid", secUid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("interest_type", interestType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户粉丝列表/Get user fans list
   * # [中文] ### 用途: - 获取用户粉丝列表 - 第一次请求时，max_time传&#x60;0&#x60;，source_type传&#x60;2&#x60;，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传&#x60;1&#x60;，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。  ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为&#x60;1&#x60;，第一次请求时使用&#x60;2&#x60;作为来源类型，然后再次请求时使用&#x60;1&#x60;作为来源类型。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list - When requesting for the first time, pass &#x60;0&#x60; for max_time, pass &#x60;2&#x60; for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass &#x60;1&#x60; for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is &#x60;1&#x60;, use &#x60;2&#x60; as the source type for the first request, and then use &#x60;1&#x60; as the source type for the subsequent request. ### Return: - Fans list  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\&quot; max_time &#x3D; \&quot;0\&quot; count &#x3D; 20 source_type &#x3D; 2
   * @param secUserId 用户sec_user_id/User sec_user_id (optional, default to &quot;MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70&quot;)
   * @param maxTime 最大时间戳/Maximum timestamp (optional, default to &quot;0&quot;)
   * @param count 数量/Number (optional, default to 20)
   * @param sourceType 来源类型/Source type (optional, default to 1)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFansListApiV1DouyinWebFetchUserFansListGet (String secUserId, String maxTime, Integer count, Integer sourceType) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_fans_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_time", maxTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("source_type", sourceType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFansListApiV1DouyinWebFetchUserFansListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户粉丝列表/Get user fans list
   * # [中文] ### 用途: - 获取用户粉丝列表 - 第一次请求时，max_time传&#x60;0&#x60;，source_type传&#x60;2&#x60;，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传&#x60;1&#x60;，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。  ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为&#x60;1&#x60;，第一次请求时使用&#x60;2&#x60;作为来源类型，然后再次请求时使用&#x60;1&#x60;作为来源类型。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list - When requesting for the first time, pass &#x60;0&#x60; for max_time, pass &#x60;2&#x60; for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass &#x60;1&#x60; for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is &#x60;1&#x60;, use &#x60;2&#x60; as the source type for the first request, and then use &#x60;1&#x60; as the source type for the subsequent request. ### Return: - Fans list  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\&quot; max_time &#x3D; \&quot;0\&quot; count &#x3D; 20 source_type &#x3D; 2
   * @param secUserId 用户sec_user_id/User sec_user_id (optional, default to &quot;MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70&quot;)
   * @param maxTime 最大时间戳/Maximum timestamp (optional, default to &quot;0&quot;)
   * @param count 数量/Number (optional, default to 20)
   * @param sourceType 来源类型/Source type (optional, default to 1)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFansListApiV1DouyinWebFetchUserFansListGet_0 (String secUserId, String maxTime, Integer count, Integer sourceType) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_fans_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_time", maxTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("source_type", sourceType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFansListApiV1DouyinWebFetchUserFansListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音用户粉丝画像/Douyin User Fans Portrait
   * # [中文] ### 用途: - 抖音用户粉丝画像 ### 参数: - sec_uid: 用户sec_uid - option: 选项，默认为1     - 1: 粉丝手机价格分布     - 2: 粉丝性别分布     - 3: 粉丝年龄分布     - 4: 粉丝地域分布(省份)     - 5: 粉丝地域分布（城市）     - 6: 粉丝城市等级分布     - 7: 粉丝手机品牌分布     - 8: 粉丝兴趣 ### 返回: - 用户粉丝画像数据  # [English] ### Purpose: - Douyin User Fans Portrait ### Parameters: - sec_uid: Sec_uid of user - option: Option, default is 1     - 1: Fans mobile phone price distribution     - 2: Fans gender distribution     - 3: Fans age distribution     - 4: Fans regional distribution (province)     - 5: Fans regional distribution (city)     - 6: Fans city level distribution     - 7: Fans mobile phone brand distribution     - 8: Fans interests ### Return: - User fans portrait data
   * @param secUid 用户sec_uid/Sec_uid of user (required)
   * @param option 选项/Option (optional, default to &quot;1&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet (String secUid, String option) throws ApiException {
    // verify the required parameter 'secUid' is set
    if (secUid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUid' when calling fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_fans_portrait";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_uid", secUid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("option", option));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音用户粉丝画像/Douyin User Fans Portrait
   * # [中文] ### 用途: - 抖音用户粉丝画像 ### 参数: - sec_uid: 用户sec_uid - option: 选项，默认为1     - 1: 粉丝手机价格分布     - 2: 粉丝性别分布     - 3: 粉丝年龄分布     - 4: 粉丝地域分布(省份)     - 5: 粉丝地域分布（城市）     - 6: 粉丝城市等级分布     - 7: 粉丝手机品牌分布     - 8: 粉丝兴趣 ### 返回: - 用户粉丝画像数据  # [English] ### Purpose: - Douyin User Fans Portrait ### Parameters: - sec_uid: Sec_uid of user - option: Option, default is 1     - 1: Fans mobile phone price distribution     - 2: Fans gender distribution     - 3: Fans age distribution     - 4: Fans regional distribution (province)     - 5: Fans regional distribution (city)     - 6: Fans city level distribution     - 7: Fans mobile phone brand distribution     - 8: Fans interests ### Return: - User fans portrait data
   * @param secUid 用户sec_uid/Sec_uid of user (required)
   * @param option 选项/Option (optional, default to &quot;1&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet_0 (String secUid, String option) throws ApiException {
    // verify the required parameter 'secUid' is set
    if (secUid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUid' when calling fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_fans_portrait";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_uid", secUid));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("option", option));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户关注列表/Get user following list
   * # [中文] ### 用途: - 获取用户关注列表 - 第一次请求时，max_time传&#x60;0&#x60;，source_type传&#x60;2&#x60;，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传&#x60;1&#x60;，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为&#x60;1&#x60;，第一次请求时使用&#x60;2&#x60;作为来源类型，然后再次请求时使用&#x60;1&#x60;作为来源类型。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list - When requesting for the first time, pass &#x60;0&#x60; for max_time, pass &#x60;2&#x60; for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass &#x60;1&#x60; for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is &#x60;1&#x60;, use &#x60;2&#x60; as the source type for the first request, and then use &#x60;1&#x60; as the source type for the subsequent request. ### Return: - Following list  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\&quot; max_time &#x3D; \&quot;0\&quot; count &#x3D; 20 source_type &#x3D; 2
   * @param secUserId 用户sec_user_id/User sec_user_id (optional, default to &quot;MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70&quot;)
   * @param maxTime 最大时间戳/Maximum timestamp (optional, default to &quot;0&quot;)
   * @param count 数量/Number (optional, default to 20)
   * @param sourceType 来源类型/Source type (optional, default to 1)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet (String secUserId, String maxTime, Integer count, Integer sourceType) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_following_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_time", maxTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("source_type", sourceType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户关注列表/Get user following list
   * # [中文] ### 用途: - 获取用户关注列表 - 第一次请求时，max_time传&#x60;0&#x60;，source_type传&#x60;2&#x60;，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传&#x60;1&#x60;，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为&#x60;1&#x60;，第一次请求时使用&#x60;2&#x60;作为来源类型，然后再次请求时使用&#x60;1&#x60;作为来源类型。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list - When requesting for the first time, pass &#x60;0&#x60; for max_time, pass &#x60;2&#x60; for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass &#x60;1&#x60; for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is &#x60;1&#x60;, use &#x60;2&#x60; as the source type for the first request, and then use &#x60;1&#x60; as the source type for the subsequent request. ### Return: - Following list  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\&quot; max_time &#x3D; \&quot;0\&quot; count &#x3D; 20 source_type &#x3D; 2
   * @param secUserId 用户sec_user_id/User sec_user_id (optional, default to &quot;MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70&quot;)
   * @param maxTime 最大时间戳/Maximum timestamp (optional, default to &quot;0&quot;)
   * @param count 数量/Number (optional, default to 20)
   * @param sourceType 来源类型/Source type (optional, default to 1)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet_0 (String secUserId, String maxTime, Integer count, Integer sourceType) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_following_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_time", maxTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("source_type", sourceType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户喜欢作品数据/Get user like video data
   * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标 - count: 最大数量 - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor - count: Maximum count number - cookie: User&#39;s web version of Douyin Cookie (This interface requires users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
   * @param secUserId 用户sec_user_id/User sec_user_id (required)
   * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
   * @param counts 每页数量/Number per page (optional, default to 20)
   * @param cookie 用户网页版抖音Cookie/Your web version of Douyin Cookie (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet (String secUserId, Integer maxCursor, Integer counts, String cookie) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_like_videos";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_cursor", maxCursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("counts", counts));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cookie", cookie));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户喜欢作品数据/Get user like video data
   * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标 - count: 最大数量 - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor - count: Maximum count number - cookie: User&#39;s web version of Douyin Cookie (This interface requires users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
   * @param secUserId 用户sec_user_id/User sec_user_id (required)
   * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
   * @param counts 每页数量/Number per page (optional, default to 20)
   * @param cookie 用户网页版抖音Cookie/Your web version of Douyin Cookie (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet_0 (String secUserId, Integer maxCursor, Integer counts, String cookie) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_like_videos";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_cursor", maxCursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("counts", counts));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cookie", cookie));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 使用UID获取用户开播信息/Get user live information by UID
   * # [中文] ### 用途: - 使用UID获取用户开播信息 ### 参数: - uid: 用户UID ### 返回: - 用户开播信息，包含room_id与live_status  # [English] ### Purpose: - Get user live information by UID ### Parameters: - uid: User UID ### Return: - User live information, including room_id and live_status  # [示例/Example] uid &#x3D; \&quot;3081254195702747\&quot;
   * @param uid 用户UID/User UID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet (String uid) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uid' when calling fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_live_info_by_uid";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uid", uid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 使用UID获取用户开播信息/Get user live information by UID
   * # [中文] ### 用途: - 使用UID获取用户开播信息 ### 参数: - uid: 用户UID ### 返回: - 用户开播信息，包含room_id与live_status  # [English] ### Purpose: - Get user live information by UID ### Parameters: - uid: User UID ### Return: - User live information, including room_id and live_status  # [示例/Example] uid &#x3D; \&quot;3081254195702747\&quot;
   * @param uid 用户UID/User UID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet_0 (String uid) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uid' when calling fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_live_info_by_uid";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uid", uid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户直播流数据/Get user live video data
   * # [中文] ### 用途: - 获取用户直播流数据 ### 参数: - webcast_id: 直播间 webcast_id - 获取方法：     - 假设你的直播间链接为：https://www.douyin.com/root/live/376034101029     - 那么直播间webcast_id为：376034101029     - webcast_id为直播间链接的最后一段数字，与room_id不同。 ### 返回: - 直播流数据  # [English] ### Purpose: - Get user live video data ### Parameters: - webcast_id: Room webcast_id - Acquisition method:     - Assuming your live room link is: https://www.douyin.com/root/live/376034101029     - Then the live room webcast_id is: 376034101029     - The webcast_id is the last number of the live room link, which is different from the room_id. ### Return: - Live stream data  # [示例/Example] webcast_id &#x3D; \&quot;376034101029\&quot;
   * @param webcastId 直播间webcast_id/Room webcast_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet (String webcastId) throws ApiException {
    // verify the required parameter 'webcastId' is set
    if (webcastId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'webcastId' when calling fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_live_videos";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("webcast_id", webcastId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户直播流数据/Get user live video data
   * # [中文] ### 用途: - 获取用户直播流数据 ### 参数: - webcast_id: 直播间 webcast_id - 获取方法：     - 假设你的直播间链接为：https://www.douyin.com/root/live/376034101029     - 那么直播间webcast_id为：376034101029     - webcast_id为直播间链接的最后一段数字，与room_id不同。 ### 返回: - 直播流数据  # [English] ### Purpose: - Get user live video data ### Parameters: - webcast_id: Room webcast_id - Acquisition method:     - Assuming your live room link is: https://www.douyin.com/root/live/376034101029     - Then the live room webcast_id is: 376034101029     - The webcast_id is the last number of the live room link, which is different from the room_id. ### Return: - Live stream data  # [示例/Example] webcast_id &#x3D; \&quot;376034101029\&quot;
   * @param webcastId 直播间webcast_id/Room webcast_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet_0 (String webcastId) throws ApiException {
    // verify the required parameter 'webcastId' is set
    if (webcastId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'webcastId' when calling fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_live_videos";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("webcast_id", webcastId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定用户的直播流数据/Get live video data of specified user
   * # [中文] ### 用途: - 获取指定用户的直播流数据 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Get live video data of specified user ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id &#x3D; \&quot;7318296342189919011\&quot;
   * @param roomId 直播间room_id/Room room_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet (String roomId) throws ApiException {
    // verify the required parameter 'roomId' is set
    if (roomId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'roomId' when calling fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_live_videos_by_room_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("room_id", roomId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定用户的直播流数据/Get live video data of specified user
   * # [中文] ### 用途: - 获取指定用户的直播流数据 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Get live video data of specified user ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id &#x3D; \&quot;7318296342189919011\&quot;
   * @param roomId 直播间room_id/Room room_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet_0 (String roomId) throws ApiException {
    // verify the required parameter 'roomId' is set
    if (roomId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'roomId' when calling fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_live_videos_by_room_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("room_id", roomId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定用户的直播流数据V2/Gets the live stream data of the specified user V2
   * # [中文] ### 用途: - 获取指定用户的直播流数据V2 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Gets the live stream data of the specified user V2 ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id &#x3D; \&quot;7462723839303093032\&quot;
   * @param roomId 直播间room_id/Room room_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get (String roomId) throws ApiException {
    // verify the required parameter 'roomId' is set
    if (roomId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'roomId' when calling fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_live_videos_by_room_id_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("room_id", roomId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定用户的直播流数据V2/Gets the live stream data of the specified user V2
   * # [中文] ### 用途: - 获取指定用户的直播流数据V2 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Gets the live stream data of the specified user V2 ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id &#x3D; \&quot;7462723839303093032\&quot;
   * @param roomId 直播间room_id/Room room_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get_0 (String roomId) throws ApiException {
    // verify the required parameter 'roomId' is set
    if (roomId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'roomId' when calling fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_live_videos_by_room_id_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("room_id", roomId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 通过sec_uid获取指定用户的直播流数据/Get live video data of specified user by sec_uid
   * # [中文] ### 用途: - 通过sec_uid获取指定用户的直播流数据 ### 参数: - sec_uid: 用户sec_uid，也叫 sec_user_id，可以在用户主页链接中找到。 ### 返回: - 直播流数据  # [English] ### Purpose - Get live video data of specified user by sec_uid ### Parameters - sec_uid: User sec_uid, also called sec_user_id, can be found in the user&#39;s homepage link. ### Return - Live stream data  # [示例/Example] sec_uid &#x3D; \&quot;MS4wLjABAAAAAIKOBr_x6p2fPVKOAhqG8LrC1lwwdWChifKEsl-TXFS-kGSGqpMBRexJdzoAfvUF\&quot;
   * @param secUid 用户sec_uid/User sec_uid (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet (String secUid) throws ApiException {
    // verify the required parameter 'secUid' is set
    if (secUid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUid' when calling fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_live_videos_by_sec_uid";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_uid", secUid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 通过sec_uid获取指定用户的直播流数据/Get live video data of specified user by sec_uid
   * # [中文] ### 用途: - 通过sec_uid获取指定用户的直播流数据 ### 参数: - sec_uid: 用户sec_uid，也叫 sec_user_id，可以在用户主页链接中找到。 ### 返回: - 直播流数据  # [English] ### Purpose - Get live video data of specified user by sec_uid ### Parameters - sec_uid: User sec_uid, also called sec_user_id, can be found in the user&#39;s homepage link. ### Return - Live stream data  # [示例/Example] sec_uid &#x3D; \&quot;MS4wLjABAAAAAIKOBr_x6p2fPVKOAhqG8LrC1lwwdWChifKEsl-TXFS-kGSGqpMBRexJdzoAfvUF\&quot;
   * @param secUid 用户sec_uid/User sec_uid (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet_0 (String secUid) throws ApiException {
    // verify the required parameter 'secUid' is set
    if (secUid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUid' when calling fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_live_videos_by_sec_uid";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_uid", secUid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户合辑作品数据/Get user mix video data
   * # [中文] ### 用途: - 获取用户合辑作品数据 ### 参数: - mix_id: 合辑id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user mix video data ### Parameters: - mix_id: Mix id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] url &#x3D; https://www.douyin.com/collection/7348687990509553679 mix_id &#x3D; \&quot;7348687990509553679\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
   * @param mixId 合辑id/Mix id (required)
   * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
   * @param counts 每页数量/Number per page (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet (String mixId, Integer maxCursor, Integer counts) throws ApiException {
    // verify the required parameter 'mixId' is set
    if (mixId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'mixId' when calling fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_mix_videos";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mix_id", mixId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_cursor", maxCursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("counts", counts));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户合辑作品数据/Get user mix video data
   * # [中文] ### 用途: - 获取用户合辑作品数据 ### 参数: - mix_id: 合辑id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user mix video data ### Parameters: - mix_id: Mix id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] url &#x3D; https://www.douyin.com/collection/7348687990509553679 mix_id &#x3D; \&quot;7348687990509553679\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
   * @param mixId 合辑id/Mix id (required)
   * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
   * @param counts 每页数量/Number per page (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet_0 (String mixId, Integer maxCursor, Integer counts) throws ApiException {
    // verify the required parameter 'mixId' is set
    if (mixId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'mixId' when calling fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_mix_videos";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("mix_id", mixId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_cursor", maxCursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("counts", counts));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户主页作品数据/Get user homepage video data
   * # [中文] ### 用途: - 获取用户主页作品数据 - 注意：请尽量使用APP的接口而不是WEB的接口，因为WEB的接口可能会被不稳定。 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 翻页游标，第一次请求传0，然后每次请求传上一次请求返回的max_cursor进行翻页。 - count: 最大数量，建议不要超过20 - filter_type: 过滤类型，可选参数如下：     - 0: 默认排序     - 3: 热度排序 - cookie: 用户网页版抖音Cookie(此接口可以接受用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data - Note: Please try to use the APP interface instead of the WEB API, because the WEB API may be unstable. ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Paging cursor, pass 0 for the first request, and then pass the max_cursor returned by the previous request for paging each time. - count: Maximum count number, it is recommended not to exceed 20 - filter_type: Filter type, optional parameters are as follows:     - 0: Default sorting     - 3: Sort by popularity - cookie: User&#39;s web version of Douyin Cookie (This interface can accept users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\&quot; max_cursor &#x3D; \&quot;0\&quot; counts &#x3D; 20 filter_type &#x3D; \&quot;0\&quot;
   * @param secUserId 用户sec_user_id/User sec_user_id (required)
   * @param maxCursor 最大游标/Maximum cursor (optional, default to &quot;0&quot;)
   * @param count 每页数量/Number per page (optional, default to 20)
   * @param filterType 过滤类型/Filter type (optional, default to &quot;0&quot;)
   * @param cookie 用户网页版抖音Cookie/Your web version of Douyin Cookie (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet (String secUserId, String maxCursor, Integer count, String filterType, String cookie) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_post_videos";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_cursor", maxCursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter_type", filterType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cookie", cookie));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户主页作品数据/Get user homepage video data
   * # [中文] ### 用途: - 获取用户主页作品数据 - 注意：请尽量使用APP的接口而不是WEB的接口，因为WEB的接口可能会被不稳定。 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 翻页游标，第一次请求传0，然后每次请求传上一次请求返回的max_cursor进行翻页。 - count: 最大数量，建议不要超过20 - filter_type: 过滤类型，可选参数如下：     - 0: 默认排序     - 3: 热度排序 - cookie: 用户网页版抖音Cookie(此接口可以接受用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data - Note: Please try to use the APP interface instead of the WEB API, because the WEB API may be unstable. ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Paging cursor, pass 0 for the first request, and then pass the max_cursor returned by the previous request for paging each time. - count: Maximum count number, it is recommended not to exceed 20 - filter_type: Filter type, optional parameters are as follows:     - 0: Default sorting     - 3: Sort by popularity - cookie: User&#39;s web version of Douyin Cookie (This interface can accept users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\&quot; max_cursor &#x3D; \&quot;0\&quot; counts &#x3D; 20 filter_type &#x3D; \&quot;0\&quot;
   * @param secUserId 用户sec_user_id/User sec_user_id (required)
   * @param maxCursor 最大游标/Maximum cursor (optional, default to &quot;0&quot;)
   * @param count 每页数量/Number per page (optional, default to 20)
   * @param filterType 过滤类型/Filter type (optional, default to &quot;0&quot;)
   * @param cookie 用户网页版抖音Cookie/Your web version of Douyin Cookie (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet_0 (String secUserId, String maxCursor, Integer count, String filterType, String cookie) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_post_videos";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_cursor", maxCursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter_type", filterType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cookie", cookie));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 使用Short ID获取用户信息/Get user information by Short ID
   * # [中文] ### 用途: - 使用Short ID获取用户信息 ### 参数: - short_id: 用户Short ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by Short ID ### Parameters: - short_id: User Short ID ### Return: - User information  # [示例/Example] short_id &#x3D; \&quot;114131058\&quot;
   * @param shortId 用户Short ID/User Short ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet (String shortId) throws ApiException {
    // verify the required parameter 'shortId' is set
    if (shortId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'shortId' when calling fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_profile_by_short_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("short_id", shortId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 使用Short ID获取用户信息/Get user information by Short ID
   * # [中文] ### 用途: - 使用Short ID获取用户信息 ### 参数: - short_id: 用户Short ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by Short ID ### Parameters: - short_id: User Short ID ### Return: - User information  # [示例/Example] short_id &#x3D; \&quot;114131058\&quot;
   * @param shortId 用户Short ID/User Short ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet_0 (String shortId) throws ApiException {
    // verify the required parameter 'shortId' is set
    if (shortId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'shortId' when calling fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_profile_by_short_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("short_id", shortId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 使用UID获取用户信息/Get user information by UID
   * # [中文] ### 用途: - 使用UID获取用户信息 ### 参数: - uid: 用户UID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by UID ### Parameters: - uid: User UID ### Return: - User information  # [示例/Example] uid &#x3D; \&quot;68141954464\&quot;
   * @param uid 用户UID/User UID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet (String uid) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uid' when calling fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_profile_by_uid";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uid", uid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 使用UID获取用户信息/Get user information by UID
   * # [中文] ### 用途: - 使用UID获取用户信息 ### 参数: - uid: 用户UID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by UID ### Parameters: - uid: User UID ### Return: - User information  # [示例/Example] uid &#x3D; \&quot;68141954464\&quot;
   * @param uid 用户UID/User UID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet_0 (String uid) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uid' when calling fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_profile_by_uid";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uid", uid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的用户搜索结果(已废弃，使用V2或V3接口代替)/Get user search results of specified keywords (deprecated, use V2 or V3 interface instead)
   * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - douyin_user_fans: 留空:不限, \&quot;0_1k\&quot;: 1000以下, \&quot;1k_1w\&quot;: 1000-1万, \&quot;1w_10w\&quot;: 1w-10w, \&quot;10w_100w\&quot;: 10w-100w，\&quot;100w_\&quot;: 100w以上 - douyin_user_type: 留空:不限, \&quot;common_user\&quot;: 普通用户, \&quot;enterprise_user\&quot;: 企业认证, \&quot;personal_user\&quot;: 个人认证 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - douyin_user_fans: Leave blank: Unlimited, \&quot;0_1k\&quot;: Below 1000, \&quot;1k_1w\&quot;: 1000-10,000, \&quot;1w_10w\&quot;: 10,000-100,000, \&quot;10w_100w\&quot;: 100,000-1 million, \&quot;100w_\&quot;: More than 1 million - douyin_user_type: Leave blank: Unlimited, \&quot;common_user\&quot;: Ordinary user, \&quot;enterprise_user\&quot;: Enterprise certification, \&quot;personal_user\&quot;: Personal certification - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - User search results  # [示例/Example] keyword &#x3D; \&quot;动漫\&quot; offset &#x3D; 0 count &#x3D; 20 douyin_user_fans &#x3D; \&quot;\&quot; douyin_user_type &#x3D; \&quot;\&quot; search_id &#x3D; \&quot;\&quot;
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @param douyinUserFans 粉丝数/Fans (optional, default to &quot;&quot;)
   * @param douyinUserType 用户类型/User type (optional, default to &quot;&quot;)
   * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<ResponseModel> fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet (String keyword, Integer offset, Integer count, String douyinUserFans, String douyinUserType, String searchId) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("douyin_user_fans", douyinUserFans));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("douyin_user_type", douyinUserType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_id", searchId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的用户搜索结果(已废弃，使用V2或V3接口代替)/Get user search results of specified keywords (deprecated, use V2 or V3 interface instead)
   * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - douyin_user_fans: 留空:不限, \&quot;0_1k\&quot;: 1000以下, \&quot;1k_1w\&quot;: 1000-1万, \&quot;1w_10w\&quot;: 1w-10w, \&quot;10w_100w\&quot;: 10w-100w，\&quot;100w_\&quot;: 100w以上 - douyin_user_type: 留空:不限, \&quot;common_user\&quot;: 普通用户, \&quot;enterprise_user\&quot;: 企业认证, \&quot;personal_user\&quot;: 个人认证 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - douyin_user_fans: Leave blank: Unlimited, \&quot;0_1k\&quot;: Below 1000, \&quot;1k_1w\&quot;: 1000-10,000, \&quot;1w_10w\&quot;: 10,000-100,000, \&quot;10w_100w\&quot;: 100,000-1 million, \&quot;100w_\&quot;: More than 1 million - douyin_user_type: Leave blank: Unlimited, \&quot;common_user\&quot;: Ordinary user, \&quot;enterprise_user\&quot;: Enterprise certification, \&quot;personal_user\&quot;: Personal certification - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - User search results  # [示例/Example] keyword &#x3D; \&quot;动漫\&quot; offset &#x3D; 0 count &#x3D; 20 douyin_user_fans &#x3D; \&quot;\&quot; douyin_user_type &#x3D; \&quot;\&quot; search_id &#x3D; \&quot;\&quot;
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @param douyinUserFans 粉丝数/Fans (optional, default to &quot;&quot;)
   * @param douyinUserType 用户类型/User type (optional, default to &quot;&quot;)
   * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<ResponseModel> fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet_0 (String keyword, Integer offset, Integer count, String douyinUserFans, String douyinUserType, String searchId) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("douyin_user_fans", douyinUserFans));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("douyin_user_type", douyinUserType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_id", searchId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的用户搜索结果V2/Get user search results of specified keywords V2
   * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V2 ### 参数: - keyword: 关键词 - cursor: 游标，第一次请求时为0，后续从返回数据中获取，用于翻页。 ### 返回: - 用户搜索结果V2  # [English] ### Purpose: - Get user search results of specified keywords V2 ### Parameters: - keyword: Keyword - cursor: Cursor, 0 for the first request, get from the returned data later, used for paging. ### Return: - User search results V2  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; cursor &#x3D; 0
   * @param keyword 关键词/Keyword (required)
   * @param cursor 游标/Cursor (optional, default to 0)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get (String keyword, Integer cursor) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_search_result_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的用户搜索结果V2/Get user search results of specified keywords V2
   * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V2 ### 参数: - keyword: 关键词 - cursor: 游标，第一次请求时为0，后续从返回数据中获取，用于翻页。 ### 返回: - 用户搜索结果V2  # [English] ### Purpose: - Get user search results of specified keywords V2 ### Parameters: - keyword: Keyword - cursor: Cursor, 0 for the first request, get from the returned data later, used for paging. ### Return: - User search results V2  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; cursor &#x3D; 0
   * @param keyword 关键词/Keyword (required)
   * @param cursor 游标/Cursor (optional, default to 0)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get_0 (String keyword, Integer cursor) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_search_result_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的用户搜索结果V3/Get user search results of specified keywords V3
   * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V3 ### 参数: - keyword: 关键词 - cursor: 偏移量 - douyin_user_fans: 留空:不限, \&quot;0_1k\&quot;: 1000以下, \&quot;1k_1w\&quot;: 1000-1万, \&quot;1w_10w\&quot;: 1w-10w, \&quot;10w_100w\&quot;: 10w-100w，\&quot;100w_\&quot;: 100w以上 - douyin_user_type: 留空:不限, \&quot;common_user\&quot;: 普通用户, \&quot;enterprise_user\&quot;: 企业认证, \&quot;personal_user\&quot;: 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords V3 ### Parameters: - keyword: Keyword - cursor: Offset - douyin_user_fans: Leave blank: Unlimited, \&quot;0_1k\&quot;: Below 1000, \&quot;1k_1w\&quot;: 1000-10,000, \&quot;1w_10w\&quot;: 10,000-100,000, \&quot;10w_100w\&quot;: 100,000-1 million, \&quot;100w_\&quot;: More than 1 million - douyin_user_type: Leave blank: Unlimited, \&quot;common_user\&quot;: Ordinary user, \&quot;enterprise_user\&quot;: Enterprise certification, \&quot;personal_user\&quot;: Personal certification ### Return: - User search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; cursor &#x3D; \&quot;0\&quot; douyin_user_fans &#x3D; \&quot;\&quot; douyin_user_type &#x3D; \&quot;\&quot;
   * @param keyword 关键词/Keyword (required)
   * @param cursor 游标/Cursor (optional, default to &quot;0&quot;)
   * @param douyinUserType 用户类型/User type (optional, default to &quot;&quot;)
   * @param douyinUserFans 粉丝数/Fans (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get (String keyword, String cursor, String douyinUserType, String douyinUserFans) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_search_result_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("douyin_user_type", douyinUserType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("douyin_user_fans", douyinUserFans));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的用户搜索结果V3/Get user search results of specified keywords V3
   * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V3 ### 参数: - keyword: 关键词 - cursor: 偏移量 - douyin_user_fans: 留空:不限, \&quot;0_1k\&quot;: 1000以下, \&quot;1k_1w\&quot;: 1000-1万, \&quot;1w_10w\&quot;: 1w-10w, \&quot;10w_100w\&quot;: 10w-100w，\&quot;100w_\&quot;: 100w以上 - douyin_user_type: 留空:不限, \&quot;common_user\&quot;: 普通用户, \&quot;enterprise_user\&quot;: 企业认证, \&quot;personal_user\&quot;: 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords V3 ### Parameters: - keyword: Keyword - cursor: Offset - douyin_user_fans: Leave blank: Unlimited, \&quot;0_1k\&quot;: Below 1000, \&quot;1k_1w\&quot;: 1000-10,000, \&quot;1w_10w\&quot;: 10,000-100,000, \&quot;10w_100w\&quot;: 100,000-1 million, \&quot;100w_\&quot;: More than 1 million - douyin_user_type: Leave blank: Unlimited, \&quot;common_user\&quot;: Ordinary user, \&quot;enterprise_user\&quot;: Enterprise certification, \&quot;personal_user\&quot;: Personal certification ### Return: - User search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; cursor &#x3D; \&quot;0\&quot; douyin_user_fans &#x3D; \&quot;\&quot; douyin_user_type &#x3D; \&quot;\&quot;
   * @param keyword 关键词/Keyword (required)
   * @param cursor 游标/Cursor (optional, default to &quot;0&quot;)
   * @param douyinUserType 用户类型/User type (optional, default to &quot;&quot;)
   * @param douyinUserFans 粉丝数/Fans (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get_0 (String keyword, String cursor, String douyinUserType, String douyinUserFans) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_user_search_result_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("douyin_user_type", douyinUserType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("douyin_user_fans", douyinUserFans));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音视频榜单/Douyin Video Billboard
   * # [中文] ### 用途: - 抖音视频榜单 ### 参数: - date: 日期，默认为24     - 1: 一小时内     - 24: 一天内     - 72: 3天内     - 168: 7天内 - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sub_type: 子类型，默认为1001     - 1001: 视频总榜     - 1002: 低粉爆款     - 1003: 高完播率     - 1004: 高涨粉率     - 1005: 高点赞率 ### 返回: - 视频榜单数据  # [English] ### Purpose: - Douyin Video Billboard ### Parameters: - date: Date, default is 24     - 1: Within an hour     - 24: Within a day     - 72: Within 3 days     - 168: Within 7 days - page: Page number, default is 1 - page_size: Number per page, default is 10 - sub_type: Subtype, default is 1001     - 1001: Total video list     - 1002: Low fans explosion     - 1003: High completion rate     - 1004: High increase rate     - 1005: High like rate ### Return: - Video billboard data
   * @param date 日期/Date (required)
   * @param page 页码/Page number (required)
   * @param pageSize 每页数量/Number per page (required)
   * @param subType 子类型/Subtype (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet (Integer date, Integer page, Integer pageSize, Integer subType) throws ApiException {
    // verify the required parameter 'date' is set
    if (date == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'date' when calling fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet"));
    }
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet"));
    }
    // verify the required parameter 'subType' is set
    if (subType == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'subType' when calling fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_video_billboard";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("date", date));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sub_type", subType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音视频榜单/Douyin Video Billboard
   * # [中文] ### 用途: - 抖音视频榜单 ### 参数: - date: 日期，默认为24     - 1: 一小时内     - 24: 一天内     - 72: 3天内     - 168: 7天内 - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sub_type: 子类型，默认为1001     - 1001: 视频总榜     - 1002: 低粉爆款     - 1003: 高完播率     - 1004: 高涨粉率     - 1005: 高点赞率 ### 返回: - 视频榜单数据  # [English] ### Purpose: - Douyin Video Billboard ### Parameters: - date: Date, default is 24     - 1: Within an hour     - 24: Within a day     - 72: Within 3 days     - 168: Within 7 days - page: Page number, default is 1 - page_size: Number per page, default is 10 - sub_type: Subtype, default is 1001     - 1001: Total video list     - 1002: Low fans explosion     - 1003: High completion rate     - 1004: High increase rate     - 1005: High like rate ### Return: - Video billboard data
   * @param date 日期/Date (required)
   * @param page 页码/Page number (required)
   * @param pageSize 每页数量/Number per page (required)
   * @param subType 子类型/Subtype (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_0 (Integer date, Integer page, Integer pageSize, Integer subType) throws ApiException {
    // verify the required parameter 'date' is set
    if (date == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'date' when calling fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_0"));
    }
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_0"));
    }
    // verify the required parameter 'pageSize' is set
    if (pageSize == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'pageSize' when calling fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_0"));
    }
    // verify the required parameter 'subType' is set
    if (subType == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'subType' when calling fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_video_billboard";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("date", date));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_size", pageSize));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sub_type", subType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音视频频道数据/Douyin video channel data
   * # [中文] ### 用途: - 抖音视频频道数据 - https://www.douyin.com/channel/300205 ### 参数: - tag_id: 标签id，从URL中获取 - count: 数量 - refresh_index: 刷新索引 ### 返回: - 视频频道数据  # [English] ### Purpose: - Douyin video channel data - https://www.douyin.com/channel/300205 ### Parameters: - tag_id: Tag id, get from the URL - count: Number - refresh_index: Refresh index ### Return: - Video channel data  # [示例/Example] tag_id &#x3D; 300203 count &#x3D; 10 refresh_index &#x3D; 1
   * @param tagId 标签id/Tag id (required)
   * @param count 数量/Number (optional, default to 10)
   * @param refreshIndex 刷新索引/Refresh index (optional, default to 1)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet (Integer tagId, Integer count, Integer refreshIndex) throws ApiException {
    // verify the required parameter 'tagId' is set
    if (tagId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'tagId' when calling fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_video_channel_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag_id", tagId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("refresh_index", refreshIndex));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音视频频道数据/Douyin video channel data
   * # [中文] ### 用途: - 抖音视频频道数据 - https://www.douyin.com/channel/300205 ### 参数: - tag_id: 标签id，从URL中获取 - count: 数量 - refresh_index: 刷新索引 ### 返回: - 视频频道数据  # [English] ### Purpose: - Douyin video channel data - https://www.douyin.com/channel/300205 ### Parameters: - tag_id: Tag id, get from the URL - count: Number - refresh_index: Refresh index ### Return: - Video channel data  # [示例/Example] tag_id &#x3D; 300203 count &#x3D; 10 refresh_index &#x3D; 1
   * @param tagId 标签id/Tag id (required)
   * @param count 数量/Number (optional, default to 10)
   * @param refreshIndex 刷新索引/Refresh index (optional, default to 1)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet_0 (Integer tagId, Integer count, Integer refreshIndex) throws ApiException {
    // verify the required parameter 'tagId' is set
    if (tagId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'tagId' when calling fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_video_channel_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("tag_id", tagId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("refresh_index", refreshIndex));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单个视频评论数据/Get single video comments data
   * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor - count: Number ### Return: - Comments data  # [示例/Example] aweme_id &#x3D; \&quot;7372484719365098803\&quot; cursor &#x3D; 0 count &#x3D; 20
   * @param awemeId 作品id/Video id (required)
   * @param cursor 游标/Cursor (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet (String awemeId, Integer cursor, Integer count) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_video_comments";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单个视频评论数据/Get single video comments data
   * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor - count: Number ### Return: - Comments data  # [示例/Example] aweme_id &#x3D; \&quot;7372484719365098803\&quot; cursor &#x3D; 0 count &#x3D; 20
   * @param awemeId 作品id/Video id (required)
   * @param cursor 游标/Cursor (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet_0 (String awemeId, Integer cursor, Integer count) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_video_comments";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定视频的评论回复数据/Get comment replies data of specified video
   * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id &#x3D; \&quot;7354666303006723354\&quot; comment_id &#x3D; \&quot;7354669356632638218\&quot; cursor &#x3D; 0 count &#x3D; 20
   * @param itemId 作品id/Video id (required)
   * @param commentId 评论id/Comment id (required)
   * @param cursor 游标/Cursor (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet (String itemId, String commentId, Integer cursor, Integer count) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'itemId' when calling fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet"));
    }
    // verify the required parameter 'commentId' is set
    if (commentId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'commentId' when calling fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_video_comment_replies";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("item_id", itemId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("comment_id", commentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定视频的评论回复数据/Get comment replies data of specified video
   * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id &#x3D; \&quot;7354666303006723354\&quot; comment_id &#x3D; \&quot;7354669356632638218\&quot; cursor &#x3D; 0 count &#x3D; 20
   * @param itemId 作品id/Video id (required)
   * @param commentId 评论id/Comment id (required)
   * @param cursor 游标/Cursor (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_0 (String itemId, String commentId, Integer cursor, Integer count) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'itemId' when calling fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_0"));
    }
    // verify the required parameter 'commentId' is set
    if (commentId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'commentId' when calling fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_video_comment_replies";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("item_id", itemId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("comment_id", commentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取视频新增粉丝数量/Get video new fans count
   * # [中文] ### 用途: 获取视频新增粉丝数量 ### 参数: - aweme_id: 作品id ### 返回: - 新增粉丝数量  # [English] ### Purpose: Get video new fans count ### Parameters: - aweme_id: Video id ### Return: - New Fans count  # [示例/Example] aweme_id &#x3D; \&quot;7429296623961853234\&quot;
   * @param awemeId 作品id/Video id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet (String awemeId) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_video_fans_add_count";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取视频新增粉丝数量/Get video new fans count
   * # [中文] ### 用途: 获取视频新增粉丝数量 ### 参数: - aweme_id: 作品id ### 返回: - 新增粉丝数量  # [English] ### Purpose: Get video new fans count ### Parameters: - aweme_id: Video id ### Return: - New Fans count  # [示例/Example] aweme_id &#x3D; \&quot;7429296623961853234\&quot;
   * @param awemeId 作品id/Video id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet_0 (String awemeId) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_video_fans_add_count";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音视频点赞观众画像/Douyin Video Like Viewer Portrait
   * # [中文] ### 用途: - 抖音视频点赞观众画像 ### 参数: - aweme_id: 视频aweme_id - option: 选项，默认为1     - 1: 观众手机价格分布     - 2: 观众性别分布     - 3: 观众年龄分布     - 4: 观众地域分布(省份)     - 5: 观众地域分布(城市)     - 6: 观众城市等级分布     - 7: 观众手机品牌分布  ### 返回: - 视频点赞观众画像数据  # [English] ### Purpose: - Douyin Video Like Viewer Portrait ### Parameters: - aweme_id: Aweme_id of video - option: Option, default is 1     - 1: Distribution of audience mobile phone prices     - 2: Distribution of audience gender     - 3: Distribution of audience age     - 4: Distribution of audience region (province)     - 5: Distribution of audience region (city)     - 6: Distribution of audience city level     - 7: Distribution of audience mobile phone brands ### Return: - Video like viewer portrait data
   * @param awemeId 视频aweme_id/Aweme_id of video (required)
   * @param option 选项/Option (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet (String awemeId, String option) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet"));
    }
    // verify the required parameter 'option' is set
    if (option == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'option' when calling fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_video_like_portrait";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("option", option));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 抖音视频点赞观众画像/Douyin Video Like Viewer Portrait
   * # [中文] ### 用途: - 抖音视频点赞观众画像 ### 参数: - aweme_id: 视频aweme_id - option: 选项，默认为1     - 1: 观众手机价格分布     - 2: 观众性别分布     - 3: 观众年龄分布     - 4: 观众地域分布(省份)     - 5: 观众地域分布(城市)     - 6: 观众城市等级分布     - 7: 观众手机品牌分布  ### 返回: - 视频点赞观众画像数据  # [English] ### Purpose: - Douyin Video Like Viewer Portrait ### Parameters: - aweme_id: Aweme_id of video - option: Option, default is 1     - 1: Distribution of audience mobile phone prices     - 2: Distribution of audience gender     - 3: Distribution of audience age     - 4: Distribution of audience region (province)     - 5: Distribution of audience region (city)     - 6: Distribution of audience city level     - 7: Distribution of audience mobile phone brands ### Return: - Video like viewer portrait data
   * @param awemeId 视频aweme_id/Aweme_id of video (required)
   * @param option 选项/Option (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet_0 (String awemeId, String option) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet_0"));
    }
    // verify the required parameter 'option' is set
    if (option == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'option' when calling fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_video_like_portrait";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("option", option));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的视频搜索结果/Get video search results of specified keywords
   * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求时为0，后续从返回数据中获取，用于翻页。     - 例如: offset &#x3D; 10     - JSON Path-1 : $.data.cursor - count: 数量，默认为10，建议保持不变。 - sort_type:     - 0:综合排序     - 1:最多点赞     - 2:最新发布 - publish_time:     - 0:不限     - 1:最近一天     - 7:最近一周     - 180:最近半年 - filter_duration:     - 0:不限 0-1:1分钟以内     - 1-5:1-5分钟     - 5-10000:5分钟以上 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset, 0 for the first request, get from the returned data later, used for paging.     - For example: offset &#x3D; 10     - JSON Path-1 : $.data.cursor - count: Number, default is 10, it is recommended to keep it unchanged. - sort_type:     - 0: Comprehensive sorting     - 1: Most likes     - 2: Latest release - publish_time:     - 0: Unlimited     - 1: Last day     - 7: Last week     - 180: Last half year - filter_duration:     - 0: Unlimited     - 0-1: Within 1 minute     - 1-5: 1-5 minutes     - 5-10000: More than 5 minutes - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results  # [示例/Example] keyword &#x3D; \&quot;游戏\&quot; offset &#x3D; 0 count &#x3D; 10 sort_type &#x3D; \&quot;0\&quot; publish_time &#x3D; \&quot;0\&quot; filter_duration &#x3D; \&quot;0\&quot; search_id &#x3D; \&quot;\&quot;
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @param sortType 排序类型/Sort type (optional, default to &quot;0&quot;)
   * @param publishTime 发布时间/Publish time (optional, default to &quot;0&quot;)
   * @param filterDuration 视频时长/Duration filter (optional, default to &quot;0&quot;)
   * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet (String keyword, Integer offset, Integer count, String sortType, String publishTime, String filterDuration, String searchId) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_video_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort_type", sortType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("publish_time", publishTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter_duration", filterDuration));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_id", searchId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的视频搜索结果/Get video search results of specified keywords
   * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求时为0，后续从返回数据中获取，用于翻页。     - 例如: offset &#x3D; 10     - JSON Path-1 : $.data.cursor - count: 数量，默认为10，建议保持不变。 - sort_type:     - 0:综合排序     - 1:最多点赞     - 2:最新发布 - publish_time:     - 0:不限     - 1:最近一天     - 7:最近一周     - 180:最近半年 - filter_duration:     - 0:不限 0-1:1分钟以内     - 1-5:1-5分钟     - 5-10000:5分钟以上 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset, 0 for the first request, get from the returned data later, used for paging.     - For example: offset &#x3D; 10     - JSON Path-1 : $.data.cursor - count: Number, default is 10, it is recommended to keep it unchanged. - sort_type:     - 0: Comprehensive sorting     - 1: Most likes     - 2: Latest release - publish_time:     - 0: Unlimited     - 1: Last day     - 7: Last week     - 180: Last half year - filter_duration:     - 0: Unlimited     - 0-1: Within 1 minute     - 1-5: 1-5 minutes     - 5-10000: More than 5 minutes - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results  # [示例/Example] keyword &#x3D; \&quot;游戏\&quot; offset &#x3D; 0 count &#x3D; 10 sort_type &#x3D; \&quot;0\&quot; publish_time &#x3D; \&quot;0\&quot; filter_duration &#x3D; \&quot;0\&quot; search_id &#x3D; \&quot;\&quot;
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @param sortType 排序类型/Sort type (optional, default to &quot;0&quot;)
   * @param publishTime 发布时间/Publish time (optional, default to &quot;0&quot;)
   * @param filterDuration 视频时长/Duration filter (optional, default to &quot;0&quot;)
   * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet_0 (String keyword, Integer offset, Integer count, String sortType, String publishTime, String filterDuration, String searchId) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_video_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort_type", sortType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("publish_time", publishTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter_duration", filterDuration));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_id", searchId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
   * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当&#x60;/api/v1/douyin/web/fetch_video_search_result&#x60;接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the &#x60;/api/v1/douyin/web/fetch_video_search_result&#x60; interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; sort_type &#x3D; \&quot;_0\&quot; publish_time &#x3D; \&quot;_0\&quot; filter_duration &#x3D; \&quot;_0\&quot; page &#x3D; 1 search_id &#x3D; \&quot;\&quot;
   * @param keyword 关键词/Keyword (required)
   * @param sortType 排序类型/Sort type (optional, default to &quot;_0&quot;)
   * @param publishTime 发布时间/Publish time (optional, default to &quot;_0&quot;)
   * @param filterDuration 视频时长/Duration filter (optional, default to &quot;_0&quot;)
   * @param page 页码/Page (optional, default to 1)
   * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get (String keyword, String sortType, String publishTime, String filterDuration, Integer page, String searchId) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_video_search_result_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort_type", sortType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("publish_time", publishTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter_duration", filterDuration));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_id", searchId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
   * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当&#x60;/api/v1/douyin/web/fetch_video_search_result&#x60;接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the &#x60;/api/v1/douyin/web/fetch_video_search_result&#x60; interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id &#x3D; \&quot;2024083107320448E367ECDCCC6B71F7F3\&quot;     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; sort_type &#x3D; \&quot;_0\&quot; publish_time &#x3D; \&quot;_0\&quot; filter_duration &#x3D; \&quot;_0\&quot; page &#x3D; 1 search_id &#x3D; \&quot;\&quot;
   * @param keyword 关键词/Keyword (required)
   * @param sortType 排序类型/Sort type (optional, default to &quot;_0&quot;)
   * @param publishTime 发布时间/Publish time (optional, default to &quot;_0&quot;)
   * @param filterDuration 视频时长/Duration filter (optional, default to &quot;_0&quot;)
   * @param page 页码/Page (optional, default to 1)
   * @param searchId 搜索id，翻页时需要提供/Search id, need to provide when paging (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get_0 (String keyword, String sortType, String publishTime, String filterDuration, Integer page, String searchId) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/fetch_video_search_result_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort_type", sortType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("publish_time", publishTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter_duration", filterDuration));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_id", searchId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 使用接口网址生成A-Bogus参数/Generate A-Bogus parameter using API URL
   * # [中文] ### 用途: - 使用接口网址生成A-Bogus参数，提交的URL不能带有a_bogus参数，同时a_bogus参数与请求头中的User-Agent有关，需要一起提交和请求。 ### 参数: - url: API链接，请去除url中的原本的a_boogus参数(如有)。 - data: 请求载荷，只有在POST请求中才需要提交，GET请求中使用空字符串即可。 - user_agent: user-agent，需要提交你请求头中的User-Agent，该值参与a_bogus参数的计算。 - index_0: 加密明文列表的第一个值，无特殊要求，默认为0，不要随意修改。 - index_1: 加密明文列表的第二个值，无特殊要求，默认为1，不要随意修改。 - index_2: 加密明文列表的第三个值，无特殊要求，默认为14，不要随意修改。 ### 返回: - A-Bogus参数  # [English] ### Purpose: - Generate A-Bogus parameter using API URL, the submitted URL cannot contain the original a_boogus parameter, and the a_bogus parameter is related to the User-Agent in the request header, which needs to be submitted and requested together. ### Parameters: - url: API link, please remove the original a_boogus parameter from the url (if any). - data: Request payload, only need to submit in POST request, use an empty string in GET request. - user_agent: user-agent, you need to submit the User-Agent in your request header, which is involved in the calculation of the a_bogus parameter. - index_0: The first value of the encrypted plaintext list, no special requirements, the default is 0, do not modify it at will. - index_1: The second value of the encrypted plaintext list, no special requirements, the default is 1, do not modify it at will. - index_2: The third value of the encrypted plaintext list, no special requirements, the default is 14, do not modify it at will. ### Return: - A-Bogus parameter  # [示例/Example] &#x60;&#x60;&#x60;json { \&quot;url\&quot;: \&quot;https://www.douyin.com/aweme/v1/web/general/search/single/?device_platform&#x3D;webapp&amp;aid&#x3D;6383&amp;channel&#x3D;channel_pc_web&amp;search_channel&#x3D;aweme_general&amp;enable_history&#x3D;1&amp;keyword&#x3D;%E4%B8%AD%E5%8D%8E%E5%A8%98&amp;search_source&#x3D;normal_search&amp;query_correct_type&#x3D;1&amp;is_filter_search&#x3D;0&amp;from_group_id&#x3D;7346905902554844468&amp;offset&#x3D;0&amp;count&#x3D;15&amp;need_filter_settings&#x3D;1&amp;pc_client_type&#x3D;1&amp;version_code&#x3D;190600&amp;version_name&#x3D;19.6.0&amp;cookie_enabled&#x3D;true&amp;screen_width&#x3D;1280&amp;screen_height&#x3D;800&amp;browser_language&#x3D;zh-CN&amp;browser_platform&#x3D;Win32&amp;browser_name&#x3D;Firefox&amp;browser_version&#x3D;124.0&amp;browser_online&#x3D;true&amp;engine_name&#x3D;Gecko&amp;engine_version&#x3D;124.0&amp;os_name&#x3D;Windows&amp;os_version&#x3D;10&amp;cpu_core_num&#x3D;16&amp;device_memory&#x3D;&amp;platform&#x3D;PC&amp;webid&#x3D;7348962975497324070&amp;msToken&#x3D;YCTVM6YGmjFdIpQAN9ykXLBXiSiuHdZkOkEQWTeqVOHBEPmOcM0lNwE0Kd9vgHPMPigSndZDHfAq9k-6lDmH3Jqz6mHHxmn-BzQjmLMIfLIPgirgnOixM9x4PwgcNQ%3D%3D\&quot;, \&quot;data\&quot;: \&quot;\&quot;, \&quot;user_agent\&quot;: \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\&quot;, \&quot;index_0\&quot;: 0, \&quot;index_1\&quot;: 1, \&quot;index_2\&quot;: 14 } &#x60;&#x60;&#x60;
   * @param abogusModel  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> generateABogusApiV1DouyinWebGenerateABogusPost (ABogusModel abogusModel) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/generate_a_bogus";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(abogusModel);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "generateABogusApiV1DouyinWebGenerateABogusPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 使用接口网址生成A-Bogus参数/Generate A-Bogus parameter using API URL
   * # [中文] ### 用途: - 使用接口网址生成A-Bogus参数，提交的URL不能带有a_bogus参数，同时a_bogus参数与请求头中的User-Agent有关，需要一起提交和请求。 ### 参数: - url: API链接，请去除url中的原本的a_boogus参数(如有)。 - data: 请求载荷，只有在POST请求中才需要提交，GET请求中使用空字符串即可。 - user_agent: user-agent，需要提交你请求头中的User-Agent，该值参与a_bogus参数的计算。 - index_0: 加密明文列表的第一个值，无特殊要求，默认为0，不要随意修改。 - index_1: 加密明文列表的第二个值，无特殊要求，默认为1，不要随意修改。 - index_2: 加密明文列表的第三个值，无特殊要求，默认为14，不要随意修改。 ### 返回: - A-Bogus参数  # [English] ### Purpose: - Generate A-Bogus parameter using API URL, the submitted URL cannot contain the original a_boogus parameter, and the a_bogus parameter is related to the User-Agent in the request header, which needs to be submitted and requested together. ### Parameters: - url: API link, please remove the original a_boogus parameter from the url (if any). - data: Request payload, only need to submit in POST request, use an empty string in GET request. - user_agent: user-agent, you need to submit the User-Agent in your request header, which is involved in the calculation of the a_bogus parameter. - index_0: The first value of the encrypted plaintext list, no special requirements, the default is 0, do not modify it at will. - index_1: The second value of the encrypted plaintext list, no special requirements, the default is 1, do not modify it at will. - index_2: The third value of the encrypted plaintext list, no special requirements, the default is 14, do not modify it at will. ### Return: - A-Bogus parameter  # [示例/Example] &#x60;&#x60;&#x60;json { \&quot;url\&quot;: \&quot;https://www.douyin.com/aweme/v1/web/general/search/single/?device_platform&#x3D;webapp&amp;aid&#x3D;6383&amp;channel&#x3D;channel_pc_web&amp;search_channel&#x3D;aweme_general&amp;enable_history&#x3D;1&amp;keyword&#x3D;%E4%B8%AD%E5%8D%8E%E5%A8%98&amp;search_source&#x3D;normal_search&amp;query_correct_type&#x3D;1&amp;is_filter_search&#x3D;0&amp;from_group_id&#x3D;7346905902554844468&amp;offset&#x3D;0&amp;count&#x3D;15&amp;need_filter_settings&#x3D;1&amp;pc_client_type&#x3D;1&amp;version_code&#x3D;190600&amp;version_name&#x3D;19.6.0&amp;cookie_enabled&#x3D;true&amp;screen_width&#x3D;1280&amp;screen_height&#x3D;800&amp;browser_language&#x3D;zh-CN&amp;browser_platform&#x3D;Win32&amp;browser_name&#x3D;Firefox&amp;browser_version&#x3D;124.0&amp;browser_online&#x3D;true&amp;engine_name&#x3D;Gecko&amp;engine_version&#x3D;124.0&amp;os_name&#x3D;Windows&amp;os_version&#x3D;10&amp;cpu_core_num&#x3D;16&amp;device_memory&#x3D;&amp;platform&#x3D;PC&amp;webid&#x3D;7348962975497324070&amp;msToken&#x3D;YCTVM6YGmjFdIpQAN9ykXLBXiSiuHdZkOkEQWTeqVOHBEPmOcM0lNwE0Kd9vgHPMPigSndZDHfAq9k-6lDmH3Jqz6mHHxmn-BzQjmLMIfLIPgirgnOixM9x4PwgcNQ%3D%3D\&quot;, \&quot;data\&quot;: \&quot;\&quot;, \&quot;user_agent\&quot;: \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\&quot;, \&quot;index_0\&quot;: 0, \&quot;index_1\&quot;: 1, \&quot;index_2\&quot;: 14 } &#x60;&#x60;&#x60;
   * @param abogusModel  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> generateABogusApiV1DouyinWebGenerateABogusPost_0 (ABogusModel abogusModel) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/generate_a_bogus";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(abogusModel);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "generateABogusApiV1DouyinWebGenerateABogusPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 生成真实msToken/Generate real msToken
   * # [中文] ### 用途: - 生成真实msToken ### 返回: - msToken  # [English] ### Purpose: - Generate real msToken ### Return: - msToken
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/generate_real_msToken";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 生成真实msToken/Generate real msToken
   * # [中文] ### 用途: - 生成真实msToken ### 返回: - msToken  # [English] ### Purpose: - Generate real msToken ### Return: - msToken
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet_0 () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/generate_real_msToken";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 生成s_v_web_id/Generate s_v_web_id
   * # [中文] ### 用途: - 生成s_v_web_id ### 返回: - s_v_web_id  # [English] ### Purpose: - Generate s_v_web_id ### Return: - s_v_web_id
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/generate_s_v_web_id";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 生成s_v_web_id/Generate s_v_web_id
   * # [中文] ### 用途: - 生成s_v_web_id ### 返回: - s_v_web_id  # [English] ### Purpose: - Generate s_v_web_id ### Return: - s_v_web_id
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet_0 () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/generate_s_v_web_id";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 生成ttwid/Generate ttwid
   * # [中文] ### 用途: - 生成ttwid ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Return: - ttwid
   * @param userAgent  (optional, default to &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:125.0) Gecko/20100101 Firefox/125.0&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> generateTtwidApiV1DouyinWebGenerateTtwidGet (String userAgent) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/generate_ttwid";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_agent", userAgent));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "generateTtwidApiV1DouyinWebGenerateTtwidGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 生成ttwid/Generate ttwid
   * # [中文] ### 用途: - 生成ttwid ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Return: - ttwid
   * @param userAgent  (optional, default to &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:125.0) Gecko/20100101 Firefox/125.0&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> generateTtwidApiV1DouyinWebGenerateTtwidGet_0 (String userAgent) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/generate_ttwid";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_agent", userAgent));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "generateTtwidApiV1DouyinWebGenerateTtwidGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 生成verify_fp/Generate verify_fp
   * # [中文] ### 用途: - 生成verify_fp ### 返回: - verify_fp  # [English] ### Purpose: - Generate verify_fp ### Return: - verify_fp
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/generate_verify_fp";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 生成verify_fp/Generate verify_fp
   * # [中文] ### 用途: - 生成verify_fp ### 返回: - verify_fp  # [English] ### Purpose: - Generate verify_fp ### Return: - verify_fp
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet_0 () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/generate_verify_fp";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 使用接口网址生成X-Bogus参数/Generate X-Bogus parameter using API URL
   * # [中文] ### 用途: - 使用接口网址生成X-Bogus参数 ### 参数: - url: 接口网址  # [English] ### Purpose: - Generate X-Bogus parameter using API URL ### Parameters: - url: API URL  # [示例/Example]  &#x60;&#x60;&#x60;json { \&quot;url\&quot;: \&quot;https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id&#x3D;7148736076176215311&amp;device_platform&#x3D;webapp&amp;aid&#x3D;6383&amp;channel&#x3D;channel_pc_web&amp;pc_client_type&#x3D;1&amp;version_code&#x3D;170400&amp;version_name&#x3D;17.4.0&amp;cookie_enabled&#x3D;true&amp;screen_width&#x3D;1920&amp;screen_height&#x3D;1080&amp;browser_language&#x3D;zh-CN&amp;browser_platform&#x3D;Win32&amp;browser_name&#x3D;Edge&amp;browser_version&#x3D;117.0.2045.47&amp;browser_online&#x3D;true&amp;engine_name&#x3D;Blink&amp;engine_version&#x3D;117.0.0.0&amp;os_name&#x3D;Windows&amp;os_version&#x3D;10&amp;cpu_core_num&#x3D;128&amp;device_memory&#x3D;10240&amp;platform&#x3D;PC&amp;downlink&#x3D;10&amp;effective_type&#x3D;4g&amp;round_trip_time&#x3D;100\&quot;, \&quot;user_agent\&quot;: \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\&quot; } &#x60;&#x60;&#x60;
   * @param xbogusModel  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> generateXBogusApiV1DouyinWebGenerateXBogusPost (XBogusModel xbogusModel) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/generate_x_bogus";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(xbogusModel);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "generateXBogusApiV1DouyinWebGenerateXBogusPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 使用接口网址生成X-Bogus参数/Generate X-Bogus parameter using API URL
   * # [中文] ### 用途: - 使用接口网址生成X-Bogus参数 ### 参数: - url: 接口网址  # [English] ### Purpose: - Generate X-Bogus parameter using API URL ### Parameters: - url: API URL  # [示例/Example]  &#x60;&#x60;&#x60;json { \&quot;url\&quot;: \&quot;https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id&#x3D;7148736076176215311&amp;device_platform&#x3D;webapp&amp;aid&#x3D;6383&amp;channel&#x3D;channel_pc_web&amp;pc_client_type&#x3D;1&amp;version_code&#x3D;170400&amp;version_name&#x3D;17.4.0&amp;cookie_enabled&#x3D;true&amp;screen_width&#x3D;1920&amp;screen_height&#x3D;1080&amp;browser_language&#x3D;zh-CN&amp;browser_platform&#x3D;Win32&amp;browser_name&#x3D;Edge&amp;browser_version&#x3D;117.0.2045.47&amp;browser_online&#x3D;true&amp;engine_name&#x3D;Blink&amp;engine_version&#x3D;117.0.0.0&amp;os_name&#x3D;Windows&amp;os_version&#x3D;10&amp;cpu_core_num&#x3D;128&amp;device_memory&#x3D;10240&amp;platform&#x3D;PC&amp;downlink&#x3D;10&amp;effective_type&#x3D;4g&amp;round_trip_time&#x3D;100\&quot;, \&quot;user_agent\&quot;: \&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\&quot; } &#x60;&#x60;&#x60;
   * @param xbogusModel  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> generateXBogusApiV1DouyinWebGenerateXBogusPost_0 (XBogusModel xbogusModel) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/generate_x_bogus";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(xbogusModel);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "generateXBogusApiV1DouyinWebGenerateXBogusPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 提取列表作品id/Extract list video id
   * # [中文]  ### 用途:  - 提取列表作品id（最多支持20个链接）  ### 参数:  - url: 作品链接列表  ### 返回:  - 作品id列表   # [English]  ### Purpose:  - Extract list video id (supports up to 20 links)  ### Parameters:  - url: Video link list  ### Return:  - Video id list   # [示例/Example]  &#x60;&#x60;&#x60;json  { \&quot;urls\&quot;:[     \&quot;0.53 02/26 I@v.sE Fus:/ 你别太帅了郑润泽# 现场版live # 音乐节 # 郑润泽  https://v.douyin.com/iRNBho6u/ 复制此链接，打开Dou音搜索，直接观看视频!\&quot;,     \&quot;https://v.douyin.com/iRNBho6u/\&quot;,     \&quot;https://www.iesdouyin.com/share/video/7298145681699622182/?region&#x3D;CN&amp;mid&#x3D;7298145762238565171&amp;u_code&#x3D;l1j9bkbd&amp;did&#x3D;MS4wLjABAAAAtqpCx0hpOERbdSzQdjRZw-wFPxaqdbAzsKDmbJMUI3KWlMGQHC-n6dXAqa-dM2EP&amp;iid&#x3D;MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&amp;with_sec_did&#x3D;1&amp;titleType&#x3D;title&amp;share_sign&#x3D;05kGlqGmR4_IwCX.ZGk6xuL0osNA..5ur7b0jbOx6cc-&amp;share_version&#x3D;170400&amp;ts&#x3D;1699262937&amp;from_aid&#x3D;6383&amp;from_ssr&#x3D;1&amp;from&#x3D;web_code_link\&quot;,     \&quot;https://www.douyin.com/video/7298145681699622182?previous_page&#x3D;web_code_link\&quot;,     \&quot;https://www.douyin.com/video/7298145681699622182\&quot;,  ]  }  &#x60;&#x60;&#x60;
   * @param requestBody  (optional
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost (List<String> requestBody) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/get_all_aweme_id";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 提取列表作品id/Extract list video id
   * # [中文]  ### 用途:  - 提取列表作品id（最多支持20个链接）  ### 参数:  - url: 作品链接列表  ### 返回:  - 作品id列表   # [English]  ### Purpose:  - Extract list video id (supports up to 20 links)  ### Parameters:  - url: Video link list  ### Return:  - Video id list   # [示例/Example]  &#x60;&#x60;&#x60;json  { \&quot;urls\&quot;:[     \&quot;0.53 02/26 I@v.sE Fus:/ 你别太帅了郑润泽# 现场版live # 音乐节 # 郑润泽  https://v.douyin.com/iRNBho6u/ 复制此链接，打开Dou音搜索，直接观看视频!\&quot;,     \&quot;https://v.douyin.com/iRNBho6u/\&quot;,     \&quot;https://www.iesdouyin.com/share/video/7298145681699622182/?region&#x3D;CN&amp;mid&#x3D;7298145762238565171&amp;u_code&#x3D;l1j9bkbd&amp;did&#x3D;MS4wLjABAAAAtqpCx0hpOERbdSzQdjRZw-wFPxaqdbAzsKDmbJMUI3KWlMGQHC-n6dXAqa-dM2EP&amp;iid&#x3D;MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&amp;with_sec_did&#x3D;1&amp;titleType&#x3D;title&amp;share_sign&#x3D;05kGlqGmR4_IwCX.ZGk6xuL0osNA..5ur7b0jbOx6cc-&amp;share_version&#x3D;170400&amp;ts&#x3D;1699262937&amp;from_aid&#x3D;6383&amp;from_ssr&#x3D;1&amp;from&#x3D;web_code_link\&quot;,     \&quot;https://www.douyin.com/video/7298145681699622182?previous_page&#x3D;web_code_link\&quot;,     \&quot;https://www.douyin.com/video/7298145681699622182\&quot;,  ]  }  &#x60;&#x60;&#x60;
   * @param requestBody  (optional
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost_0 (List<String> requestBody) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/get_all_aweme_id";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 提取列表用户id/Extract list user id
   * # [中文]  ### 用途:  - 提取列表用户id  ### 参数:  - url: 用户主页链接列表（最多支持10个链接）  ### 返回:  - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。   # [English]  ### Purpose:  - Extract list user id  ### Parameters:  - url: User homepage link list (supports up to 10 links)  ### Return:  - If the sec_user_id is successfully obtained from the link, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.   # [示例/Example]  &#x60;&#x60;&#x60;json  { \&quot;urls\&quot;:[    \&quot;https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE?vid&#x3D;7285950278132616463\&quot;,    \&quot;https://www.douyin.com/user/MS4wLjABAAAAVsneOf144eGDFf8Xp9QNb1VW6ovXnNT5SqJBhJfe8KQBKWKDTWK5Hh-_i9mJzb8C\&quot;,    \&quot;长按复制此条消息，打开抖音搜索，查看TA的更多作品。 https://v.douyin.com/idFqvUms/\&quot;,    \&quot;https://v.douyin.com/idFqvUms/\&quot;     ]  }  &#x60;&#x60;&#x60;
   * @param requestBody  (optional
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost (List<String> requestBody) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/get_all_sec_user_id";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 提取列表用户id/Extract list user id
   * # [中文]  ### 用途:  - 提取列表用户id  ### 参数:  - url: 用户主页链接列表（最多支持10个链接）  ### 返回:  - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。   # [English]  ### Purpose:  - Extract list user id  ### Parameters:  - url: User homepage link list (supports up to 10 links)  ### Return:  - If the sec_user_id is successfully obtained from the link, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.   # [示例/Example]  &#x60;&#x60;&#x60;json  { \&quot;urls\&quot;:[    \&quot;https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE?vid&#x3D;7285950278132616463\&quot;,    \&quot;https://www.douyin.com/user/MS4wLjABAAAAVsneOf144eGDFf8Xp9QNb1VW6ovXnNT5SqJBhJfe8KQBKWKDTWK5Hh-_i9mJzb8C\&quot;,    \&quot;长按复制此条消息，打开抖音搜索，查看TA的更多作品。 https://v.douyin.com/idFqvUms/\&quot;,    \&quot;https://v.douyin.com/idFqvUms/\&quot;     ]  }  &#x60;&#x60;&#x60;
   * @param requestBody  (optional
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost_0 (List<String> requestBody) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/get_all_sec_user_id";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 提取列表直播间号/Extract list webcast id
   * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接列表（最多支持20个链接） ### 返回: - 直播间号列表  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link list (supports up to 20 links) ### Return: - Room id list  # [示例/Example] &#x60;&#x60;&#x60;json {   \&quot;urls\&quot;: [         \&quot;https://live.douyin.com/775841227732\&quot;,         \&quot;https://live.douyin.com/775841227732?room_id&#x3D;7318296342189919011&amp;enter_from_merge&#x3D;web_share_link&amp;enter_method&#x3D;web_share_link&amp;previous_page&#x3D;app_code_link\&quot;,         &#39;https://webcast.amemv.com/douyin/webcast/reflow/7318296342189919011?u_code&#x3D;l1j9bkbd&amp;did&#x3D;MS4wLjABAAAAEs86TBQPNwAo-RGrcxWyCdwKhI66AK3Pqf3ieo6HaxI&amp;iid&#x3D;MS4wLjABAAAA0ptpM-zzoliLEeyvWOCUt-_dQza4uSjlIvbtIazXnCY&amp;with_sec_did&#x3D;1&amp;use_link_command&#x3D;1&amp;ecom_share_track_params&#x3D;&amp;extra_params&#x3D;{\&quot;from_request_id\&quot;:\&quot;20231230162057EC005772A8EAA0199906\&quot;,\&quot;im_channel_invite_id\&quot;:\&quot;0\&quot;}&amp;user_id&#x3D;3644207898042206&amp;liveId&#x3D;7318296342189919011&amp;from&#x3D;share&amp;style&#x3D;share&amp;enter_method&#x3D;click_share&amp;roomId&#x3D;7318296342189919011&amp;activity_info&#x3D;{}&#39;,         \&quot;6i- Q@x.Sl 03/23 【醒子8ke的直播间】  点击打开👉https://v.douyin.com/i8tBR7hX/  或长按复制此条消息，打开抖音，看TA直播\&quot;,         \&quot;https://v.douyin.com/i8tBR7hX/\&quot;,         ] } &#x60;&#x60;&#x60;
   * @param requestBody  (optional
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost (List<String> requestBody) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/get_all_webcast_id";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 提取列表直播间号/Extract list webcast id
   * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接列表（最多支持20个链接） ### 返回: - 直播间号列表  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link list (supports up to 20 links) ### Return: - Room id list  # [示例/Example] &#x60;&#x60;&#x60;json {   \&quot;urls\&quot;: [         \&quot;https://live.douyin.com/775841227732\&quot;,         \&quot;https://live.douyin.com/775841227732?room_id&#x3D;7318296342189919011&amp;enter_from_merge&#x3D;web_share_link&amp;enter_method&#x3D;web_share_link&amp;previous_page&#x3D;app_code_link\&quot;,         &#39;https://webcast.amemv.com/douyin/webcast/reflow/7318296342189919011?u_code&#x3D;l1j9bkbd&amp;did&#x3D;MS4wLjABAAAAEs86TBQPNwAo-RGrcxWyCdwKhI66AK3Pqf3ieo6HaxI&amp;iid&#x3D;MS4wLjABAAAA0ptpM-zzoliLEeyvWOCUt-_dQza4uSjlIvbtIazXnCY&amp;with_sec_did&#x3D;1&amp;use_link_command&#x3D;1&amp;ecom_share_track_params&#x3D;&amp;extra_params&#x3D;{\&quot;from_request_id\&quot;:\&quot;20231230162057EC005772A8EAA0199906\&quot;,\&quot;im_channel_invite_id\&quot;:\&quot;0\&quot;}&amp;user_id&#x3D;3644207898042206&amp;liveId&#x3D;7318296342189919011&amp;from&#x3D;share&amp;style&#x3D;share&amp;enter_method&#x3D;click_share&amp;roomId&#x3D;7318296342189919011&amp;activity_info&#x3D;{}&#39;,         \&quot;6i- Q@x.Sl 03/23 【醒子8ke的直播间】  点击打开👉https://v.douyin.com/i8tBR7hX/  或长按复制此条消息，打开抖音，看TA直播\&quot;,         \&quot;https://v.douyin.com/i8tBR7hX/\&quot;,         ] } &#x60;&#x60;&#x60;
   * @param requestBody  (optional
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost_0 (List<String> requestBody) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/get_all_webcast_id";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 提取单个作品id/Extract single video id
   * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url &#x3D; \&quot;https://www.douyin.com/video/7298145681699622182\&quot;
   * @param url  (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getAwemeIdApiV1DouyinWebGetAwemeIdGet (String url) throws ApiException {
    // verify the required parameter 'url' is set
    if (url == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'url' when calling getAwemeIdApiV1DouyinWebGetAwemeIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/get_aweme_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("url", url));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getAwemeIdApiV1DouyinWebGetAwemeIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 提取单个作品id/Extract single video id
   * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url &#x3D; \&quot;https://www.douyin.com/video/7298145681699622182\&quot;
   * @param url  (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getAwemeIdApiV1DouyinWebGetAwemeIdGet_0 (String url) throws ApiException {
    // verify the required parameter 'url' is set
    if (url == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'url' when calling getAwemeIdApiV1DouyinWebGetAwemeIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/get_aweme_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("url", url));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getAwemeIdApiV1DouyinWebGetAwemeIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 提取单个用户id/Extract single user id
   * # [中文] ### 用途: - 提取单个用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户sec_user_id  # [English] ### Purpose: - Extract single user id ### Parameters: - url: User homepage link ### Return: - User sec_user_id  # [示例/Example] url &#x3D; \&quot;https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\&quot;
   * @param url  (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getSecUserIdApiV1DouyinWebGetSecUserIdGet (String url) throws ApiException {
    // verify the required parameter 'url' is set
    if (url == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'url' when calling getSecUserIdApiV1DouyinWebGetSecUserIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/get_sec_user_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("url", url));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getSecUserIdApiV1DouyinWebGetSecUserIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 提取单个用户id/Extract single user id
   * # [中文] ### 用途: - 提取单个用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户sec_user_id  # [English] ### Purpose: - Extract single user id ### Parameters: - url: User homepage link ### Return: - User sec_user_id  # [示例/Example] url &#x3D; \&quot;https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\&quot;
   * @param url  (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getSecUserIdApiV1DouyinWebGetSecUserIdGet_0 (String url) throws ApiException {
    // verify the required parameter 'url' is set
    if (url == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'url' when calling getSecUserIdApiV1DouyinWebGetSecUserIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/get_sec_user_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("url", url));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getSecUserIdApiV1DouyinWebGetSecUserIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 提取直播间号/Extract webcast id
   * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接 ### 返回: - 直播间号  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link ### Return: - Room id  # [示例/Example] url &#x3D; \&quot;https://live.douyin.com/775841227732\&quot;
   * @param url  (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getWebcastIdApiV1DouyinWebGetWebcastIdGet (String url) throws ApiException {
    // verify the required parameter 'url' is set
    if (url == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'url' when calling getWebcastIdApiV1DouyinWebGetWebcastIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/get_webcast_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("url", url));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getWebcastIdApiV1DouyinWebGetWebcastIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 提取直播间号/Extract webcast id
   * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接 ### 返回: - 直播间号  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link ### Return: - Room id  # [示例/Example] url &#x3D; \&quot;https://live.douyin.com/775841227732\&quot;
   * @param url  (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getWebcastIdApiV1DouyinWebGetWebcastIdGet_0 (String url) throws ApiException {
    // verify the required parameter 'url' is set
    if (url == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'url' when calling getWebcastIdApiV1DouyinWebGetWebcastIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/get_webcast_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("url", url));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getWebcastIdApiV1DouyinWebGetWebcastIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据sec_user_id获取指定用户的信息/Get information of specified user by sec_user_id
   * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\&quot;
   * @param secUserId 用户sec_user_id/User sec_user_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> handlerUserProfileApiV1DouyinWebHandlerUserProfileGet (String secUserId) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling handlerUserProfileApiV1DouyinWebHandlerUserProfileGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/handler_user_profile";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "handlerUserProfileApiV1DouyinWebHandlerUserProfileGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据sec_user_id获取指定用户的信息/Get information of specified user by sec_user_id
   * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\&quot;
   * @param secUserId 用户sec_user_id/User sec_user_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> handlerUserProfileApiV1DouyinWebHandlerUserProfileGet_0 (String secUserId) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling handlerUserProfileApiV1DouyinWebHandlerUserProfileGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/handler_user_profile";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "handlerUserProfileApiV1DouyinWebHandlerUserProfileGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据抖音号获取指定用户的信息/Get information of specified user by unique_id
   * # [中文] ### 用途: - 根据抖音号获取指定用户的信息 ### 参数: - unique_id: 用户unique_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - unique_id: User unique_id ### Return: - User information  # [示例/Example] unique_id &#x3D; \&quot;TheChief\&quot;
   * @param uniqueId 用户unique_id/User unique_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get (String uniqueId) throws ApiException {
    // verify the required parameter 'uniqueId' is set
    if (uniqueId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uniqueId' when calling handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/handler_user_profile_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unique_id", uniqueId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据抖音号获取指定用户的信息/Get information of specified user by unique_id
   * # [中文] ### 用途: - 根据抖音号获取指定用户的信息 ### 参数: - unique_id: 用户unique_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - unique_id: User unique_id ### Return: - User information  # [示例/Example] unique_id &#x3D; \&quot;TheChief\&quot;
   * @param uniqueId 用户unique_id/User unique_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get_0 (String uniqueId) throws ApiException {
    // verify the required parameter 'uniqueId' is set
    if (uniqueId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uniqueId' when calling handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/handler_user_profile_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unique_id", uniqueId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据抖音uid获取指定用户的信息/Get information of specified user by uid
   * # [中文] ### 用途: - 根据抖音uid获取指定用户的信息 ### 参数: - uid: 用户uid，也就是抖音号的short_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - uid: User uid, which is the short_id of the Douyin number ### Return: - User information  # [示例/Example] uid &#x3D; \&quot;1673937488185292\&quot;
   * @param uid 用户uid(short_id)/User uid(short_id) (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get (String uid) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uid' when calling handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/handler_user_profile_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uid", uid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据抖音uid获取指定用户的信息/Get information of specified user by uid
   * # [中文] ### 用途: - 根据抖音uid获取指定用户的信息 ### 参数: - uid: 用户uid，也就是抖音号的short_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - uid: User uid, which is the short_id of the Douyin number ### Return: - User information  # [示例/Example] uid &#x3D; \&quot;1673937488185292\&quot;
   * @param uid 用户uid(short_id)/User uid(short_id) (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get_0 (String uid) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uid' when calling handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/handler_user_profile_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uid", uid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据sec_user_id获取指定用户的信息（性别，年龄，直播等级、牌子）/Get information of specified user by sec_user_id (gender, age, live level、brand)
   * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息，包含性别，年龄，直播等级，直播间牌子 ### 说明： - 性别：1为男，2为女，0为未知，在live_user字段中。 - 年龄：在user字段中，-1为未知。  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information, including gender, age, live level, live room brand ### Description: - gender: 1 male, 2 female, 0 unknown, in the live_user field. - age: in the user field, -1 unknown.  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\&quot;
   * @param secUserId 用户sec_user_id/User sec_user_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get (String secUserId) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/handler_user_profile_v4";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据sec_user_id获取指定用户的信息（性别，年龄，直播等级、牌子）/Get information of specified user by sec_user_id (gender, age, live level、brand)
   * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息，包含性别，年龄，直播等级，直播间牌子 ### 说明： - 性别：1为男，2为女，0为未知，在live_user字段中。 - 年龄：在user字段中，-1为未知。  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information, including gender, age, live level, live room brand ### Description: - gender: 1 male, 2 female, 0 unknown, in the live_user field. - age: in the user field, -1 unknown.  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\&quot;
   * @param secUserId 用户sec_user_id/User sec_user_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get_0 (String secUserId) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/handler_user_profile_v4";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 直播间号转房间号/Webcast id to room id
   * # [中文] ### 用途: - 直播间号转房间号 ### 参数: - webcast_id: 直播间号 ### 返回: - 房间号  # [English] ### Purpose: - Webcast id to room id ### Parameters: - webcast_id: Webcast id ### Return: - Room id  # [示例/Example] \&quot;webcast_id &#x3D; \&quot;775841227732\&quot;
   * @param webcastId 直播间号/Webcast id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet (String webcastId) throws ApiException {
    // verify the required parameter 'webcastId' is set
    if (webcastId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'webcastId' when calling webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/webcast_id_2_room_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("webcast_id", webcastId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 直播间号转房间号/Webcast id to room id
   * # [中文] ### 用途: - 直播间号转房间号 ### 参数: - webcast_id: 直播间号 ### 返回: - 房间号  # [English] ### Purpose: - Webcast id to room id ### Parameters: - webcast_id: Webcast id ### Return: - Room id  # [示例/Example] \&quot;webcast_id &#x3D; \&quot;775841227732\&quot;
   * @param webcastId 直播间号/Webcast id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet_0 (String webcastId) throws ApiException {
    // verify the required parameter 'webcastId' is set
    if (webcastId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'webcastId' when calling webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/web/webcast_id_2_room_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("webcast_id", webcastId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
}
