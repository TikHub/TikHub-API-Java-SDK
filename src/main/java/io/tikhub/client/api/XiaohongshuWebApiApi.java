/*
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.tikhub.client.api;

import io.tikhub.client.ApiClient;
import io.tikhub.client.ApiException;
import io.tikhub.client.Pair;

import org.openapitools.client.model.GetHomeFeedRequest;
import org.openapitools.client.model.GetNoteInfoV5Request;
import org.openapitools.client.model.HttpValidationError;
import org.openapitools.client.model.ResponseModel;
import org.openapitools.client.model.XhsWebSignRequestModel;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;


public class XiaohongshuWebApiApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  
  public XiaohongshuWebApiApi() {
    this(new ApiClient());
  }

  public XiaohongshuWebApiApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  /**
   * 获取首页推荐/Get home recommend
   * # [中文] ### 用途: - 获取首页推荐 ### 参数: - feed_type: 推荐类型     - 全部: 0     - 穿搭: 1     - 美食: 2     - 彩妆: 3     - 影视: 4     - 职场: 5     - 情感: 6     - 家居: 7     - 游戏: 8     - 旅行: 9     - 健身: 10 - need_filter_image: 是否只看图文笔记，默认为 False - cookie: 可选参数，用户自行提供的已登录的网页Cookie获取个性化推荐，如果不提供，则使用游客模式 - proxy: 可选参数，网络代理，可降低封号概率，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port ### 返回: - 推荐列表  # [English] ### Purpose: - Get home recommend ### Parameters: - feed_type: Feed type     - Dress: 1     - Food: 2     - Makeup: 3     - Film: 4     - Workplace: 5     - Emotion: 6     - Home: 7     - Game: 8     - Travel: 9     - Fitness: 10 - need_filter_image: Whether to view only image notes, default is False - cookie: Optional parameter, user-provided logged-in web Cookie to get personalized recommendations, if not provided, use visitor mode - proxy: Optional parameter, network proxy, can reduce the probability of account ban, format: http://username:password@IP:port ### Return: - Recommend list  # [示例/Example] feed_type&#x3D;\&quot;0\&quot; need_filter_image&#x3D;False
   * @param getHomeFeedRequest  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost (GetHomeFeedRequest getHomeFeedRequest) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_home_recommend";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getHomeFeedRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取首页推荐/Get home recommend
   * # [中文] ### 用途: - 获取首页推荐 ### 参数: - feed_type: 推荐类型     - 全部: 0     - 穿搭: 1     - 美食: 2     - 彩妆: 3     - 影视: 4     - 职场: 5     - 情感: 6     - 家居: 7     - 游戏: 8     - 旅行: 9     - 健身: 10 - need_filter_image: 是否只看图文笔记，默认为 False - cookie: 可选参数，用户自行提供的已登录的网页Cookie获取个性化推荐，如果不提供，则使用游客模式 - proxy: 可选参数，网络代理，可降低封号概率，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port ### 返回: - 推荐列表  # [English] ### Purpose: - Get home recommend ### Parameters: - feed_type: Feed type     - Dress: 1     - Food: 2     - Makeup: 3     - Film: 4     - Workplace: 5     - Emotion: 6     - Home: 7     - Game: 8     - Travel: 9     - Fitness: 10 - need_filter_image: Whether to view only image notes, default is False - cookie: Optional parameter, user-provided logged-in web Cookie to get personalized recommendations, if not provided, use visitor mode - proxy: Optional parameter, network proxy, can reduce the probability of account ban, format: http://username:password@IP:port ### Return: - Recommend list  # [示例/Example] feed_type&#x3D;\&quot;0\&quot; need_filter_image&#x3D;False
   * @param getHomeFeedRequest  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost_0 (GetHomeFeedRequest getHomeFeedRequest) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_home_recommend";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getHomeFeedRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取笔记评论回复 V1/Get note comment replies V1
   * # [中文] ### 用途: - 获取笔记评论回复 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id&#x3D;\&quot;6683b283000000001f0052bf\&quot; comment_id&#x3D;\&quot;6683ec5b000000000303b91a\&quot; lastCursor&#x3D;None
   * @param noteId 笔记ID/Note ID (required)
   * @param commentId 评论ID/Comment ID (required)
   * @param lastCursor 上一页的游标/Last cursor (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet (String noteId, String commentId, String lastCursor) throws ApiException {
    // verify the required parameter 'noteId' is set
    if (noteId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'noteId' when calling getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet"));
    }
    // verify the required parameter 'commentId' is set
    if (commentId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'commentId' when calling getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_comment_replies";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("note_id", noteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("comment_id", commentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lastCursor", lastCursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取笔记评论回复 V1/Get note comment replies V1
   * # [中文] ### 用途: - 获取笔记评论回复 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id&#x3D;\&quot;6683b283000000001f0052bf\&quot; comment_id&#x3D;\&quot;6683ec5b000000000303b91a\&quot; lastCursor&#x3D;None
   * @param noteId 笔记ID/Note ID (required)
   * @param commentId 评论ID/Comment ID (required)
   * @param lastCursor 上一页的游标/Last cursor (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_0 (String noteId, String commentId, String lastCursor) throws ApiException {
    // verify the required parameter 'noteId' is set
    if (noteId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'noteId' when calling getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_0"));
    }
    // verify the required parameter 'commentId' is set
    if (commentId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'commentId' when calling getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_comment_replies";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("note_id", noteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("comment_id", commentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lastCursor", lastCursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取笔记评论回复 V2/Get note comment replies V2
   * # [中文] ### 用途: - 获取笔记评论回复 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id&#x3D;\&quot;6683b283000000001f0052bf\&quot; comment_id&#x3D;\&quot;6683ec5b000000000303b91a\&quot; lastCursor&#x3D;None
   * @param noteId 笔记ID/Note ID (required)
   * @param commentId 评论ID/Comment ID (required)
   * @param lastCursor 上一页的游标/Last cursor (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get (String noteId, String commentId, String lastCursor) throws ApiException {
    // verify the required parameter 'noteId' is set
    if (noteId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'noteId' when calling getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get"));
    }
    // verify the required parameter 'commentId' is set
    if (commentId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'commentId' when calling getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_comment_replies_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("note_id", noteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("comment_id", commentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lastCursor", lastCursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取笔记评论回复 V2/Get note comment replies V2
   * # [中文] ### 用途: - 获取笔记评论回复 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id&#x3D;\&quot;6683b283000000001f0052bf\&quot; comment_id&#x3D;\&quot;6683ec5b000000000303b91a\&quot; lastCursor&#x3D;None
   * @param noteId 笔记ID/Note ID (required)
   * @param commentId 评论ID/Comment ID (required)
   * @param lastCursor 上一页的游标/Last cursor (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_0 (String noteId, String commentId, String lastCursor) throws ApiException {
    // verify the required parameter 'noteId' is set
    if (noteId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'noteId' when calling getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_0"));
    }
    // verify the required parameter 'commentId' is set
    if (commentId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'commentId' when calling getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_comment_replies_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("note_id", noteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("comment_id", commentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lastCursor", lastCursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取笔记评论 V1/Get note comments V1
   * # [中文] ### 用途: - 获取笔记评论 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id&#x3D;\&quot;6683b283000000001f0052bf\&quot; lastCursor&#x3D;None
   * @param noteId 笔记ID/Note ID (required)
   * @param lastCursor 上一页的游标/Last cursor (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet (String noteId, String lastCursor) throws ApiException {
    // verify the required parameter 'noteId' is set
    if (noteId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'noteId' when calling getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_comments";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("note_id", noteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lastCursor", lastCursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取笔记评论 V1/Get note comments V1
   * # [中文] ### 用途: - 获取笔记评论 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id&#x3D;\&quot;6683b283000000001f0052bf\&quot; lastCursor&#x3D;None
   * @param noteId 笔记ID/Note ID (required)
   * @param lastCursor 上一页的游标/Last cursor (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet_0 (String noteId, String lastCursor) throws ApiException {
    // verify the required parameter 'noteId' is set
    if (noteId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'noteId' when calling getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_comments";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("note_id", noteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lastCursor", lastCursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取笔记评论 V2/Get note comments V2
   * # [中文] ### 用途: - 获取笔记评论 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id&#x3D;\&quot;6683b283000000001f0052bf\&quot; lastCursor&#x3D;None
   * @param noteId 笔记ID/Note ID (required)
   * @param lastCursor 上一页的游标/Last cursor (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get (String noteId, String lastCursor) throws ApiException {
    // verify the required parameter 'noteId' is set
    if (noteId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'noteId' when calling getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_comments_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("note_id", noteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lastCursor", lastCursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取笔记评论 V2/Get note comments V2
   * # [中文] ### 用途: - 获取笔记评论 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id&#x3D;\&quot;6683b283000000001f0052bf\&quot; lastCursor&#x3D;None
   * @param noteId 笔记ID/Note ID (required)
   * @param lastCursor 上一页的游标/Last cursor (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get_0 (String noteId, String lastCursor) throws ApiException {
    // verify the required parameter 'noteId' is set
    if (noteId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'noteId' when calling getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_comments_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("note_id", noteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lastCursor", lastCursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 通过分享链接获取小红书的Note ID 和 xsec_token/Get Xiaohongshu Note ID and xsec_token by share link
   * # [中文] ### 用途: - 通过分享链接获取小红书的Note ID 和 xsec_token ### 参数: - share_text: 小红书分享链接（支持APP和Web端分享链接） ### 返回: - Note ID 和 xsec_token  # [English] ### Purpose: - Get Xiaohongshu Note ID and xsec_token by share link ### Parameters: - share_text: Xiaohongshu sharing link (support APP and Web sharing link) ### Return: - Note ID and xsec_token  # [示例/Example] share_text&#x3D;\&quot;https://xhslink.com/a/EZ4M9TwMA6c3\&quot;
   * @param shareText 分享链接/Share link (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet (String shareText) throws ApiException {
    // verify the required parameter 'shareText' is set
    if (shareText == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'shareText' when calling getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_id_and_xsec_token";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_text", shareText));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 通过分享链接获取小红书的Note ID 和 xsec_token/Get Xiaohongshu Note ID and xsec_token by share link
   * # [中文] ### 用途: - 通过分享链接获取小红书的Note ID 和 xsec_token ### 参数: - share_text: 小红书分享链接（支持APP和Web端分享链接） ### 返回: - Note ID 和 xsec_token  # [English] ### Purpose: - Get Xiaohongshu Note ID and xsec_token by share link ### Parameters: - share_text: Xiaohongshu sharing link (support APP and Web sharing link) ### Return: - Note ID and xsec_token  # [示例/Example] share_text&#x3D;\&quot;https://xhslink.com/a/EZ4M9TwMA6c3\&quot;
   * @param shareText 分享链接/Share link (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet_0 (String shareText) throws ApiException {
    // verify the required parameter 'shareText' is set
    if (shareText == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'shareText' when calling getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_id_and_xsec_token";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_text", shareText));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取笔记信息 V1/Get note info V1
   * # [中文] ### 用途: - 获取笔记信息 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用&#x60;note_id&#x60;，如果没有则使用&#x60;share_text&#x60;，两个参数二选一，如都携带则以&#x60;note_id&#x60;为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use &#x60;note_id&#x60;, if not, use &#x60;share_text&#x60;, one of the two parameters is required, if both are carried, &#x60;note_id&#x60; shall prevail. ### Return: - Note info  # [示例/Example] note_id&#x3D;\&quot;665f95200000000006005624\&quot;
   * @param noteId 笔记ID/Note ID (optional, default to &quot;&quot;)
   * @param shareText 分享链接/Share link (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet (String noteId, String shareText) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_info";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("note_id", noteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_text", shareText));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取笔记信息 V1/Get note info V1
   * # [中文] ### 用途: - 获取笔记信息 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用&#x60;note_id&#x60;，如果没有则使用&#x60;share_text&#x60;，两个参数二选一，如都携带则以&#x60;note_id&#x60;为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use &#x60;note_id&#x60;, if not, use &#x60;share_text&#x60;, one of the two parameters is required, if both are carried, &#x60;note_id&#x60; shall prevail. ### Return: - Note info  # [示例/Example] note_id&#x3D;\&quot;665f95200000000006005624\&quot;
   * @param noteId 笔记ID/Note ID (optional, default to &quot;&quot;)
   * @param shareText 分享链接/Share link (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet_0 (String noteId, String shareText) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_info";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("note_id", noteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_text", shareText));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取笔记信息 V2/Get note info V2
   * # [中文] ### 用途: - 获取笔记信息 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用&#x60;note_id&#x60;，如果没有则使用&#x60;share_text&#x60;，两个参数二选一，如都携带则以&#x60;note_id&#x60;为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use &#x60;note_id&#x60;, if not, use &#x60;share_text&#x60;, one of the two parameters is required, if both are carried, &#x60;note_id&#x60; shall prevail. ### Return: - Note info  # [示例/Example] note_id&#x3D;\&quot;665f95200000000006005624\&quot;
   * @param noteId 笔记ID/Note ID (optional, default to &quot;&quot;)
   * @param shareText 分享链接/Share link (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get (String noteId, String shareText) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_info_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("note_id", noteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_text", shareText));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取笔记信息 V2/Get note info V2
   * # [中文] ### 用途: - 获取笔记信息 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用&#x60;note_id&#x60;，如果没有则使用&#x60;share_text&#x60;，两个参数二选一，如都携带则以&#x60;note_id&#x60;为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use &#x60;note_id&#x60;, if not, use &#x60;share_text&#x60;, one of the two parameters is required, if both are carried, &#x60;note_id&#x60; shall prevail. ### Return: - Note info  # [示例/Example] note_id&#x3D;\&quot;665f95200000000006005624\&quot;
   * @param noteId 笔记ID/Note ID (optional, default to &quot;&quot;)
   * @param shareText 分享链接/Share link (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get_0 (String noteId, String shareText) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_info_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("note_id", noteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_text", shareText));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取笔记信息 V3 (游客)/Get note info V3 (Visitor)
   * # [中文] ### 用途: - 获取笔记信息V3，仅支持完整的小红书分享链接 ### 参数: - share_text: 完整的小红书分享链接（支持APP和Web端分享链接） ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V3, only support complete Xiaohongshu sharing link ### Parameters: - share_text: Complete Xiaohongshu sharing link(support APP and Web sharing link) ### Return: - Note info  # [示例/Example] share_text&#x3D;\&quot;https://xhslink.com/a/EZ4M9TwMA6c3\&quot;
   * @param shareText 分享链接/Share link (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get (String shareText) throws ApiException {
    // verify the required parameter 'shareText' is set
    if (shareText == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'shareText' when calling getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_info_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_text", shareText));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取笔记信息 V3 (游客)/Get note info V3 (Visitor)
   * # [中文] ### 用途: - 获取笔记信息V3，仅支持完整的小红书分享链接 ### 参数: - share_text: 完整的小红书分享链接（支持APP和Web端分享链接） ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V3, only support complete Xiaohongshu sharing link ### Parameters: - share_text: Complete Xiaohongshu sharing link(support APP and Web sharing link) ### Return: - Note info  # [示例/Example] share_text&#x3D;\&quot;https://xhslink.com/a/EZ4M9TwMA6c3\&quot;
   * @param shareText 分享链接/Share link (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get_0 (String shareText) throws ApiException {
    // verify the required parameter 'shareText' is set
    if (shareText == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'shareText' when calling getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_info_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_text", shareText));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取笔记信息 V4/Get note info V4
   * # [中文] ### 用途: - 获取笔记信息V4 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用&#x60;note_id&#x60;，如果没有则使用&#x60;share_text&#x60;，两个参数二选一，如都携带则以&#x60;note_id&#x60;为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V4 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use &#x60;note_id&#x60;, if not, use &#x60;share_text&#x60;, one of the two parameters is required, if both are carried, &#x60;note_id&#x60; shall prevail. ### Return: - Note info  # [示例/Example] note_id&#x3D;\&quot;665f95200000000006005624\&quot;
   * @param noteId 笔记ID/Note ID (optional, default to &quot;&quot;)
   * @param shareText 分享链接/Share link (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get (String noteId, String shareText) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_info_v4";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("note_id", noteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_text", shareText));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取笔记信息 V4/Get note info V4
   * # [中文] ### 用途: - 获取笔记信息V4 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用&#x60;note_id&#x60;，如果没有则使用&#x60;share_text&#x60;，两个参数二选一，如都携带则以&#x60;note_id&#x60;为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V4 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use &#x60;note_id&#x60;, if not, use &#x60;share_text&#x60;, one of the two parameters is required, if both are carried, &#x60;note_id&#x60; shall prevail. ### Return: - Note info  # [示例/Example] note_id&#x3D;\&quot;665f95200000000006005624\&quot;
   * @param noteId 笔记ID/Note ID (optional, default to &quot;&quot;)
   * @param shareText 分享链接/Share link (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get_0 (String noteId, String shareText) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_info_v4";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("note_id", noteId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_text", shareText));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取笔记信息 V5 (自带Cookie)/Get note info V5 (Self-provided Cookie)
   * # [中文] ### 用途: - 获取笔记信息V5，用户自行提供Cookie来获取笔记信息 - 此接口收费0.001$ ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - xsec_token: X-Sec-Token，可以从搜索接口中获取，分享链接中也有/X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: 用户自行提供的已登录的网页Cookie - proxy: 代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port - 最好使用代理，避免被封号或其他未知问题。  ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V5, user provides Cookie to get note info - This interface charges 0.001$ ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - xsec_token: X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: User provided logged-in web Cookie - proxy: Proxy, format: http://username:password@IP:port - It is recommended to use a proxy to avoid being banned or other unknown issues. ### Return: - Note info  # [示例/Example] note_id &#x3D; \&quot;67855d09000000001703d449\&quot; xsec_token &#x3D; \&quot;ABfpRSESmZDRbX-EX7lzEztktMngxPVC9kU-dgQmuQoNo&#x3D;\&quot; cookie &#x3D; \&quot;Your Cookie\&quot; proxy &#x3D; \&quot;http://username:password@IP:port\&quot;
   * @param getNoteInfoV5Request  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post (GetNoteInfoV5Request getNoteInfoV5Request) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_info_v5";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getNoteInfoV5Request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取笔记信息 V5 (自带Cookie)/Get note info V5 (Self-provided Cookie)
   * # [中文] ### 用途: - 获取笔记信息V5，用户自行提供Cookie来获取笔记信息 - 此接口收费0.001$ ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - xsec_token: X-Sec-Token，可以从搜索接口中获取，分享链接中也有/X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: 用户自行提供的已登录的网页Cookie - proxy: 代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port - 最好使用代理，避免被封号或其他未知问题。  ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V5, user provides Cookie to get note info - This interface charges 0.001$ ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - xsec_token: X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: User provided logged-in web Cookie - proxy: Proxy, format: http://username:password@IP:port - It is recommended to use a proxy to avoid being banned or other unknown issues. ### Return: - Note info  # [示例/Example] note_id &#x3D; \&quot;67855d09000000001703d449\&quot; xsec_token &#x3D; \&quot;ABfpRSESmZDRbX-EX7lzEztktMngxPVC9kU-dgQmuQoNo&#x3D;\&quot; cookie &#x3D; \&quot;Your Cookie\&quot; proxy &#x3D; \&quot;http://username:password@IP:port\&quot;
   * @param getNoteInfoV5Request  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post_0 (GetNoteInfoV5Request getNoteInfoV5Request) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_note_info_v5";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(getNoteInfoV5Request);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取用户信息 V1/Get user info V1
   * # [中文] ### 用途: - 获取用户信息 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot;
   * @param userId 用户ID/User ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getUserInfoApiV1XiaohongshuWebGetUserInfoGet (String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling getUserInfoApiV1XiaohongshuWebGetUserInfoGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_user_info";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getUserInfoApiV1XiaohongshuWebGetUserInfoGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户信息 V1/Get user info V1
   * # [中文] ### 用途: - 获取用户信息 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot;
   * @param userId 用户ID/User ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getUserInfoApiV1XiaohongshuWebGetUserInfoGet_0 (String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling getUserInfoApiV1XiaohongshuWebGetUserInfoGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_user_info";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getUserInfoApiV1XiaohongshuWebGetUserInfoGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户信息 V2/Get user info V2
   * # [中文] ### 用途: - 获取用户信息 V2 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V2 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot;
   * @param userId 用户ID/User ID (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get (String userId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_user_info_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户信息 V2/Get user info V2
   * # [中文] ### 用途: - 获取用户信息 V2 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V2 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot;
   * @param userId 用户ID/User ID (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get_0 (String userId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_user_info_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户信息 V3/Get user info V3
   * # [中文] ### 用途: - 获取用户信息 V3 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V3 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot;
   * @param userId 用户ID/User ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get (String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_user_info_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户信息 V3/Get user info V3
   * # [中文] ### 用途: - 获取用户信息 V3 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V3 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot;
   * @param userId 用户ID/User ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get_0 (String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_user_info_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户的笔记 V1/Get user notes V1
   * # [中文] ### 用途: - 获取用户的笔记 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \&quot;662908190000000001007366\&quot;     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \&quot;662908190000000001007366\&quot;     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot; lastCursor&#x3D;None
   * @param userId 用户ID/User ID (required)
   * @param lastCursor 上一页的游标/Last cursor (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getUserNotesApiV1XiaohongshuWebGetUserNotesGet (String userId, String lastCursor) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling getUserNotesApiV1XiaohongshuWebGetUserNotesGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_user_notes";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lastCursor", lastCursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getUserNotesApiV1XiaohongshuWebGetUserNotesGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户的笔记 V1/Get user notes V1
   * # [中文] ### 用途: - 获取用户的笔记 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \&quot;662908190000000001007366\&quot;     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \&quot;662908190000000001007366\&quot;     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot; lastCursor&#x3D;None
   * @param userId 用户ID/User ID (required)
   * @param lastCursor 上一页的游标/Last cursor (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getUserNotesApiV1XiaohongshuWebGetUserNotesGet_0 (String userId, String lastCursor) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling getUserNotesApiV1XiaohongshuWebGetUserNotesGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_user_notes";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lastCursor", lastCursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getUserNotesApiV1XiaohongshuWebGetUserNotesGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户的笔记 V2/Get user notes V2
   * # [中文] ### 用途: - 获取用户的笔记 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \&quot;662908190000000001007366\&quot;     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \&quot;662908190000000001007366\&quot;     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot; lastCursor&#x3D;None
   * @param userId 用户ID/User ID (required)
   * @param lastCursor 上一页的游标/Last cursor (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get (String userId, String lastCursor) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_user_notes_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lastCursor", lastCursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户的笔记 V2/Get user notes V2
   * # [中文] ### 用途: - 获取用户的笔记 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \&quot;662908190000000001007366\&quot;     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \&quot;662908190000000001007366\&quot;     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id&#x3D;\&quot;5f4a10070000000001006fc7\&quot; lastCursor&#x3D;None
   * @param userId 用户ID/User ID (required)
   * @param lastCursor 上一页的游标/Last cursor (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get_0 (String userId, String lastCursor) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_user_notes_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("lastCursor", lastCursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取游客Cookie/Get visitor cookie
   * # [中文] ### 用途: - 获取小红书网页版的游客Cookie，可以用于爬取小红书的一些数据。 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get Xiaohongshu web visitor cookie, which can be used to crawl some data of Xiaohongshu. ### Return: - Visitor cookie
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_visitor_cookie";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取游客Cookie/Get visitor cookie
   * # [中文] ### 用途: - 获取小红书网页版的游客Cookie，可以用于爬取小红书的一些数据。 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get Xiaohongshu web visitor cookie, which can be used to crawl some data of Xiaohongshu. ### Return: - Visitor cookie
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet_0 () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/get_visitor_cookie";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 搜索笔记/Search notes
   * # [中文] ### 用途: - 搜索笔记 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 - sort: 排序方式     - 综合排序（默认参数）: general     - 最热排序: popularity_descending     - 最新排序: time_descending - noteType: 笔记类型     - 综合笔记（默认参数）: _0     - 视频笔记: _1     - 图文笔记: _2 ### 返回: - 笔记列表  # [English] ### Purpose: - Search notes ### Parameters: - keyword: Keyword - page: Page, default is 1 - sort: Sort     - General sort (default): general     - Popularity sort: popularity_descending     - Latest sort: time_descending - noteType: Note type     - General note (default): _0     - Video note: _1     - Image note: _2 ### Return: - Note list  # [示例/Example] keyword&#x3D;\&quot;美食\&quot; page&#x3D;1 sort&#x3D;\&quot;general\&quot; noteType&#x3D;\&quot;_0\&quot;
   * @param keyword 搜索关键词/Keyword (required)
   * @param page 页码/Page (optional, default to 1)
   * @param sort 排序方式/Sort (optional, default to &quot;general&quot;)
   * @param noteType 笔记类型/Note type (optional, default to &quot;_0&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> searchNotesApiV1XiaohongshuWebSearchNotesGet (String keyword, Integer page, String sort, String noteType) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling searchNotesApiV1XiaohongshuWebSearchNotesGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/search_notes";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort", sort));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("noteType", noteType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "searchNotesApiV1XiaohongshuWebSearchNotesGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 搜索笔记/Search notes
   * # [中文] ### 用途: - 搜索笔记 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 - sort: 排序方式     - 综合排序（默认参数）: general     - 最热排序: popularity_descending     - 最新排序: time_descending - noteType: 笔记类型     - 综合笔记（默认参数）: _0     - 视频笔记: _1     - 图文笔记: _2 ### 返回: - 笔记列表  # [English] ### Purpose: - Search notes ### Parameters: - keyword: Keyword - page: Page, default is 1 - sort: Sort     - General sort (default): general     - Popularity sort: popularity_descending     - Latest sort: time_descending - noteType: Note type     - General note (default): _0     - Video note: _1     - Image note: _2 ### Return: - Note list  # [示例/Example] keyword&#x3D;\&quot;美食\&quot; page&#x3D;1 sort&#x3D;\&quot;general\&quot; noteType&#x3D;\&quot;_0\&quot;
   * @param keyword 搜索关键词/Keyword (required)
   * @param page 页码/Page (optional, default to 1)
   * @param sort 排序方式/Sort (optional, default to &quot;general&quot;)
   * @param noteType 笔记类型/Note type (optional, default to &quot;_0&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> searchNotesApiV1XiaohongshuWebSearchNotesGet_0 (String keyword, Integer page, String sort, String noteType) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling searchNotesApiV1XiaohongshuWebSearchNotesGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/search_notes";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort", sort));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("noteType", noteType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "searchNotesApiV1XiaohongshuWebSearchNotesGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 搜索用户/Search users
   * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 ### 返回: - 用户列表  # [English] ### Purpose: - Search users ### Parameters: - keyword: Keyword - page: Page, default is 1 ### Return: - User list  # [示例/Example] keyword&#x3D;\&quot;美食\&quot; page&#x3D;1
   * @param keyword 搜索关键词/Keyword (required)
   * @param page 页码/Page (optional, default to 1)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> searchUsersApiV1XiaohongshuWebSearchUsersGet (String keyword, Integer page) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling searchUsersApiV1XiaohongshuWebSearchUsersGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/search_users";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "searchUsersApiV1XiaohongshuWebSearchUsersGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 搜索用户/Search users
   * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 ### 返回: - 用户列表  # [English] ### Purpose: - Search users ### Parameters: - keyword: Keyword - page: Page, default is 1 ### Return: - User list  # [示例/Example] keyword&#x3D;\&quot;美食\&quot; page&#x3D;1
   * @param keyword 搜索关键词/Keyword (required)
   * @param page 页码/Page (optional, default to 1)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> searchUsersApiV1XiaohongshuWebSearchUsersGet_0 (String keyword, Integer page) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling searchUsersApiV1XiaohongshuWebSearchUsersGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/search_users";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "searchUsersApiV1XiaohongshuWebSearchUsersGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 小红书Web签名/Xiaohongshu Web sign
   * # [中文] ### 用途: - 小红书Web签名，用于获取小红书的一些数据。 - 生成 &#x60;X-s&#x60;, &#x60;X-t&#x60;, &#x60;X-s-common&#x60; 等签名参数。 - 价格：0.001$/次 ### 参数: - sign_request: 签名请求模型     - path: 请求接口的路径，例如: &#x60;/api/sns/web/v1/homefeed&#x60;     - data: 请求API的荷载数据     - cookie: 请求接口的Cookie ### 返回: - 签名参数(X-s, X-t, X-s-common等)  # [English] ### Purpose: - Xiaohongshu Web sign, used to get some data of Xiaohongshu. - Generate &#x60;X-s&#x60;, &#x60;X-t&#x60;, &#x60;X-s-common&#x60; and other signature parameters. - Price: 0.001$/time ### Parameters: - sign_request: Sign request model     - path: Request API path, e.g. &#x60;/api/sns/web/v1/homefeed&#x60;     - data: Payload data of request API     - cookie: Request API cookie ### Return: - Signature parameters(X-s, X-t, X-s-common, etc.)  # [示例/Example] {     \&quot;path\&quot;: \&quot;/api/sns/web/v1/homefeed\&quot;,     \&quot;data\&quot;: {         \&quot;cursor_score\&quot;: \&quot;\&quot;,         \&quot;num\&quot;: 35,         \&quot;refresh_type\&quot;: 1,         \&quot;note_index\&quot;: 35,         \&quot;unread_begin_note_id\&quot;: \&quot;\&quot;,         \&quot;unread_end_note_id\&quot;: \&quot;\&quot;,         \&quot;unread_note_count\&quot;: 0,         \&quot;category\&quot;: \&quot;homefeed_recommend\&quot;,         \&quot;search_key\&quot;: \&quot;\&quot;,         \&quot;need_num\&quot;: 10,         \&quot;image_formats\&quot;: [             \&quot;jpg\&quot;,             \&quot;webp\&quot;,             \&quot;avif\&quot;         ],         \&quot;need_filter_image\&quot;: False     },     \&quot;cookie\&quot;: \&quot;web_session&#x3D;030037a04eafd37791e6e4bd05204a8cf2af05;acw_tc&#x3D;0a00d79f17363096679345838efb77751cc087fb039dd1691dc954824410f6;abRequestId&#x3D;384480ae-5196-5818-a835-42e6278de9f0;webBuild&#x3D;4.47.1;xsecappid&#x3D;xhs-pc-web;a1&#x3D;194441ef694PayUbdUvgp0dSHfIcACsNsLud0Lgru50000354513;webId&#x3D;6cf10a564b9b07d129729b65e0d1785a;sec_poison_id&#x3D;32964532-d414-4beb-914f-98811853b75f\&quot; }
   * @param xhsWebSignRequestModel  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> signApiV1XiaohongshuWebSignPost (XhsWebSignRequestModel xhsWebSignRequestModel) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/sign";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(xhsWebSignRequestModel);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "signApiV1XiaohongshuWebSignPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 小红书Web签名/Xiaohongshu Web sign
   * # [中文] ### 用途: - 小红书Web签名，用于获取小红书的一些数据。 - 生成 &#x60;X-s&#x60;, &#x60;X-t&#x60;, &#x60;X-s-common&#x60; 等签名参数。 - 价格：0.001$/次 ### 参数: - sign_request: 签名请求模型     - path: 请求接口的路径，例如: &#x60;/api/sns/web/v1/homefeed&#x60;     - data: 请求API的荷载数据     - cookie: 请求接口的Cookie ### 返回: - 签名参数(X-s, X-t, X-s-common等)  # [English] ### Purpose: - Xiaohongshu Web sign, used to get some data of Xiaohongshu. - Generate &#x60;X-s&#x60;, &#x60;X-t&#x60;, &#x60;X-s-common&#x60; and other signature parameters. - Price: 0.001$/time ### Parameters: - sign_request: Sign request model     - path: Request API path, e.g. &#x60;/api/sns/web/v1/homefeed&#x60;     - data: Payload data of request API     - cookie: Request API cookie ### Return: - Signature parameters(X-s, X-t, X-s-common, etc.)  # [示例/Example] {     \&quot;path\&quot;: \&quot;/api/sns/web/v1/homefeed\&quot;,     \&quot;data\&quot;: {         \&quot;cursor_score\&quot;: \&quot;\&quot;,         \&quot;num\&quot;: 35,         \&quot;refresh_type\&quot;: 1,         \&quot;note_index\&quot;: 35,         \&quot;unread_begin_note_id\&quot;: \&quot;\&quot;,         \&quot;unread_end_note_id\&quot;: \&quot;\&quot;,         \&quot;unread_note_count\&quot;: 0,         \&quot;category\&quot;: \&quot;homefeed_recommend\&quot;,         \&quot;search_key\&quot;: \&quot;\&quot;,         \&quot;need_num\&quot;: 10,         \&quot;image_formats\&quot;: [             \&quot;jpg\&quot;,             \&quot;webp\&quot;,             \&quot;avif\&quot;         ],         \&quot;need_filter_image\&quot;: False     },     \&quot;cookie\&quot;: \&quot;web_session&#x3D;030037a04eafd37791e6e4bd05204a8cf2af05;acw_tc&#x3D;0a00d79f17363096679345838efb77751cc087fb039dd1691dc954824410f6;abRequestId&#x3D;384480ae-5196-5818-a835-42e6278de9f0;webBuild&#x3D;4.47.1;xsecappid&#x3D;xhs-pc-web;a1&#x3D;194441ef694PayUbdUvgp0dSHfIcACsNsLud0Lgru50000354513;webId&#x3D;6cf10a564b9b07d129729b65e0d1785a;sec_poison_id&#x3D;32964532-d414-4beb-914f-98811853b75f\&quot; }
   * @param xhsWebSignRequestModel  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> signApiV1XiaohongshuWebSignPost_0 (XhsWebSignRequestModel xhsWebSignRequestModel) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/xiaohongshu/web/sign";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(xhsWebSignRequestModel);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "signApiV1XiaohongshuWebSignPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
}
