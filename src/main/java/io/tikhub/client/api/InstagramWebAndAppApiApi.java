/*
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.tikhub.client.api;

import io.tikhub.client.ApiClient;
import io.tikhub.client.ApiException;
import io.tikhub.client.Pair;

import org.openapitools.client.model.HttpValidationError;
import org.openapitools.client.model.ResponseModel;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;


public class InstagramWebAndAppApiApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  
  public InstagramWebAndAppApiApi() {
    this(new ApiClient());
  }

  public InstagramWebAndAppApiApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  /**
   * 根据评论ID获取评论回复数据/Get comment replies by comment ID
   * # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot; comment_id &#x3D; \&quot;18033049183828491\&quot; pagination_token &#x3D; None
   * @param url Instagram帖子URL/Instagram post URL (required)
   * @param commentId Instagram评论ID/Instagram comment ID (required)
   * @param paginationToken 分页token/Pagination token (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet (String url, String commentId, String paginationToken) throws ApiException {
    // verify the required parameter 'url' is set
    if (url == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'url' when calling fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet"));
    }
    // verify the required parameter 'commentId' is set
    if (commentId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'commentId' when calling fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_comment_replies_by_comment_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("url", url));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("comment_id", commentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pagination_token", paginationToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据评论ID获取评论回复数据/Get comment replies by comment ID
   * # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot; comment_id &#x3D; \&quot;18033049183828491\&quot; pagination_token &#x3D; None
   * @param url Instagram帖子URL/Instagram post URL (required)
   * @param commentId Instagram评论ID/Instagram comment ID (required)
   * @param paginationToken 分页token/Pagination token (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_0 (String url, String commentId, String paginationToken) throws ApiException {
    // verify the required parameter 'url' is set
    if (url == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'url' when calling fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_0"));
    }
    // verify the required parameter 'commentId' is set
    if (commentId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'commentId' when calling fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_comment_replies_by_comment_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("url", url));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("comment_id", commentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pagination_token", paginationToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 综合搜索/Search all by query
   * # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot;
   * @param keyword 关键词/Query (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet (String keyword) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_global_search";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 综合搜索/Search all by query
   * # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot;
   * @param keyword 关键词/Query (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_0 (String keyword) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_global_search";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据关键词获取话题帖子/Get hashtag posts by query
   * # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - pagination_token: 翻页游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 - feed_type: Feed类型     - top: 热门（默认）     - recent: 最新     - clips: 快拍 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - pagination_token: Pagination token, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. - feed_type: Feed type     - top: Top (default)     - recent: Recent (sort by time)     - clips: Clips (show only Reels) ### Return: - Hashtag posts  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot; pagination_token &#x3D; None
   * @param keyword 关键词/Query (required)
   * @param paginationToken 翻页令牌/Pagination token (optional)
   * @param feedType Feed类型/Feed type (optional, default to &quot;top&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet (String keyword, String paginationToken, String feedType) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_hashtag_posts_by_keyword";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pagination_token", paginationToken));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("feed_type", feedType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据关键词获取话题帖子/Get hashtag posts by query
   * # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - pagination_token: 翻页游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 - feed_type: Feed类型     - top: 热门（默认）     - recent: 最新     - clips: 快拍 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - pagination_token: Pagination token, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. - feed_type: Feed type     - top: Top (default)     - recent: Recent (sort by time)     - clips: Clips (show only Reels) ### Return: - Hashtag posts  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot; pagination_token &#x3D; None
   * @param keyword 关键词/Query (required)
   * @param paginationToken 翻页令牌/Pagination token (optional)
   * @param feedType Feed类型/Feed type (optional, default to &quot;top&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_0 (String keyword, String paginationToken, String feedType) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_hashtag_posts_by_keyword";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pagination_token", paginationToken));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("feed_type", feedType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据highlights ID获取highlight数据/Get highlights by highlight ID
   * # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id &#x3D; \&quot;17871373118984285\&quot;
   * @param highlightId Instagram highlight ID/Instagram highlight ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet (String highlightId) throws ApiException {
    // verify the required parameter 'highlightId' is set
    if (highlightId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'highlightId' when calling fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_highlights_by_highlight_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("highlight_id", highlightId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据highlights ID获取highlight数据/Get highlights by highlight ID
   * # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id &#x3D; \&quot;17871373118984285\&quot;
   * @param highlightId Instagram highlight ID/Instagram highlight ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_0 (String highlightId) throws ApiException {
    // verify the required parameter 'highlightId' is set
    if (highlightId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'highlightId' when calling fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_highlights_by_highlight_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("highlight_id", highlightId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据地点ID获取地点相关的帖子/Get location posts by location ID
   * # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id &#x3D; \&quot;115412053922647\&quot; max_id &#x3D; None
   * @param locationId Instagram地点ID/Instagram location ID (required)
   * @param maxId 最大ID/Max ID (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet (String locationId, String maxId) throws ApiException {
    // verify the required parameter 'locationId' is set
    if (locationId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'locationId' when calling fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_location_posts_by_location_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id", locationId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_id", maxId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据地点ID获取地点相关的帖子/Get location posts by location ID
   * # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id &#x3D; \&quot;115412053922647\&quot; max_id &#x3D; None
   * @param locationId Instagram地点ID/Instagram location ID (required)
   * @param maxId 最大ID/Max ID (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_0 (String locationId, String maxId) throws ApiException {
    // verify the required parameter 'locationId' is set
    if (locationId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'locationId' when calling fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_location_posts_by_location_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("location_id", locationId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_id", maxId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据音乐ID获取音乐数据/Get music data by music ID
   * # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id &#x3D; \&quot;841270117005292\&quot;
   * @param musicId Instagram音乐ID/Instagram music ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet (String musicId) throws ApiException {
    // verify the required parameter 'musicId' is set
    if (musicId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'musicId' when calling fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_music_info_by_music_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("music_id", musicId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据音乐ID获取音乐数据/Get music data by music ID
   * # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id &#x3D; \&quot;841270117005292\&quot;
   * @param musicId Instagram音乐ID/Instagram music ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_0 (String musicId) throws ApiException {
    // verify the required parameter 'musicId' is set
    if (musicId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'musicId' when calling fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_music_info_by_music_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("music_id", musicId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据URL获取帖子评论数据/Get post comments by URL
   * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot; pagination_token &#x3D; None
   * @param url Instagram帖子URL/Instagram post URL (required)
   * @param paginationToken 分页token/Pagination token (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet (String url, String paginationToken) throws ApiException {
    // verify the required parameter 'url' is set
    if (url == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'url' when calling fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_post_comments_by_url";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("url", url));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pagination_token", paginationToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据URL获取帖子评论数据/Get post comments by URL
   * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot; pagination_token &#x3D; None
   * @param url Instagram帖子URL/Instagram post URL (required)
   * @param paginationToken 分页token/Pagination token (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_0 (String url, String paginationToken) throws ApiException {
    // verify the required parameter 'url' is set
    if (url == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'url' when calling fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_post_comments_by_url";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("url", url));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pagination_token", paginationToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据帖子ID获取帖子数据/Get post data by post ID
   * # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id &#x3D; \&quot;3369328379222099122\&quot;
   * @param postId Instagram帖子ID/Instagram post ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet (String postId) throws ApiException {
    // verify the required parameter 'postId' is set
    if (postId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'postId' when calling fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_post_info_by_post_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("post_id", postId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据帖子ID获取帖子数据/Get post data by post ID
   * # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id &#x3D; \&quot;3369328379222099122\&quot;
   * @param postId Instagram帖子ID/Instagram post ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_0 (String postId) throws ApiException {
    // verify the required parameter 'postId' is set
    if (postId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'postId' when calling fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_post_info_by_post_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("post_id", postId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据URL获取帖子数据/Get post data by URL
   * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C7CQk83LQSy/\&quot;
   * @param url Instagram帖子URL/Instagram post URL (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet (String url) throws ApiException {
    // verify the required parameter 'url' is set
    if (url == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'url' when calling fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_post_info_by_url";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("url", url));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据URL获取帖子数据/Get post data by URL
   * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C7CQk83LQSy/\&quot;
   * @param url Instagram帖子URL/Instagram post URL (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_0 (String url) throws ApiException {
    // verify the required parameter 'url' is set
    if (url == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'url' when calling fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_post_info_by_url";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("url", url));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据URL获取帖子点赞数据/Get post likes by URL
   * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot;
   * @param url Instagram帖子URL/Instagram post URL (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet (String url) throws ApiException {
    // verify the required parameter 'url' is set
    if (url == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'url' when calling fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_post_likes_by_url";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("url", url));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据URL获取帖子点赞数据/Get post likes by URL
   * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C3OqtMeRxrV/\&quot;
   * @param url Instagram帖子URL/Instagram post URL (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_0 (String url) throws ApiException {
    // verify the required parameter 'url' is set
    if (url == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'url' when calling fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_post_likes_by_url";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("url", url));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据帖子URL获取媒体数据/Get media data by URL
   * # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C7CQk83LQSy/\&quot;
   * @param url Instagram帖子URL/Instagram post URL (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet (String url) throws ApiException {
    // verify the required parameter 'url' is set
    if (url == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'url' when calling fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_post_media_by_url";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("url", url));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据帖子URL获取媒体数据/Get media data by URL
   * # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url &#x3D; \&quot;https://www.instagram.com/p/C7CQk83LQSy/\&quot;
   * @param url Instagram帖子URL/Instagram post URL (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_0 (String url) throws ApiException {
    // verify the required parameter 'url' is set
    if (url == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'url' when calling fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_post_media_by_url";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("url", url));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户ID获取与用户相关的其他用户/Get user related users by user ID
   * # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
   * @param userId Instagram用户ID/Instagram user ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet (String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_related_users_by_user_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户ID获取与用户相关的其他用户/Get user related users by user ID
   * # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
   * @param userId Instagram用户ID/Instagram user ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_0 (String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_related_users_by_user_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据关键词搜索话题数据/Search hashtags by query
   * # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot;
   * @param keyword 关键词/Query (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet (String keyword) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_search_hashtags_by_keyword";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据关键词搜索话题数据/Search hashtags by query
   * # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;GitHub\&quot;
   * @param keyword 关键词/Query (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_0 (String keyword) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_search_hashtags_by_keyword";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据关键词搜索地点数据/Search locations by query
   * # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;ShangHai\&quot;
   * @param keyword 关键词/Query (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet (String keyword) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_search_locations_by_keyword";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据关键词搜索地点数据/Search locations by query
   * # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;ShangHai\&quot;
   * @param keyword 关键词/Query (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_0 (String keyword) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_search_locations_by_keyword";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据关键词搜索用户/Search users by query
   * # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;instagram\&quot;
   * @param keyword 关键词/Query (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet (String keyword) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_search_users_by_keyword";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据关键词搜索用户/Search users by query
   * # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword &#x3D; \&quot;instagram\&quot;
   * @param keyword 关键词/Query (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_0 (String keyword) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_search_users_by_keyword";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取相似的账户数据/Get similar accounts by username
   * # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username &#x3D; \&quot;daily_fuck_people\&quot;
   * @param username Instagram用户名/Instagram username (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet (String username) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_similar_accounts_by_username";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取相似的账户数据/Get similar accounts by username
   * # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username &#x3D; \&quot;daily_fuck_people\&quot;
   * @param username Instagram用户名/Instagram username (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_0 (String username) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_similar_accounts_by_username";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户ID获取用户数据关于信息/Get user data about by user ID
   * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
   * @param userId Instagram用户ID/Instagram user ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet (String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_about_info_by_user_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户ID获取用户数据关于信息/Get user data about by user ID
   * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
   * @param userId Instagram用户ID/Instagram user ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_0 (String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_about_info_by_user_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取用户的粉丝数据/Get user followers by username
   * # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
   * @param username Instagram用户名/Instagram username (required)
   * @param paginationToken 分页令牌/Pagination token (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet (String username, String paginationToken) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_followers_by_username";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pagination_token", paginationToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取用户的粉丝数据/Get user followers by username
   * # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
   * @param username Instagram用户名/Instagram username (required)
   * @param paginationToken 分页令牌/Pagination token (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_0 (String username, String paginationToken) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_followers_by_username";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pagination_token", paginationToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取用户的正在关注的用户数据/Get user followings by username
   * # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
   * @param username Instagram用户名/Instagram username (required)
   * @param paginationToken 分页令牌/Pagination token (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet (String username, String paginationToken) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_following_by_username";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pagination_token", paginationToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取用户的正在关注的用户数据/Get user followings by username
   * # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
   * @param username Instagram用户名/Instagram username (required)
   * @param paginationToken 分页令牌/Pagination token (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_0 (String username, String paginationToken) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_following_by_username";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pagination_token", paginationToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取用户的highlights数据/Get user highlights by username
   * # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
   * @param username Instagram用户名/Instagram username (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet (String username) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_highlights_by_username";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取用户的highlights数据/Get user highlights by username
   * # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
   * @param username Instagram用户名/Instagram username (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_0 (String username) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_highlights_by_username";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户ID获取用户数据/Get user data by user ID
   * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
   * @param userId Instagram用户ID/Instagram user ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet (String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_user_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户ID获取用户数据/Get user data by user ID
   * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
   * @param userId Instagram用户ID/Instagram user ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_0 (String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_user_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户ID获取用户数据V2/Get user data by user ID V2
   * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
   * @param userId Instagram用户ID/Instagram user ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get (String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_user_id_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户ID获取用户数据V2/Get user data by user ID V2
   * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot;
   * @param userId Instagram用户ID/Instagram user ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_0 (String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_user_id_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取用户数据/Get user data by username
   * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
   * @param username Instagram用户名/Instagram username (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet (String username) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_username";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取用户数据/Get user data by username
   * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
   * @param username Instagram用户名/Instagram username (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_0 (String username) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_username";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取用户数据V2/Get user data by username V2
   * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
   * @param username Instagram用户名/Instagram username (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get (String username) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_username_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取用户数据V2/Get user data by username V2
   * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
   * @param username Instagram用户名/Instagram username (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_0 (String username) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_username_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取用户网页接口的个人信息/Get user info by username web API
   * # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
   * @param username Instagram用户名/Instagram username (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet (String username) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_username_web";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取用户网页接口的个人信息/Get user info by username web API
   * # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
   * @param username Instagram用户名/Instagram username (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_0 (String username) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_info_by_username_web";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户ID获取用户发布的帖子/Get user posts by user ID
   * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 end_cursor &#x3D; None
   * @param userId Instagram用户ID/Instagram user ID (required)
   * @param count 每页数量/Count per page (optional, default to 12)
   * @param endCursor 结束游标/End cursor (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet (String userId, Integer count, String endCursor) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_posts_by_user_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("end_cursor", endCursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户ID获取用户发布的帖子/Get user posts by user ID
   * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 end_cursor &#x3D; None
   * @param userId Instagram用户ID/Instagram user ID (required)
   * @param count 每页数量/Count per page (optional, default to 12)
   * @param endCursor 结束游标/End cursor (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_0 (String userId, Integer count, String endCursor) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_posts_by_user_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("end_cursor", endCursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户ID获取用户发布的快拍/Get user reels by user ID
   * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 max_id &#x3D; None
   * @param userId Instagram用户ID/Instagram user ID (required)
   * @param count 每页数量/Count per page (optional, default to 12)
   * @param maxId 最大ID/Max ID (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet (String userId, Integer count, String maxId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_reels_by_user_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_id", maxId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户ID获取用户发布的快拍/Get user reels by user ID
   * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 max_id &#x3D; None
   * @param userId Instagram用户ID/Instagram user ID (required)
   * @param count 每页数量/Count per page (optional, default to 12)
   * @param maxId 最大ID/Max ID (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_0 (String userId, Integer count, String maxId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_reels_by_user_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_id", maxId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取用户的Reels数据V2/Get user reels by username V2
   * # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
   * @param username Instagram用户名/Instagram username (required)
   * @param paginationToken 分页token/Pagination token (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get (String username, String paginationToken) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_reels_by_username_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pagination_token", paginationToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取用户的Reels数据V2/Get user reels by username V2
   * # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
   * @param username Instagram用户名/Instagram username (required)
   * @param paginationToken 分页token/Pagination token (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_0 (String username, String paginationToken) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_reels_by_username_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pagination_token", paginationToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取用户的Stories数据/Get user stories by username
   * # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
   * @param username Instagram用户名/Instagram username (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet (String username) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_stories_by_username";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取用户的Stories数据/Get user stories by username
   * # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username &#x3D; \&quot;instagram\&quot;
   * @param username Instagram用户名/Instagram username (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_0 (String username) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_stories_by_username";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID
   * # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 end_cursor &#x3D; None
   * @param userId Instagram用户ID/Instagram user ID (required)
   * @param count 每页数量/Count per page (optional, default to 12)
   * @param endCursor 结束游标/End cursor (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet (String userId, Integer count, String endCursor) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_tagged_posts_by_user_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("end_cursor", endCursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID
   * # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id &#x3D; \&quot;25025320\&quot; count &#x3D; 12 end_cursor &#x3D; None
   * @param userId Instagram用户ID/Instagram user ID (required)
   * @param count 每页数量/Count per page (optional, default to 12)
   * @param endCursor 结束游标/End cursor (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_0 (String userId, Integer count, String endCursor) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_tagged_posts_by_user_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("end_cursor", endCursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取用户的tv_posts数据/Get user tv_posts by username
   * # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
   * @param username Instagram用户名/Instagram username (required)
   * @param paginationToken 分页token/Pagination token (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet (String username, String paginationToken) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_tv_posts_by_username";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pagination_token", paginationToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据用户名获取用户的tv_posts数据/Get user tv_posts by username
   * # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username &#x3D; \&quot;instagram\&quot; pagination_token &#x3D; None
   * @param username Instagram用户名/Instagram username (required)
   * @param paginationToken 分页token/Pagination token (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_0 (String username, String paginationToken) throws ApiException {
    // verify the required parameter 'username' is set
    if (username == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'username' when calling fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/instagram/web_app/fetch_user_tv_posts_by_username";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("username", username));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pagination_token", paginationToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
}
