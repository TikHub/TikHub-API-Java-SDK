/*
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.tikhub.client.api;

import io.tikhub.client.ApiClient;
import io.tikhub.client.ApiException;
import io.tikhub.client.Pair;

import org.openapitools.client.model.HttpValidationError;
import org.openapitools.client.model.ResponseModel;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;


public class ZhihuWebApiApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  
  public ZhihuWebApiApi() {
    this(new ApiClient());
  }

  public ZhihuWebApiApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  /**
   * 获取知乎AI搜索/Get Zhihu AI Search
   * # [中文] ### 用途: - 获取知乎AI搜索 ### 参数: - message_content: 搜索内容 ### 返回: - 知乎AI搜索消息ID，用于请求搜索结果  # [English] ### Purpose: - Get Zhihu AI Search ### Parameters: - message_content: Search Content ### Returns: - Zhihu AI Search Message ID for requesting search results  # [示例/Example] message_content &#x3D; \&quot;deepseek\&quot;
   * @param messageContent 搜索内容/Search Content (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchAiSearchApiV1ZhihuWebFetchAiSearchGet (String messageContent) throws ApiException {
    // verify the required parameter 'messageContent' is set
    if (messageContent == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'messageContent' when calling fetchAiSearchApiV1ZhihuWebFetchAiSearchGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_ai_search";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("message_content", messageContent));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchAiSearchApiV1ZhihuWebFetchAiSearchGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎AI搜索/Get Zhihu AI Search
   * # [中文] ### 用途: - 获取知乎AI搜索 ### 参数: - message_content: 搜索内容 ### 返回: - 知乎AI搜索消息ID，用于请求搜索结果  # [English] ### Purpose: - Get Zhihu AI Search ### Parameters: - message_content: Search Content ### Returns: - Zhihu AI Search Message ID for requesting search results  # [示例/Example] message_content &#x3D; \&quot;deepseek\&quot;
   * @param messageContent 搜索内容/Search Content (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchAiSearchApiV1ZhihuWebFetchAiSearchGet_0 (String messageContent) throws ApiException {
    // verify the required parameter 'messageContent' is set
    if (messageContent == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'messageContent' when calling fetchAiSearchApiV1ZhihuWebFetchAiSearchGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_ai_search";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("message_content", messageContent));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchAiSearchApiV1ZhihuWebFetchAiSearchGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎AI搜索结果/Get Zhihu AI Search Result
   * # [中文] ### 用途: - 获取知乎AI搜索结果 ### 参数: - message_id: 消息ID ### 返回: - 知乎AI搜索结果  # [English] ### Purpose: - Get Zhihu AI Search Result ### Parameters: - message_id: Message ID ### Returns: - Zhihu AI Search Result  # [示例/Example] message_id &#x3D; \&quot;5f8b4f4a-0b7c-4d1b-8c4f-2e5c0d6c1b9d\&quot;
   * @param messageId 消息ID/Message ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet (String messageId) throws ApiException {
    // verify the required parameter 'messageId' is set
    if (messageId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'messageId' when calling fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_ai_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("message_id", messageId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎AI搜索结果/Get Zhihu AI Search Result
   * # [中文] ### 用途: - 获取知乎AI搜索结果 ### 参数: - message_id: 消息ID ### 返回: - 知乎AI搜索结果  # [English] ### Purpose: - Get Zhihu AI Search Result ### Parameters: - message_id: Message ID ### Returns: - Zhihu AI Search Result  # [示例/Example] message_id &#x3D; \&quot;5f8b4f4a-0b7c-4d1b-8c4f-2e5c0d6c1b9d\&quot;
   * @param messageId 消息ID/Message ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet_0 (String messageId) throws ApiException {
    // verify the required parameter 'messageId' is set
    if (messageId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'messageId' when calling fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_ai_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("message_id", messageId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎文章搜索V3/Get Zhihu Article Search V3
   * # [中文] ### 用途: - 获取知乎文章搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页文章数量 - show_all_topics: 显示所有主题，     - 0 不显示话题     - 1 显示话题 - search_source: 搜索来源     - Filter 过滤参数生效     - Normal 为普通结果 - search_hash_id: 搜索哈希ID，用于过滤重复搜索结果 - vertical: 空 不限类型     - answer 只看回答     - article 只看文章     - zvideo 只看视频 - sort: 空 综合排序     - upvoted_count 最多赞同     - created_time 最新发布 - time_interval: 时间间隔     - 空 不限时间     - a_day 一天内     - a_week 一周内     - a_month 一个月内     - three_months 三个月内     - half_a_year 半年内     - a_year 一年内 - vertical_info: 垂类信息     - 0,0,0,0,0,0,0,0,0,0,0,0 不限类型，不会设置勿填 ### 返回: - 知乎文章搜索V3  # [English] ### Purpose: - Get Zhihu Article Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of articles per page - show_all_topics: Show all topics     - 0 Do not show topics     - 1 Show topics - search_source: Search Source     - Filter parameter takes effect     - Normal is normal result - search_hash_id: Search Hash ID, used to filter duplicate search results - vertical: Empty unlimited type     - answer only see answers     - article only see articles     - zvideo only see videos - sort: Empty comprehensive sorting     - upvoted_count most upvoted     - created_time latest release - time_interval: Time interval     - Empty unlimited time     - a_day within a day     - a_week within a week     - a_month within a month     - three_months within three months     - half_a_year within half a year     - a_year within a year - vertical_info: Vertical information     - 0,0,0,0,0,0,0,0,0,0,0,0 unlimited type, do not set do not fill ### Returns: - Zhihu Article Search V3  # [示例/Example] # 默认搜索，综合排序，不限时间 keyword &#x3D; \&quot;deepseek\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot; show_all_topics &#x3D; 0 search_source &#x3D; \&quot;Normal\&quot; search_hash_id &#x3D; \&quot;\&quot; vertical &#x3D; \&quot;\&quot; sort &#x3D; \&quot;\&quot; time_interval &#x3D; \&quot;\&quot; vertical_info &#x3D; \&quot;\&quot;  # 只看回答，最多赞同，三月内 keyword &#x3D; \&quot;deepseek\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot; show_all_topics &#x3D; 0 search_source &#x3D; \&quot;Filter\&quot; search_hash_id &#x3D; \&quot;\&quot; vertical &#x3D; \&quot;answer\&quot; sort &#x3D; \&quot;upvoted_count\&quot; time_interval &#x3D; \&quot;three_months\&quot; vertical_info &#x3D; \&quot;0,0,0,0,0,0,0,0,0,0,0,0\&quot;
   * @param keyword 搜索关键词/Search Keywords (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页文章数量/Number of articles per page (optional, default to &quot;20&quot;)
   * @param showAllTopics 显示所有主题/Show all topics (optional, default to 0)
   * @param searchSource 搜索来源/Search Source (optional, default to &quot;Normal&quot;)
   * @param searchHashId 搜索哈希ID/Search Hash ID (optional, default to &quot;&quot;)
   * @param vertical 垂类/Vertical Type (optional, default to &quot;&quot;)
   * @param sort 排序/Sort (optional, default to &quot;&quot;)
   * @param timeInterval 时间间隔/Time Interval (optional, default to &quot;&quot;)
   * @param verticalInfo 垂类信息/Vertical Info (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get (String keyword, String offset, String limit, Integer showAllTopics, String searchSource, String searchHashId, String vertical, String sort, String timeInterval, String verticalInfo) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_article_search_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("show_all_topics", showAllTopics));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_source", searchSource));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_hash_id", searchHashId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vertical", vertical));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort", sort));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("time_interval", timeInterval));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vertical_info", verticalInfo));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎文章搜索V3/Get Zhihu Article Search V3
   * # [中文] ### 用途: - 获取知乎文章搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页文章数量 - show_all_topics: 显示所有主题，     - 0 不显示话题     - 1 显示话题 - search_source: 搜索来源     - Filter 过滤参数生效     - Normal 为普通结果 - search_hash_id: 搜索哈希ID，用于过滤重复搜索结果 - vertical: 空 不限类型     - answer 只看回答     - article 只看文章     - zvideo 只看视频 - sort: 空 综合排序     - upvoted_count 最多赞同     - created_time 最新发布 - time_interval: 时间间隔     - 空 不限时间     - a_day 一天内     - a_week 一周内     - a_month 一个月内     - three_months 三个月内     - half_a_year 半年内     - a_year 一年内 - vertical_info: 垂类信息     - 0,0,0,0,0,0,0,0,0,0,0,0 不限类型，不会设置勿填 ### 返回: - 知乎文章搜索V3  # [English] ### Purpose: - Get Zhihu Article Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of articles per page - show_all_topics: Show all topics     - 0 Do not show topics     - 1 Show topics - search_source: Search Source     - Filter parameter takes effect     - Normal is normal result - search_hash_id: Search Hash ID, used to filter duplicate search results - vertical: Empty unlimited type     - answer only see answers     - article only see articles     - zvideo only see videos - sort: Empty comprehensive sorting     - upvoted_count most upvoted     - created_time latest release - time_interval: Time interval     - Empty unlimited time     - a_day within a day     - a_week within a week     - a_month within a month     - three_months within three months     - half_a_year within half a year     - a_year within a year - vertical_info: Vertical information     - 0,0,0,0,0,0,0,0,0,0,0,0 unlimited type, do not set do not fill ### Returns: - Zhihu Article Search V3  # [示例/Example] # 默认搜索，综合排序，不限时间 keyword &#x3D; \&quot;deepseek\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot; show_all_topics &#x3D; 0 search_source &#x3D; \&quot;Normal\&quot; search_hash_id &#x3D; \&quot;\&quot; vertical &#x3D; \&quot;\&quot; sort &#x3D; \&quot;\&quot; time_interval &#x3D; \&quot;\&quot; vertical_info &#x3D; \&quot;\&quot;  # 只看回答，最多赞同，三月内 keyword &#x3D; \&quot;deepseek\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot; show_all_topics &#x3D; 0 search_source &#x3D; \&quot;Filter\&quot; search_hash_id &#x3D; \&quot;\&quot; vertical &#x3D; \&quot;answer\&quot; sort &#x3D; \&quot;upvoted_count\&quot; time_interval &#x3D; \&quot;three_months\&quot; vertical_info &#x3D; \&quot;0,0,0,0,0,0,0,0,0,0,0,0\&quot;
   * @param keyword 搜索关键词/Search Keywords (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页文章数量/Number of articles per page (optional, default to &quot;20&quot;)
   * @param showAllTopics 显示所有主题/Show all topics (optional, default to 0)
   * @param searchSource 搜索来源/Search Source (optional, default to &quot;Normal&quot;)
   * @param searchHashId 搜索哈希ID/Search Hash ID (optional, default to &quot;&quot;)
   * @param vertical 垂类/Vertical Type (optional, default to &quot;&quot;)
   * @param sort 排序/Sort (optional, default to &quot;&quot;)
   * @param timeInterval 时间间隔/Time Interval (optional, default to &quot;&quot;)
   * @param verticalInfo 垂类信息/Vertical Info (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get_0 (String keyword, String offset, String limit, Integer showAllTopics, String searchSource, String searchHashId, String vertical, String sort, String timeInterval, String verticalInfo) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_article_search_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("show_all_topics", showAllTopics));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_source", searchSource));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_hash_id", searchHashId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vertical", vertical));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort", sort));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("time_interval", timeInterval));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("vertical_info", verticalInfo));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎专栏文章详情/Get Zhihu Column Article Detail
   * # [中文] ### 用途: - 获取知乎专栏文章详情 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏文章详情  # [English] ### Purpose: - Get Zhihu Column Article Detail ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Article Detail  # [示例/Example] article_id &#x3D; \&quot;669214677\&quot;
   * @param articleId 文章ID/Article ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet (String articleId) throws ApiException {
    // verify the required parameter 'articleId' is set
    if (articleId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'articleId' when calling fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_column_article_detail";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("article_id", articleId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎专栏文章详情/Get Zhihu Column Article Detail
   * # [中文] ### 用途: - 获取知乎专栏文章详情 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏文章详情  # [English] ### Purpose: - Get Zhihu Column Article Detail ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Article Detail  # [示例/Example] article_id &#x3D; \&quot;669214677\&quot;
   * @param articleId 文章ID/Article ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet_0 (String articleId) throws ApiException {
    // verify the required parameter 'articleId' is set
    if (articleId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'articleId' when calling fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_column_article_detail";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("article_id", articleId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎专栏文章列表/Get Zhihu Column Articles
   * # [中文] ### 用途: - 获取知乎专栏文章列表 ### 参数: - column_id: 专栏ID - limit: 每页文章数量 - offset: 偏移量 ### 返回: - 知乎专栏文章列表  # [English] ### Purpose: - Get Zhihu Column Articles ### Parameters: - column_id: Column ID - limit: Number of articles per page - offset: Offset ### Returns: - Zhihu Column Articles  # [示例/Example] column_id &#x3D; \&quot;zhangjiawei\&quot; limit &#x3D; \&quot;10\&quot; offset &#x3D; \&quot;0\&quot;
   * @param columnId 专栏ID/Column ID (required)
   * @param limit 每页文章数量/Number of articles per page (optional, default to &quot;10&quot;)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet (String columnId, String limit, String offset) throws ApiException {
    // verify the required parameter 'columnId' is set
    if (columnId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'columnId' when calling fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_column_articles";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("column_id", columnId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎专栏文章列表/Get Zhihu Column Articles
   * # [中文] ### 用途: - 获取知乎专栏文章列表 ### 参数: - column_id: 专栏ID - limit: 每页文章数量 - offset: 偏移量 ### 返回: - 知乎专栏文章列表  # [English] ### Purpose: - Get Zhihu Column Articles ### Parameters: - column_id: Column ID - limit: Number of articles per page - offset: Offset ### Returns: - Zhihu Column Articles  # [示例/Example] column_id &#x3D; \&quot;zhangjiawei\&quot; limit &#x3D; \&quot;10\&quot; offset &#x3D; \&quot;0\&quot;
   * @param columnId 专栏ID/Column ID (required)
   * @param limit 每页文章数量/Number of articles per page (optional, default to &quot;10&quot;)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet_0 (String columnId, String limit, String offset) throws ApiException {
    // verify the required parameter 'columnId' is set
    if (columnId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'columnId' when calling fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_column_articles";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("column_id", columnId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎专栏评论区配置/Get Zhihu Column Comment Config
   * # [中文] ### 用途: - 获取知乎专栏评论区配置 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏评论区配置  # [English] ### Purpose: - Get Zhihu Column Comment Config ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Comment Config  # [示例/Example] article_id &#x3D; \&quot;669214677\&quot;
   * @param articleId 文章ID/Article ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet (String articleId) throws ApiException {
    // verify the required parameter 'articleId' is set
    if (articleId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'articleId' when calling fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_column_comment_config";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("article_id", articleId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎专栏评论区配置/Get Zhihu Column Comment Config
   * # [中文] ### 用途: - 获取知乎专栏评论区配置 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏评论区配置  # [English] ### Purpose: - Get Zhihu Column Comment Config ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Comment Config  # [示例/Example] article_id &#x3D; \&quot;669214677\&quot;
   * @param articleId 文章ID/Article ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet_0 (String articleId) throws ApiException {
    // verify the required parameter 'articleId' is set
    if (articleId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'articleId' when calling fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_column_comment_config";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("article_id", articleId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎相似专栏推荐/Get Zhihu Similar Column Recommend
   * # [中文] ### 用途: - 获取知乎相似专栏推荐 ### 参数: - article_id: 文章ID - limit: 每页专栏数量 - offset: 偏移量 ### 返回: - 知乎相似专栏推荐  # [English] ### Purpose: - Get Zhihu Similar Column Recommend ### Parameters: - article_id: Article ID - limit: Number of columns per page - offset: Offset ### Returns: - Zhihu Similar Column Recommend  # [示例/Example] article_id &#x3D; \&quot;669214677\&quot; limit &#x3D; \&quot;12\&quot; offset &#x3D; \&quot;0\&quot;
   * @param articleId 文章ID/Article ID (required)
   * @param limit 每页专栏数量/Number of columns per page (optional, default to &quot;12&quot;)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet (String articleId, String limit, String offset) throws ApiException {
    // verify the required parameter 'articleId' is set
    if (articleId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'articleId' when calling fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_column_recommend";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("article_id", articleId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎相似专栏推荐/Get Zhihu Similar Column Recommend
   * # [中文] ### 用途: - 获取知乎相似专栏推荐 ### 参数: - article_id: 文章ID - limit: 每页专栏数量 - offset: 偏移量 ### 返回: - 知乎相似专栏推荐  # [English] ### Purpose: - Get Zhihu Similar Column Recommend ### Parameters: - article_id: Article ID - limit: Number of columns per page - offset: Offset ### Returns: - Zhihu Similar Column Recommend  # [示例/Example] article_id &#x3D; \&quot;669214677\&quot; limit &#x3D; \&quot;12\&quot; offset &#x3D; \&quot;0\&quot;
   * @param articleId 文章ID/Article ID (required)
   * @param limit 每页专栏数量/Number of columns per page (optional, default to &quot;12&quot;)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet_0 (String articleId, String limit, String offset) throws ApiException {
    // verify the required parameter 'articleId' is set
    if (articleId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'articleId' when calling fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_column_recommend";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("article_id", articleId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎专栏文章互动关系/Get Zhihu Column Article Relationship
   * # [中文] ### 用途: - 获取知乎专栏文章互动关系 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏互动关系  # [English] ### Purpose: - Get Zhihu Column Relationship ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Relationship  # [示例/Example] article_id &#x3D; \&quot;669214677\&quot;
   * @param articleId 文章ID/Article ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet (String articleId) throws ApiException {
    // verify the required parameter 'articleId' is set
    if (articleId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'articleId' when calling fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_column_relationship";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("article_id", articleId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎专栏文章互动关系/Get Zhihu Column Article Relationship
   * # [中文] ### 用途: - 获取知乎专栏文章互动关系 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏互动关系  # [English] ### Purpose: - Get Zhihu Column Relationship ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Relationship  # [示例/Example] article_id &#x3D; \&quot;669214677\&quot;
   * @param articleId 文章ID/Article ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet_0 (String articleId) throws ApiException {
    // verify the required parameter 'articleId' is set
    if (articleId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'articleId' when calling fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_column_relationship";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("article_id", articleId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎专栏搜索V3/Get Zhihu Column Search V3
   * # [中文] ### 用途: - 获取知乎专栏搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页专栏数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎专栏搜索V3  # [English] ### Purpose: - Get Zhihu Column Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of columns per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Column Search V3  # [示例/Example] keyword &#x3D; \&quot;deepseek\&quot; limit &#x3D; \&quot;20\&quot; offset &#x3D; \&quot;0\&quot; search_hash_id &#x3D; \&quot;\&quot;
   * @param keyword 搜索关键词/Search Keywords (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页专栏数量/Number of columns per page (optional, default to &quot;20&quot;)
   * @param searchHashId 搜索哈希ID/Search Hash ID (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get (String keyword, String offset, String limit, String searchHashId) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_column_search_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_hash_id", searchHashId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎专栏搜索V3/Get Zhihu Column Search V3
   * # [中文] ### 用途: - 获取知乎专栏搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页专栏数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎专栏搜索V3  # [English] ### Purpose: - Get Zhihu Column Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of columns per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Column Search V3  # [示例/Example] keyword &#x3D; \&quot;deepseek\&quot; limit &#x3D; \&quot;20\&quot; offset &#x3D; \&quot;0\&quot; search_hash_id &#x3D; \&quot;\&quot;
   * @param keyword 搜索关键词/Search Keywords (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页专栏数量/Number of columns per page (optional, default to &quot;20&quot;)
   * @param searchHashId 搜索哈希ID/Search Hash ID (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get_0 (String keyword, String offset, String limit, String searchHashId) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_column_search_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_hash_id", searchHashId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎评论区V5/Get Zhihu Comment V5
   * # [中文] ### 用途: - 获取知乎评论区V5 ### 参数: - answer_id: 回答ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎评论区V5  # [English] ### Purpose: - Get Zhihu Comment V5 ### Parameters: - answer_id: Answer ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Comment V5  # [示例/Example] answer_id &#x3D; \&quot;89226347214\&quot; order_by &#x3D; \&quot;score\&quot; limit &#x3D; \&quot;20\&quot; offset &#x3D; \&quot;\&quot; # 1739257701_11108372663_0
   * @param answerId 回答ID/Answer ID (required)
   * @param orderBy 排序/Sort (optional, default to &quot;score&quot;)
   * @param limit 每页评论数量/Number of comments per page (optional, default to &quot;20&quot;)
   * @param offset 偏移量/Offset (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get (String answerId, String orderBy, String limit, String offset) throws ApiException {
    // verify the required parameter 'answerId' is set
    if (answerId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'answerId' when calling fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_comment_v5";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("answer_id", answerId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎评论区V5/Get Zhihu Comment V5
   * # [中文] ### 用途: - 获取知乎评论区V5 ### 参数: - answer_id: 回答ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎评论区V5  # [English] ### Purpose: - Get Zhihu Comment V5 ### Parameters: - answer_id: Answer ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Comment V5  # [示例/Example] answer_id &#x3D; \&quot;89226347214\&quot; order_by &#x3D; \&quot;score\&quot; limit &#x3D; \&quot;20\&quot; offset &#x3D; \&quot;\&quot; # 1739257701_11108372663_0
   * @param answerId 回答ID/Answer ID (required)
   * @param orderBy 排序/Sort (optional, default to &quot;score&quot;)
   * @param limit 每页评论数量/Number of comments per page (optional, default to &quot;20&quot;)
   * @param offset 偏移量/Offset (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get_0 (String answerId, String orderBy, String limit, String offset) throws ApiException {
    // verify the required parameter 'answerId' is set
    if (answerId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'answerId' when calling fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_comment_v5";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("answer_id", answerId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎电子书搜索V3/Get Zhihu Ebook Search V3
   * # [中文] ### 用途: - 获取知乎电子书搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页电子书数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎电子书搜索V3  # [English] ### Purpose: - Get Zhihu Ebook Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of ebooks per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Ebook Search V3  # [示例/Example] keyword &#x3D; \&quot;deepseek\&quot; limit &#x3D; \&quot;20\&quot; offset &#x3D; \&quot;0\&quot; search_hash_id &#x3D; \&quot;\&quot;
   * @param keyword 搜索关键词/Search Keywords (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页电子书数量/Number of ebooks per page (optional, default to &quot;20&quot;)
   * @param searchHashId 搜索哈希ID/Search Hash ID (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get (String keyword, String offset, String limit, String searchHashId) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_ebook_search_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_hash_id", searchHashId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎电子书搜索V3/Get Zhihu Ebook Search V3
   * # [中文] ### 用途: - 获取知乎电子书搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页电子书数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎电子书搜索V3  # [English] ### Purpose: - Get Zhihu Ebook Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of ebooks per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Ebook Search V3  # [示例/Example] keyword &#x3D; \&quot;deepseek\&quot; limit &#x3D; \&quot;20\&quot; offset &#x3D; \&quot;0\&quot; search_hash_id &#x3D; \&quot;\&quot;
   * @param keyword 搜索关键词/Search Keywords (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页电子书数量/Number of ebooks per page (optional, default to &quot;20&quot;)
   * @param searchHashId 搜索哈希ID/Search Hash ID (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get_0 (String keyword, String offset, String limit, String searchHashId) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_ebook_search_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_hash_id", searchHashId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎首页热榜/Get Zhihu Hot List
   * # [中文] ### 用途: - 获取知乎首页热榜 ### 参数: - limit: 每页文章数量 - desktop: 是否为桌面端 ### 返回: - 知乎首页热榜  # [English] ### Purpose: - Get Zhihu Hot List ### Parameters: - limit: Number of articles per page - desktop: Is it a desktop ### Returns: - Zhihu Hot List  # [示例/Example] limit &#x3D; \&quot;50\&quot; desktop &#x3D; \&quot;true\&quot;
   * @param limit 每页文章数量/Number of articles per page (optional, default to &quot;50&quot;)
   * @param desktop 是否为桌面端/Is it a desktop (optional, default to &quot;true&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotListApiV1ZhihuWebFetchHotListGet (String limit, String desktop) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_hot_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("desktop", desktop));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotListApiV1ZhihuWebFetchHotListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎首页热榜/Get Zhihu Hot List
   * # [中文] ### 用途: - 获取知乎首页热榜 ### 参数: - limit: 每页文章数量 - desktop: 是否为桌面端 ### 返回: - 知乎首页热榜  # [English] ### Purpose: - Get Zhihu Hot List ### Parameters: - limit: Number of articles per page - desktop: Is it a desktop ### Returns: - Zhihu Hot List  # [示例/Example] limit &#x3D; \&quot;50\&quot; desktop &#x3D; \&quot;true\&quot;
   * @param limit 每页文章数量/Number of articles per page (optional, default to &quot;50&quot;)
   * @param desktop 是否为桌面端/Is it a desktop (optional, default to &quot;true&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotListApiV1ZhihuWebFetchHotListGet_0 (String limit, String desktop) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_hot_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("desktop", desktop));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotListApiV1ZhihuWebFetchHotListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎首页推荐/Get Zhihu Hot Recommend
   * # [中文] ### 用途: - 获取知乎首页推荐 ### 参数: - offset: 偏移量 - page_number: 页码 - session_token: 会话令牌 ### 返回: - 知乎首页推荐  # [English] ### Purpose: - Get Zhihu Hot Recommend ### Parameters: - offset: Offset - page_number: Page Number - session_token: Session Token  # [示例/Example] offset &#x3D; \&quot;0\&quot; page_number &#x3D; \&quot;1\&quot; session_token &#x3D; \&quot;\&quot;
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param pageNumber 页码/Page Number (optional, default to &quot;1&quot;)
   * @param sessionToken 会话令牌/Session Token (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet (String offset, String pageNumber, String sessionToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_hot_recommend";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_number", pageNumber));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("session_token", sessionToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎首页推荐/Get Zhihu Hot Recommend
   * # [中文] ### 用途: - 获取知乎首页推荐 ### 参数: - offset: 偏移量 - page_number: 页码 - session_token: 会话令牌 ### 返回: - 知乎首页推荐  # [English] ### Purpose: - Get Zhihu Hot Recommend ### Parameters: - offset: Offset - page_number: Page Number - session_token: Session Token  # [示例/Example] offset &#x3D; \&quot;0\&quot; page_number &#x3D; \&quot;1\&quot; session_token &#x3D; \&quot;\&quot;
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param pageNumber 页码/Page Number (optional, default to &quot;1&quot;)
   * @param sessionToken 会话令牌/Session Token (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet_0 (String offset, String pageNumber, String sessionToken) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_hot_recommend";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_number", pageNumber));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("session_token", sessionToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎搜索预设词/Get Zhihu Preset Search
   * # [中文] ### 用途: - 获取知乎搜索预设词 ### 参数: - 无 ### 返回: - 知乎搜索预设词  # [English] ### Purpose: - Get Zhihu Preset Search ### Parameters: - None ### Returns: - Zhihu Preset Search
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_preset_search";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎搜索预设词/Get Zhihu Preset Search
   * # [中文] ### 用途: - 获取知乎搜索预设词 ### 参数: - 无 ### 返回: - 知乎搜索预设词  # [English] ### Purpose: - Get Zhihu Preset Search ### Parameters: - None ### Returns: - Zhihu Preset Search
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet_0 () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_preset_search";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎推荐关注列表/Get Zhihu Recommend Followees
   * # [中文] ### 用途: - 获取知乎推荐关注列表 ### 参数: - 无 ### 返回: - 知乎推荐关注列表  # [English] ### Purpose: - Get Zhihu Recommend Followees ### Parameters: - None ### Returns: - Zhihu Recommend Followees
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_recommend_followees";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎推荐关注列表/Get Zhihu Recommend Followees
   * # [中文] ### 用途: - 获取知乎推荐关注列表 ### 参数: - 无 ### 返回: - 知乎推荐关注列表  # [English] ### Purpose: - Get Zhihu Recommend Followees ### Parameters: - None ### Returns: - Zhihu Recommend Followees
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet_0 () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_recommend_followees";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎盐选内容搜索V3/Get Zhihu Salt Search V3
   * # [中文] ### 用途: - 获取知乎盐选内容搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页内容数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎盐选内容搜索V3  # [English] ### Purpose: - Get Zhihu Salt Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of contents per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Salt Search V3  # [示例/Example] keyword &#x3D; \&quot;deepseek\&quot; limit &#x3D; \&quot;20\&quot; offset &#x3D; \&quot;0\&quot; search_hash_id &#x3D; \&quot;\&quot;
   * @param keyword 搜索关键词/Search Keywords (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页内容数量/Number of contents per page (optional, default to &quot;20&quot;)
   * @param searchHashId 搜索哈希ID/Search Hash ID (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get (String keyword, String offset, String limit, String searchHashId) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_salt_search_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_hash_id", searchHashId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎盐选内容搜索V3/Get Zhihu Salt Search V3
   * # [中文] ### 用途: - 获取知乎盐选内容搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页内容数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎盐选内容搜索V3  # [English] ### Purpose: - Get Zhihu Salt Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of contents per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Salt Search V3  # [示例/Example] keyword &#x3D; \&quot;deepseek\&quot; limit &#x3D; \&quot;20\&quot; offset &#x3D; \&quot;0\&quot; search_hash_id &#x3D; \&quot;\&quot;
   * @param keyword 搜索关键词/Search Keywords (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页内容数量/Number of contents per page (optional, default to &quot;20&quot;)
   * @param searchHashId 搜索哈希ID/Search Hash ID (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get_0 (String keyword, String offset, String limit, String searchHashId) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_salt_search_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_hash_id", searchHashId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎论文搜索V3/Get Zhihu Scholar Search V3
   * # [中文] ### 用途: - 获取知乎论文搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页论文数量 - filter_fields: 过滤字段 ### 返回: - 知乎论文搜索V3  # [English] ### Purpose: - Get Zhihu Scholar Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of papers per page - filter_fields: Filter Fields ### Returns: - Zhihu Scholar Search V3  # [示例/Example] keyword &#x3D; \&quot;人工智能\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;25\&quot;
   * @param keyword 搜索关键词/Search Keywords (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页论文数量/Number of papers per page (optional, default to &quot;25&quot;)
   * @param body  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post (String keyword, String offset, String limit, Object body) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_scholar_search_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取知乎论文搜索V3/Get Zhihu Scholar Search V3
   * # [中文] ### 用途: - 获取知乎论文搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页论文数量 - filter_fields: 过滤字段 ### 返回: - 知乎论文搜索V3  # [English] ### Purpose: - Get Zhihu Scholar Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of papers per page - filter_fields: Filter Fields ### Returns: - Zhihu Scholar Search V3  # [示例/Example] keyword &#x3D; \&quot;人工智能\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;25\&quot;
   * @param keyword 搜索关键词/Search Keywords (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页论文数量/Number of papers per page (optional, default to &quot;25&quot;)
   * @param body  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post_0 (String keyword, String offset, String limit, Object body) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_scholar_search_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(body);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取知乎搜索发现/Get Zhihu Search Recommend
   * # [中文] ### 用途: - 获取知乎搜索发现 ### 参数: - 无 ### 返回: - 知乎搜索发现  # [English] ### Purpose: - Get Zhihu Search Recommend ### Parameters: - None ### Returns: - Zhihu Search Recommend
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_search_recommend";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎搜索发现/Get Zhihu Search Recommend
   * # [中文] ### 用途: - 获取知乎搜索发现 ### 参数: - 无 ### 返回: - 知乎搜索发现  # [English] ### Purpose: - Get Zhihu Search Recommend ### Parameters: - None ### Returns: - Zhihu Search Recommend
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet_0 () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_search_recommend";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 知乎搜索预测词/Get Zhihu Search Suggest
   * # [中文] ### 用途: - 知乎搜索预测词 ### 参数: - keyword: 搜索关键词 ### 返回: - 知乎搜索预测词  # [English] ### Purpose: - Get Zhihu Search Suggest ### Parameters: - keyword: Search Keywords ### Returns: - Zhihu Search Suggest  # [示例/Example] keyword &#x3D; \&quot;deepseek\&quot;
   * @param keyword 搜索关键词/Search Keywords (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet (String keyword) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_search_suggest";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 知乎搜索预测词/Get Zhihu Search Suggest
   * # [中文] ### 用途: - 知乎搜索预测词 ### 参数: - keyword: 搜索关键词 ### 返回: - 知乎搜索预测词  # [English] ### Purpose: - Get Zhihu Search Suggest ### Parameters: - keyword: Search Keywords ### Returns: - Zhihu Search Suggest  # [示例/Example] keyword &#x3D; \&quot;deepseek\&quot;
   * @param keyword 搜索关键词/Search Keywords (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet_0 (String keyword) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_search_suggest";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎子评论区V5/Get Zhihu Sub Comment V5
   * # [中文] ### 用途: - 获取知乎子评论区V5 ### 参数: - comment_id: 评论ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎子评论区V5  # [English] ### Purpose: - Get Zhihu Sub Comment V5 ### Parameters: - comment_id: Comment ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Sub Comment V5  # [示例/Example] comment_id &#x3D; \&quot;11100789728\&quot; order_by &#x3D; \&quot;score\&quot; limit &#x3D; \&quot;20\&quot; offset &#x3D; \&quot;\&quot;
   * @param commentId 评论ID/Comment ID (required)
   * @param orderBy 排序/Sort (optional, default to &quot;score&quot;)
   * @param limit 每页评论数量/Number of comments per page (optional, default to &quot;20&quot;)
   * @param offset 偏移量/Offset (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get (String commentId, String orderBy, String limit, String offset) throws ApiException {
    // verify the required parameter 'commentId' is set
    if (commentId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'commentId' when calling fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_sub_comment_v5";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("comment_id", commentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎子评论区V5/Get Zhihu Sub Comment V5
   * # [中文] ### 用途: - 获取知乎子评论区V5 ### 参数: - comment_id: 评论ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎子评论区V5  # [English] ### Purpose: - Get Zhihu Sub Comment V5 ### Parameters: - comment_id: Comment ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Sub Comment V5  # [示例/Example] comment_id &#x3D; \&quot;11100789728\&quot; order_by &#x3D; \&quot;score\&quot; limit &#x3D; \&quot;20\&quot; offset &#x3D; \&quot;\&quot;
   * @param commentId 评论ID/Comment ID (required)
   * @param orderBy 排序/Sort (optional, default to &quot;score&quot;)
   * @param limit 每页评论数量/Number of comments per page (optional, default to &quot;20&quot;)
   * @param offset 偏移量/Offset (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get_0 (String commentId, String orderBy, String limit, String offset) throws ApiException {
    // verify the required parameter 'commentId' is set
    if (commentId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'commentId' when calling fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_sub_comment_v5";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("comment_id", commentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎话题搜索V3/Get Zhihu Topic Search V3
   * # [中文] ### 用途: - 获取知乎话题搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎话题搜索V3  # [English] ### Purpose: - Get Zhihu Topic Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu Topic Search V3  # [示例/Example] keyword &#x3D; \&quot;deepseek\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;25\&quot;
   * @param keyword 搜索关键词/Search Keywords (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页话题数量/Number of topics per page (optional, default to &quot;25&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get (String keyword, String offset, String limit) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_topic_search_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎话题搜索V3/Get Zhihu Topic Search V3
   * # [中文] ### 用途: - 获取知乎话题搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎话题搜索V3  # [English] ### Purpose: - Get Zhihu Topic Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu Topic Search V3  # [示例/Example] keyword &#x3D; \&quot;deepseek\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;25\&quot;
   * @param keyword 搜索关键词/Search Keywords (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页话题数量/Number of topics per page (optional, default to &quot;25&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get_0 (String keyword, String offset, String limit) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_topic_search_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎用户关注的收藏/Get Zhihu User Follow Collections
   * # [中文] ### 用途: - 获取知乎用户关注的收藏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页收藏数量 ### 返回: - 知乎用户关注的收藏  # [English] ### Purpose: - Get Zhihu User Follow Collections ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of collections per page ### Returns: - Zhihu User Follow Collections  # [示例/Example] user_url_token &#x3D; \&quot;ming-he-43-93\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
   * @param userUrlToken 用户ID/User ID (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页收藏数量/Number of collections per page (optional, default to &quot;20&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet (String userUrlToken, String offset, String limit) throws ApiException {
    // verify the required parameter 'userUrlToken' is set
    if (userUrlToken == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userUrlToken' when calling fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_user_follow_collections";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_url_token", userUrlToken));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎用户关注的收藏/Get Zhihu User Follow Collections
   * # [中文] ### 用途: - 获取知乎用户关注的收藏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页收藏数量 ### 返回: - 知乎用户关注的收藏  # [English] ### Purpose: - Get Zhihu User Follow Collections ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of collections per page ### Returns: - Zhihu User Follow Collections  # [示例/Example] user_url_token &#x3D; \&quot;ming-he-43-93\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
   * @param userUrlToken 用户ID/User ID (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页收藏数量/Number of collections per page (optional, default to &quot;20&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet_0 (String userUrlToken, String offset, String limit) throws ApiException {
    // verify the required parameter 'userUrlToken' is set
    if (userUrlToken == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userUrlToken' when calling fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_user_follow_collections";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_url_token", userUrlToken));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎用户订阅的专栏/Get Zhihu User Columns
   * # [中文] ### 用途: - 获取知乎用户订阅的专栏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页专栏数量 ### 返回: - 知乎用户订阅的专栏  # [English] ### Purpose: - Get Zhihu User Columns ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of columns per page ### Returns: - Zhihu User Columns  # [示例/Example] user_url_token &#x3D; \&quot;ming-he-43-93\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
   * @param userUrlToken 用户ID/User ID (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页专栏数量/Number of columns per page (optional, default to &quot;20&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet (String userUrlToken, String offset, String limit) throws ApiException {
    // verify the required parameter 'userUrlToken' is set
    if (userUrlToken == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userUrlToken' when calling fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_user_follow_columns";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_url_token", userUrlToken));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎用户订阅的专栏/Get Zhihu User Columns
   * # [中文] ### 用途: - 获取知乎用户订阅的专栏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页专栏数量 ### 返回: - 知乎用户订阅的专栏  # [English] ### Purpose: - Get Zhihu User Columns ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of columns per page ### Returns: - Zhihu User Columns  # [示例/Example] user_url_token &#x3D; \&quot;ming-he-43-93\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
   * @param userUrlToken 用户ID/User ID (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页专栏数量/Number of columns per page (optional, default to &quot;20&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet_0 (String userUrlToken, String offset, String limit) throws ApiException {
    // verify the required parameter 'userUrlToken' is set
    if (userUrlToken == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userUrlToken' when calling fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_user_follow_columns";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_url_token", userUrlToken));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎用户关注的问题/Get Zhihu User Follow Questions
   * # [中文] ### 用途: - 获取知乎用户关注的问题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页问题数量 ### 返回: - 知乎用户关注的问题  # [English] ### Purpose: - Get Zhihu User Follow Questions ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of questions per page ### Returns: - Zhihu User Follow Questions  # [示例/Example] user_url_token &#x3D; \&quot;ming-he-43-93\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
   * @param userUrlToken 用户ID/User ID (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页问题数量/Number of questions per page (optional, default to &quot;20&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet (String userUrlToken, String offset, String limit) throws ApiException {
    // verify the required parameter 'userUrlToken' is set
    if (userUrlToken == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userUrlToken' when calling fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_user_follow_questions";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_url_token", userUrlToken));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎用户关注的问题/Get Zhihu User Follow Questions
   * # [中文] ### 用途: - 获取知乎用户关注的问题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页问题数量 ### 返回: - 知乎用户关注的问题  # [English] ### Purpose: - Get Zhihu User Follow Questions ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of questions per page ### Returns: - Zhihu User Follow Questions  # [示例/Example] user_url_token &#x3D; \&quot;ming-he-43-93\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
   * @param userUrlToken 用户ID/User ID (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页问题数量/Number of questions per page (optional, default to &quot;20&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet_0 (String userUrlToken, String offset, String limit) throws ApiException {
    // verify the required parameter 'userUrlToken' is set
    if (userUrlToken == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userUrlToken' when calling fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_user_follow_questions";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_url_token", userUrlToken));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎用户关注的话题/Get Zhihu User Follow Topics
   * # [中文] ### 用途: - 获取知乎用户关注的话题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎用户关注的话题  # [English] ### Purpose: - Get Zhihu User Follow Topics ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu User Follow Topics  # [示例/Example] user_url_token &#x3D; \&quot;ming-he-43-93\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
   * @param userUrlToken 用户ID/User ID (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页话题数量/Number of topics per page (optional, default to &quot;20&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet (String userUrlToken, String offset, String limit) throws ApiException {
    // verify the required parameter 'userUrlToken' is set
    if (userUrlToken == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userUrlToken' when calling fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_user_follow_topics";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_url_token", userUrlToken));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎用户关注的话题/Get Zhihu User Follow Topics
   * # [中文] ### 用途: - 获取知乎用户关注的话题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎用户关注的话题  # [English] ### Purpose: - Get Zhihu User Follow Topics ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu User Follow Topics  # [示例/Example] user_url_token &#x3D; \&quot;ming-he-43-93\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
   * @param userUrlToken 用户ID/User ID (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页话题数量/Number of topics per page (optional, default to &quot;20&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet_0 (String userUrlToken, String offset, String limit) throws ApiException {
    // verify the required parameter 'userUrlToken' is set
    if (userUrlToken == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userUrlToken' when calling fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_user_follow_topics";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_url_token", userUrlToken));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎用户关注列表/Get Zhihu User Following
   * # [中文] ### 用途: - 获取知乎用户关注列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户关注列表  # [English] ### Purpose: - Get Zhihu User Following ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Following  # [示例/Example] user_url_token &#x3D; \&quot;ming-he-43-93\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
   * @param userUrlToken 用户ID/User ID (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页用户数量/Number of users per page (optional, default to &quot;20&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet (String userUrlToken, String offset, String limit) throws ApiException {
    // verify the required parameter 'userUrlToken' is set
    if (userUrlToken == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userUrlToken' when calling fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_user_followees";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_url_token", userUrlToken));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎用户关注列表/Get Zhihu User Following
   * # [中文] ### 用途: - 获取知乎用户关注列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户关注列表  # [English] ### Purpose: - Get Zhihu User Following ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Following  # [示例/Example] user_url_token &#x3D; \&quot;ming-he-43-93\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
   * @param userUrlToken 用户ID/User ID (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页用户数量/Number of users per page (optional, default to &quot;20&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet_0 (String userUrlToken, String offset, String limit) throws ApiException {
    // verify the required parameter 'userUrlToken' is set
    if (userUrlToken == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userUrlToken' when calling fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_user_followees";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_url_token", userUrlToken));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎用户粉丝列表/Get Zhihu User Followers
   * # [中文] ### 用途: - 获取知乎用户粉丝列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户粉丝列表  # [English] ### Purpose: - Get Zhihu User Followers ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Followers  # [示例/Example] user_url_token &#x3D; \&quot;ming-he-43-93\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
   * @param userUrlToken 用户ID/User ID (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页用户数量/Number of users per page (optional, default to &quot;20&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet (String userUrlToken, String offset, String limit) throws ApiException {
    // verify the required parameter 'userUrlToken' is set
    if (userUrlToken == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userUrlToken' when calling fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_user_followers";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_url_token", userUrlToken));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎用户粉丝列表/Get Zhihu User Followers
   * # [中文] ### 用途: - 获取知乎用户粉丝列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户粉丝列表  # [English] ### Purpose: - Get Zhihu User Followers ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Followers  # [示例/Example] user_url_token &#x3D; \&quot;ming-he-43-93\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;20\&quot;
   * @param userUrlToken 用户ID/User ID (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页用户数量/Number of users per page (optional, default to &quot;20&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet_0 (String userUrlToken, String offset, String limit) throws ApiException {
    // verify the required parameter 'userUrlToken' is set
    if (userUrlToken == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userUrlToken' when calling fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_user_followers";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_url_token", userUrlToken));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎用户信息/Get Zhihu User Info
   * # [中文] ### 用途: - 获取知乎用户信息 ### 参数: - user_url_token: 用户ID ### 返回: - 知乎用户信息  # [English] ### Purpose: - Get Zhihu User Info ### Parameters: - user_url_token: User ID ### Returns: - Zhihu User Info  # [示例/Example] user_url_token &#x3D; \&quot;ming-he-43-93\&quot;
   * @param userUrlToken 用户ID/User ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserInfoApiV1ZhihuWebFetchUserInfoGet (String userUrlToken) throws ApiException {
    // verify the required parameter 'userUrlToken' is set
    if (userUrlToken == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userUrlToken' when calling fetchUserInfoApiV1ZhihuWebFetchUserInfoGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_user_info";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_url_token", userUrlToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserInfoApiV1ZhihuWebFetchUserInfoGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎用户信息/Get Zhihu User Info
   * # [中文] ### 用途: - 获取知乎用户信息 ### 参数: - user_url_token: 用户ID ### 返回: - 知乎用户信息  # [English] ### Purpose: - Get Zhihu User Info ### Parameters: - user_url_token: User ID ### Returns: - Zhihu User Info  # [示例/Example] user_url_token &#x3D; \&quot;ming-he-43-93\&quot;
   * @param userUrlToken 用户ID/User ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserInfoApiV1ZhihuWebFetchUserInfoGet_0 (String userUrlToken) throws ApiException {
    // verify the required parameter 'userUrlToken' is set
    if (userUrlToken == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userUrlToken' when calling fetchUserInfoApiV1ZhihuWebFetchUserInfoGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_user_info";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_url_token", userUrlToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserInfoApiV1ZhihuWebFetchUserInfoGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎用户搜索V3/Get Zhihu User Search V3
   * # [中文] ### 用途: - 获取知乎用户搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户搜索V3  # [English] ### Purpose: - Get Zhihu User Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Search V3  # [示例/Example] keyword &#x3D; \&quot;deepseek\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;25\&quot;
   * @param keyword 搜索关键词/Search Keywords (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页用户数量/Number of users per page (optional, default to &quot;25&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get (String keyword, String offset, String limit) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_user_search_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎用户搜索V3/Get Zhihu User Search V3
   * # [中文] ### 用途: - 获取知乎用户搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户搜索V3  # [English] ### Purpose: - Get Zhihu User Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Search V3  # [示例/Example] keyword &#x3D; \&quot;deepseek\&quot; offset &#x3D; \&quot;0\&quot; limit &#x3D; \&quot;25\&quot;
   * @param keyword 搜索关键词/Search Keywords (required)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页用户数量/Number of users per page (optional, default to &quot;25&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get_0 (String keyword, String offset, String limit) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_user_search_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎首页视频榜/Get Zhihu Video List
   * # [中文] ### 用途: - 获取知乎首页视频榜 ### 参数: - offset: 偏移量 - limit: 每页视频数量 ### 返回: - 知乎首页视频榜  # [English] ### Purpose: - Get Zhihu Video List ### Parameters: - offset: Offset - limit: Number of videos per page ### Returns: - Zhihu Video List  # [示例/Example] offset &#x3D; \&quot;\&quot; limit &#x3D; \&quot;12\&quot;
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页视频数量/Number of videos per page (optional, default to &quot;12&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoListApiV1ZhihuWebFetchVideoListGet (String offset, String limit) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_video_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoListApiV1ZhihuWebFetchVideoListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎首页视频榜/Get Zhihu Video List
   * # [中文] ### 用途: - 获取知乎首页视频榜 ### 参数: - offset: 偏移量 - limit: 每页视频数量 ### 返回: - 知乎首页视频榜  # [English] ### Purpose: - Get Zhihu Video List ### Parameters: - offset: Offset - limit: Number of videos per page ### Returns: - Zhihu Video List  # [示例/Example] offset &#x3D; \&quot;\&quot; limit &#x3D; \&quot;12\&quot;
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param limit 每页视频数量/Number of videos per page (optional, default to &quot;12&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoListApiV1ZhihuWebFetchVideoListGet_0 (String offset, String limit) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_video_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoListApiV1ZhihuWebFetchVideoListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎视频搜索V3/Get Zhihu Video Search V3
   * # [中文] ### 用途: - 获取知乎视频搜索V3 ### 参数: - keyword: 搜索关键词 - limit: 每页视频数量 - offset: 偏移量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎视频搜索V3  # [English] ### Purpose: - Get Zhihu Video Search V3 ### Parameters: - keyword: Search Keywords - limit: Number of videos per page - offset: Offset - search_hash_id: Search Hash ID ### Returns: - Zhihu Video Search V3  # [示例/Example] keyword &#x3D; \&quot;deepseek\&quot; limit &#x3D; \&quot;20\&quot; offset &#x3D; \&quot;0\&quot; search_hash_id &#x3D; \&quot;\&quot;
   * @param keyword 搜索关键词/Search Keywords (required)
   * @param limit 每页视频数量/Number of videos per page (optional, default to &quot;20&quot;)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param searchHashId 搜索哈希ID/Search Hash ID (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get (String keyword, String limit, String offset, String searchHashId) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_video_search_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_hash_id", searchHashId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取知乎视频搜索V3/Get Zhihu Video Search V3
   * # [中文] ### 用途: - 获取知乎视频搜索V3 ### 参数: - keyword: 搜索关键词 - limit: 每页视频数量 - offset: 偏移量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎视频搜索V3  # [English] ### Purpose: - Get Zhihu Video Search V3 ### Parameters: - keyword: Search Keywords - limit: Number of videos per page - offset: Offset - search_hash_id: Search Hash ID ### Returns: - Zhihu Video Search V3  # [示例/Example] keyword &#x3D; \&quot;deepseek\&quot; limit &#x3D; \&quot;20\&quot; offset &#x3D; \&quot;0\&quot; search_hash_id &#x3D; \&quot;\&quot;
   * @param keyword 搜索关键词/Search Keywords (required)
   * @param limit 每页视频数量/Number of videos per page (optional, default to &quot;20&quot;)
   * @param offset 偏移量/Offset (optional, default to &quot;0&quot;)
   * @param searchHashId 搜索哈希ID/Search Hash ID (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get_0 (String keyword, String limit, String offset, String searchHashId) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/zhihu/web/fetch_video_search_v3";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("limit", limit));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_hash_id", searchHashId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
}
