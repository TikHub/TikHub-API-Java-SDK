/*
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.tikhub.client.api;

import io.tikhub.client.ApiClient;
import io.tikhub.client.ApiException;
import io.tikhub.client.Pair;

import org.openapitools.client.model.HttpValidationError;
import org.openapitools.client.model.ResponseModel;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;


public class KuaishouAppApiApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  
  public KuaishouAppApiApi() {
    this(new ApiClient());
  }

  public KuaishouAppApiApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  /**
   * 快手品牌榜单/Kuaishou brand top list
   * # [中文] ### 用途: - 快手品牌榜单 ### 参数: 获取快手品牌榜单，支持多个子榜单，具体参数如下：  - 品牌榜单热门美妆榜对应参数：     - subTabId &#x3D; 0     - subTabName &#x3D; None - 品牌榜单热门服饰榜对应参数：     - subTabId &#x3D; 131     - subTabName &#x3D; \&quot;服饰\&quot; - 品牌榜单热门汽车榜对应参数：     - subTabId &#x3D; 1     - subTabName &#x3D; \&quot;汽车\&quot; - 品牌榜单热门游戏榜对应参数：     - subTabId &#x3D; 25     - subTabName &#x3D; \&quot;游戏\&quot; - 品牌榜单热门医疗健康榜对应参数：     - subTabId &#x3D; 24     - subTabName &#x3D; \&quot;医疗健康\&quot; - 品牌榜单热门3C数码榜对应参数：     - subTabId &#x3D; 130     - subTabName &#x3D; \&quot;3C数码\&quot; - 品牌榜单热门手机榜对应参数：     - subTabId &#x3D; 128     - subTabName &#x3D; \&quot;手机\&quot; - 品牌榜单热门家电榜对应参数：     - subTabId &#x3D; 11     - subTabName &#x3D; \&quot;家电\&quot; - 品牌榜单热门母婴榜对应参数：     - subTabId &#x3D; 4     - subTabName &#x3D; \&quot;母婴\&quot; - 品牌榜单热门食品饮料榜对应参数：     - subTabId &#x3D; 2     - subTabName &#x3D; \&quot;食品饮料\&quot;  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou brand top list ### Parameters: Get the Kuaishou brand top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the brand hot beauty list:     - subTabId &#x3D; 0     - subTabName &#x3D; None - Corresponding parameters for the brand hot clothing list:     - subTabId &#x3D; 131     - subTabName &#x3D; \&quot;Clothing\&quot; - Corresponding parameters for the brand hot car list:     - subTabId &#x3D; 1     - subTabName &#x3D; \&quot;Car\&quot; - Corresponding parameters for the brand hot game list:     - subTabId &#x3D; 25     - subTabName &#x3D; \&quot;Game\&quot; - Corresponding parameters for the brand hot medical health list:     - subTabId &#x3D; 24     - subTabName &#x3D; \&quot;Medical Health\&quot; - Corresponding parameters for the brand hot 3C digital list:     - subTabId &#x3D; 130     - subTabName &#x3D; \&quot;3C Digital\&quot; - Corresponding parameters for the brand hot mobile phone list:     - subTabId &#x3D; 128     - subTabName &#x3D; \&quot;Mobile Phone\&quot; - Corresponding parameters for the brand hot home appliance list:     - subTabId &#x3D; 11     - subTabName &#x3D; \&quot;Home Appliance\&quot; - Corresponding parameters for the brand hot maternal and child list:     - subTabId &#x3D; 4     - subTabName &#x3D; \&quot;Maternal and Child\&quot; - Corresponding parameters for the brand hot food and beverage list:     - subTabId &#x3D; 2     - subTabName &#x3D; \&quot;Food and Beverage\&quot;   ### Returns: - List data  # [示例/Example] subTabId &#x3D; 0 subTabName &#x3D; None
   * @param subTabId  (optional, default to 0)
   * @param subTabName  (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet (Integer subTabId, String subTabName) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_brand_top_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subTabId", subTabId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subTabName", subTabName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 快手品牌榜单/Kuaishou brand top list
   * # [中文] ### 用途: - 快手品牌榜单 ### 参数: 获取快手品牌榜单，支持多个子榜单，具体参数如下：  - 品牌榜单热门美妆榜对应参数：     - subTabId &#x3D; 0     - subTabName &#x3D; None - 品牌榜单热门服饰榜对应参数：     - subTabId &#x3D; 131     - subTabName &#x3D; \&quot;服饰\&quot; - 品牌榜单热门汽车榜对应参数：     - subTabId &#x3D; 1     - subTabName &#x3D; \&quot;汽车\&quot; - 品牌榜单热门游戏榜对应参数：     - subTabId &#x3D; 25     - subTabName &#x3D; \&quot;游戏\&quot; - 品牌榜单热门医疗健康榜对应参数：     - subTabId &#x3D; 24     - subTabName &#x3D; \&quot;医疗健康\&quot; - 品牌榜单热门3C数码榜对应参数：     - subTabId &#x3D; 130     - subTabName &#x3D; \&quot;3C数码\&quot; - 品牌榜单热门手机榜对应参数：     - subTabId &#x3D; 128     - subTabName &#x3D; \&quot;手机\&quot; - 品牌榜单热门家电榜对应参数：     - subTabId &#x3D; 11     - subTabName &#x3D; \&quot;家电\&quot; - 品牌榜单热门母婴榜对应参数：     - subTabId &#x3D; 4     - subTabName &#x3D; \&quot;母婴\&quot; - 品牌榜单热门食品饮料榜对应参数：     - subTabId &#x3D; 2     - subTabName &#x3D; \&quot;食品饮料\&quot;  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou brand top list ### Parameters: Get the Kuaishou brand top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the brand hot beauty list:     - subTabId &#x3D; 0     - subTabName &#x3D; None - Corresponding parameters for the brand hot clothing list:     - subTabId &#x3D; 131     - subTabName &#x3D; \&quot;Clothing\&quot; - Corresponding parameters for the brand hot car list:     - subTabId &#x3D; 1     - subTabName &#x3D; \&quot;Car\&quot; - Corresponding parameters for the brand hot game list:     - subTabId &#x3D; 25     - subTabName &#x3D; \&quot;Game\&quot; - Corresponding parameters for the brand hot medical health list:     - subTabId &#x3D; 24     - subTabName &#x3D; \&quot;Medical Health\&quot; - Corresponding parameters for the brand hot 3C digital list:     - subTabId &#x3D; 130     - subTabName &#x3D; \&quot;3C Digital\&quot; - Corresponding parameters for the brand hot mobile phone list:     - subTabId &#x3D; 128     - subTabName &#x3D; \&quot;Mobile Phone\&quot; - Corresponding parameters for the brand hot home appliance list:     - subTabId &#x3D; 11     - subTabName &#x3D; \&quot;Home Appliance\&quot; - Corresponding parameters for the brand hot maternal and child list:     - subTabId &#x3D; 4     - subTabName &#x3D; \&quot;Maternal and Child\&quot; - Corresponding parameters for the brand hot food and beverage list:     - subTabId &#x3D; 2     - subTabName &#x3D; \&quot;Food and Beverage\&quot;   ### Returns: - List data  # [示例/Example] subTabId &#x3D; 0 subTabName &#x3D; None
   * @param subTabId  (optional, default to 0)
   * @param subTabName  (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet_0 (Integer subTabId, String subTabName) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_brand_top_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subTabId", subTabId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subTabName", subTabName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 快手热榜分类/Kuaishou hot categories
   * # [中文] ### 用途: - 快手热榜分类 ### 返回: - 分类数据  # [English] ### Purpose: - Kuaishou hot categories ### Returns: - Categories data
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_hot_board_categories";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 快手热榜分类/Kuaishou hot categories
   * # [中文] ### 用途: - 快手热榜分类 ### 返回: - 分类数据  # [English] ### Purpose: - Kuaishou hot categories ### Returns: - Categories data
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet_0 () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_hot_board_categories";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 快手热榜详情/Kuaishou hot board detail
   * # [中文] ### 用途: - 快手热榜详情 ### 参数: - boardType: 榜单类型 - boardId: 榜单ID - boardType 和 boardId 可以从热榜分类接口中获取。 ### 返回: - 详情数据  # [English] ### Purpose: - Kuaishou hot board detail ### Parameters: - boardType: Board type - boardId: Board ID - boardType and boardId can be obtained from the hot board categories interface. ### Returns: - Detail data  # [示例/Example] boardType &#x3D; 1 boardId &#x3D; 1
   * @param boardType  (optional, default to 1)
   * @param boardId  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet (Integer boardType, Integer boardId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_hot_board_detail";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("boardType", boardType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("boardId", boardId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 快手热榜详情/Kuaishou hot board detail
   * # [中文] ### 用途: - 快手热榜详情 ### 参数: - boardType: 榜单类型 - boardId: 榜单ID - boardType 和 boardId 可以从热榜分类接口中获取。 ### 返回: - 详情数据  # [English] ### Purpose: - Kuaishou hot board detail ### Parameters: - boardType: Board type - boardId: Board ID - boardType and boardId can be obtained from the hot board categories interface. ### Returns: - Detail data  # [示例/Example] boardType &#x3D; 1 boardId &#x3D; 1
   * @param boardType  (optional, default to 1)
   * @param boardId  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet_0 (Integer boardType, Integer boardId) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_hot_board_detail";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("boardType", boardType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("boardId", boardId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 快手热搜人物榜单/Kuaishou hot search person board
   * # [中文] ### 用途: - 快手热搜人物榜单 ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou hot search person board ### Returns: - Board data
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_hot_search_person";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 快手热搜人物榜单/Kuaishou hot search person board
   * # [中文] ### 用途: - 快手热搜人物榜单 ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou hot search person board ### Returns: - Board data
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet_0 () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_hot_search_person";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 快手直播榜单/Kuaishou live top list
   * # [中文] ### 用途: - 快手直播榜单 ### 参数: 获取快手直播榜单，支持多个子榜单，具体参数如下：  - 直播总榜对应参数：     - subTabId &#x3D; 0     - subTabName &#x3D; None - 直播音乐榜对应参数：     - subTabId &#x3D; 102     - subTabName &#x3D; \&quot;音乐\&quot; - 直播舞蹈榜对应参数：     - subTabId &#x3D; 107     - subTabName &#x3D; \&quot;舞蹈\&quot; - 直播颜值榜对应参数：     - subTabId &#x3D; 101     - subTabName &#x3D; \&quot;颜值\&quot; - 直播国艺榜对应参数：     - subTabId &#x3D; 105     - subTabName &#x3D; \&quot;国艺\&quot; - 直播相亲榜对应参数：     - subTabId &#x3D; 111     - subTabName &#x3D; \&quot;相亲\&quot; - 直播游戏榜对应参数：     - subTabId &#x3D; 106     - subTabName &#x3D; \&quot;游戏\&quot; - 直播二次元榜对应参数：     - subTabId &#x3D; 110     - subTabName &#x3D; \&quot;二次元\&quot; - 直播故事榜对应参数：     - subTabId &#x3D; 104     - subTabName &#x3D; \&quot;故事\&quot; - 直播团播榜对应参数：     - subTabId &#x3D; 113     - subTabName &#x3D; \&quot;团播\&quot; - 直播九宫格榜对应参数：     - subTabId &#x3D; 114     - subTabName &#x3D; \&quot;九宫格\&quot;  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou live top list ### Parameters: Get the Kuaishou live top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the live total list:     - subTabId &#x3D; 0     - subTabName &#x3D; None - Corresponding parameters for the live music list:     - subTabId &#x3D; 102     - subTabName &#x3D; \&quot;Music\&quot; - Corresponding parameters for the live dance list:     - subTabId &#x3D; 107     - subTabName &#x3D; \&quot;Dance\&quot; - Corresponding parameters for the live beauty list:     - subTabId &#x3D; 101     - subTabName &#x3D; \&quot;Beauty\&quot; - Corresponding parameters for the live national art list:     - subTabId &#x3D; 105     - subTabName &#x3D; \&quot;National Art\&quot; - Corresponding parameters for the live blind date list:     - subTabId &#x3D; 111     - subTabName &#x3D; \&quot;Blind Date\&quot; - Corresponding parameters for the live game list:     - subTabId &#x3D; 106     - subTabName &#x3D; \&quot;Game\&quot; - Corresponding parameters for the live second element list:     - subTabId &#x3D; 110     - subTabName &#x3D; \&quot;Second Element\&quot; - Corresponding parameters for the live story list:     - subTabId &#x3D; 104     - subTabName &#x3D; \&quot;Story\&quot; - Corresponding parameters for the live group broadcast list:     - subTabId &#x3D; 113     - subTabName &#x3D; \&quot;Group Broadcast\&quot; - Corresponding parameters for the live nine-grid list:     - subTabId &#x3D; 114     - subTabName &#x3D; \&quot;Nine Grid\&quot;  ### Returns: - List data  # [示例/Example] subTabId &#x3D; 0 subTabName &#x3D; None
   * @param subTabId  (optional, default to 0)
   * @param subTabName  (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet (Integer subTabId, String subTabName) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_live_top_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subTabId", subTabId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subTabName", subTabName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 快手直播榜单/Kuaishou live top list
   * # [中文] ### 用途: - 快手直播榜单 ### 参数: 获取快手直播榜单，支持多个子榜单，具体参数如下：  - 直播总榜对应参数：     - subTabId &#x3D; 0     - subTabName &#x3D; None - 直播音乐榜对应参数：     - subTabId &#x3D; 102     - subTabName &#x3D; \&quot;音乐\&quot; - 直播舞蹈榜对应参数：     - subTabId &#x3D; 107     - subTabName &#x3D; \&quot;舞蹈\&quot; - 直播颜值榜对应参数：     - subTabId &#x3D; 101     - subTabName &#x3D; \&quot;颜值\&quot; - 直播国艺榜对应参数：     - subTabId &#x3D; 105     - subTabName &#x3D; \&quot;国艺\&quot; - 直播相亲榜对应参数：     - subTabId &#x3D; 111     - subTabName &#x3D; \&quot;相亲\&quot; - 直播游戏榜对应参数：     - subTabId &#x3D; 106     - subTabName &#x3D; \&quot;游戏\&quot; - 直播二次元榜对应参数：     - subTabId &#x3D; 110     - subTabName &#x3D; \&quot;二次元\&quot; - 直播故事榜对应参数：     - subTabId &#x3D; 104     - subTabName &#x3D; \&quot;故事\&quot; - 直播团播榜对应参数：     - subTabId &#x3D; 113     - subTabName &#x3D; \&quot;团播\&quot; - 直播九宫格榜对应参数：     - subTabId &#x3D; 114     - subTabName &#x3D; \&quot;九宫格\&quot;  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou live top list ### Parameters: Get the Kuaishou live top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the live total list:     - subTabId &#x3D; 0     - subTabName &#x3D; None - Corresponding parameters for the live music list:     - subTabId &#x3D; 102     - subTabName &#x3D; \&quot;Music\&quot; - Corresponding parameters for the live dance list:     - subTabId &#x3D; 107     - subTabName &#x3D; \&quot;Dance\&quot; - Corresponding parameters for the live beauty list:     - subTabId &#x3D; 101     - subTabName &#x3D; \&quot;Beauty\&quot; - Corresponding parameters for the live national art list:     - subTabId &#x3D; 105     - subTabName &#x3D; \&quot;National Art\&quot; - Corresponding parameters for the live blind date list:     - subTabId &#x3D; 111     - subTabName &#x3D; \&quot;Blind Date\&quot; - Corresponding parameters for the live game list:     - subTabId &#x3D; 106     - subTabName &#x3D; \&quot;Game\&quot; - Corresponding parameters for the live second element list:     - subTabId &#x3D; 110     - subTabName &#x3D; \&quot;Second Element\&quot; - Corresponding parameters for the live story list:     - subTabId &#x3D; 104     - subTabName &#x3D; \&quot;Story\&quot; - Corresponding parameters for the live group broadcast list:     - subTabId &#x3D; 113     - subTabName &#x3D; \&quot;Group Broadcast\&quot; - Corresponding parameters for the live nine-grid list:     - subTabId &#x3D; 114     - subTabName &#x3D; \&quot;Nine Grid\&quot;  ### Returns: - List data  # [示例/Example] subTabId &#x3D; 0 subTabName &#x3D; None
   * @param subTabId  (optional, default to 0)
   * @param subTabName  (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet_0 (Integer subTabId, String subTabName) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_live_top_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subTabId", subTabId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subTabName", subTabName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单个用户数据V2/Get single user data V2
   * # [中文] ### 用途: - 获取单个用户数据 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 支持&#x60;eid&#x60;或&#x60;userId&#x60;，eid是用户主页链接中的一部分，user_id则可以从不同的接口中获取。 - 两种用户ID都可以使用，下面是两种用户ID的示例，这两个ID都指向同一个用户：     - eid &#x3D; \&quot;3xz63mn6fngqtiq\&quot;     - userId &#x3D; \&quot;228905802\&quot; ### 返回: - 用户数据  # [English] ### Purpose: - Fetch single user data V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: Supports &#x60;eid&#x60; or &#x60;userId&#x60;, &#x60;eid&#x60; is part of the user profile link, and &#x60;user_id&#x60; can be obtained from different interfaces. - Both user IDs can be used, here are examples of the two user IDs, both of which point to the same user:     - eid &#x3D; \&quot;3xz63mn6fngqtiq\&quot;     - userId &#x3D; \&quot;228905802\&quot; ### Returns: - User data  # [示例/Example] user_id &#x3D; \&quot;3xz63mn6fngqtiq\&quot;
   * @param userId  (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get (String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_one_user_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单个用户数据V2/Get single user data V2
   * # [中文] ### 用途: - 获取单个用户数据 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 支持&#x60;eid&#x60;或&#x60;userId&#x60;，eid是用户主页链接中的一部分，user_id则可以从不同的接口中获取。 - 两种用户ID都可以使用，下面是两种用户ID的示例，这两个ID都指向同一个用户：     - eid &#x3D; \&quot;3xz63mn6fngqtiq\&quot;     - userId &#x3D; \&quot;228905802\&quot; ### 返回: - 用户数据  # [English] ### Purpose: - Fetch single user data V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: Supports &#x60;eid&#x60; or &#x60;userId&#x60;, &#x60;eid&#x60; is part of the user profile link, and &#x60;user_id&#x60; can be obtained from different interfaces. - Both user IDs can be used, here are examples of the two user IDs, both of which point to the same user:     - eid &#x3D; \&quot;3xz63mn6fngqtiq\&quot;     - userId &#x3D; \&quot;228905802\&quot; ### Returns: - User data  # [示例/Example] user_id &#x3D; \&quot;3xz63mn6fngqtiq\&quot;
   * @param userId  (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get_0 (String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_one_user_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据链接获取单个作品数据/Fetch single video by URL
   * # [中文] ### 用途: - 根据链接获取单个作品数据，此接口默认使用价格更便宜的V1接口进行请求。 ### 参数: - share_text: 作品链接或分享文本 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL, this API defaults to using the cheaper V1 API for requests. ### Parameters: - share_text: Photo URL or share text ### Returns: - Video data  # [示例/Example] share_text &#x3D; \&quot;https://v.kuaishou.com/cNYP0Z\&quot;
   * @param shareText  (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet (String shareText) throws ApiException {
    // verify the required parameter 'shareText' is set
    if (shareText == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'shareText' when calling fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_one_video_by_url";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_text", shareText));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据链接获取单个作品数据/Fetch single video by URL
   * # [中文] ### 用途: - 根据链接获取单个作品数据，此接口默认使用价格更便宜的V1接口进行请求。 ### 参数: - share_text: 作品链接或分享文本 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL, this API defaults to using the cheaper V1 API for requests. ### Parameters: - share_text: Photo URL or share text ### Returns: - Video data  # [示例/Example] share_text &#x3D; \&quot;https://v.kuaishou.com/cNYP0Z\&quot;
   * @param shareText  (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet_0 (String shareText) throws ApiException {
    // verify the required parameter 'shareText' is set
    if (shareText == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'shareText' when calling fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_one_video_by_url";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_text", shareText));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 快手单一视频查询接口V1/Kuaishou single video query API V1
   * # [中文] ### 用途: - 获取单个作品数据，如果此接口连续请求失败，可以尝试使用价格更昂贵的V2接口进行冗余请求。 ### 参数: - photo_id: 作品ID，作品ID可以从分享链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, if this API continuously fails, you can try to use the more expensive V2 API for redundant requests. ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the share link ### Returns: - Video data  # [示例/Example] photo_id &#x3D; \&quot;3xhpk3xcf6e4iac\&quot;
   * @param photoId  (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet (String photoId) throws ApiException {
    // verify the required parameter 'photoId' is set
    if (photoId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'photoId' when calling fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_one_video";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("photo_id", photoId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 快手单一视频查询接口V1/Kuaishou single video query API V1
   * # [中文] ### 用途: - 获取单个作品数据，如果此接口连续请求失败，可以尝试使用价格更昂贵的V2接口进行冗余请求。 ### 参数: - photo_id: 作品ID，作品ID可以从分享链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, if this API continuously fails, you can try to use the more expensive V2 API for redundant requests. ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the share link ### Returns: - Video data  # [示例/Example] photo_id &#x3D; \&quot;3xhpk3xcf6e4iac\&quot;
   * @param photoId  (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet_0 (String photoId) throws ApiException {
    // verify the required parameter 'photoId' is set
    if (photoId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'photoId' when calling fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_one_video";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("photo_id", photoId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 快手单一视频查询接口V2/Kuaishou single video query API V2
   * # [中文] ### 用途: - 获取单个作品数据接口 V2，此接口仅作为备选接口，收费较贵，但稳定性更高。 - 此接口请求价格为 0.01 美元/次，请求不成功不收费。 ### 参数: - photo_id: 作品ID ### 返回: - 视频数据  # [English] ### Purpose: - Single video query API V2, this API is only used as an alternative API, it is more expensive, but more stable. - The request price of this API is 0.01 USD/time, and the request is not successful without charge. ### Parameters: - photo_id: Photo ID ### Returns: - Video data  # [示例/Example] photo_id &#x3D; \&quot;3xtdqvdnqd3psuc\&quot;
   * @param photoId  (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get (String photoId) throws ApiException {
    // verify the required parameter 'photoId' is set
    if (photoId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'photoId' when calling fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_one_video_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("photo_id", photoId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 快手单一视频查询接口V2/Kuaishou single video query API V2
   * # [中文] ### 用途: - 获取单个作品数据接口 V2，此接口仅作为备选接口，收费较贵，但稳定性更高。 - 此接口请求价格为 0.01 美元/次，请求不成功不收费。 ### 参数: - photo_id: 作品ID ### 返回: - 视频数据  # [English] ### Purpose: - Single video query API V2, this API is only used as an alternative API, it is more expensive, but more stable. - The request price of this API is 0.01 USD/time, and the request is not successful without charge. ### Parameters: - photo_id: Photo ID ### Returns: - Video data  # [示例/Example] photo_id &#x3D; \&quot;3xtdqvdnqd3psuc\&quot;
   * @param photoId  (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get_0 (String photoId) throws ApiException {
    // verify the required parameter 'photoId' is set
    if (photoId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'photoId' when calling fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_one_video_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("photo_id", photoId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 快手购物榜单/Kuaishou shopping top list
   * # [中文] ### 用途: - 快手购物榜单 ### 参数: 获取快手购物榜单，支持多个子榜单，具体参数如下：  - 购物榜单热门主播榜对应参数：     - subTabId &#x3D; 0     - subTabName &#x3D; None - 购物榜单热销商品榜对应参数：     - subTabId &#x3D; 102     - subTabName &#x3D; \&quot;热销商品\&quot;  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou shopping top list ### Parameters: Get the Kuaishou shopping top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the shopping hot anchor list:     - subTabId &#x3D; 0     - subTabName &#x3D; None - Corresponding parameters for the shopping hot selling product list:     - subTabId &#x3D; 102     - subTabName &#x3D; \&quot;Hot Selling Product\&quot;  ### Returns: - List data  # [示例/Example] subTabId &#x3D; 0 subTabName &#x3D; None
   * @param subTabId  (optional, default to 0)
   * @param subTabName  (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet (Integer subTabId, String subTabName) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_shopping_top_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subTabId", subTabId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subTabName", subTabName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 快手购物榜单/Kuaishou shopping top list
   * # [中文] ### 用途: - 快手购物榜单 ### 参数: 获取快手购物榜单，支持多个子榜单，具体参数如下：  - 购物榜单热门主播榜对应参数：     - subTabId &#x3D; 0     - subTabName &#x3D; None - 购物榜单热销商品榜对应参数：     - subTabId &#x3D; 102     - subTabName &#x3D; \&quot;热销商品\&quot;  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou shopping top list ### Parameters: Get the Kuaishou shopping top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the shopping hot anchor list:     - subTabId &#x3D; 0     - subTabName &#x3D; None - Corresponding parameters for the shopping hot selling product list:     - subTabId &#x3D; 102     - subTabName &#x3D; \&quot;Hot Selling Product\&quot;  ### Returns: - List data  # [示例/Example] subTabId &#x3D; 0 subTabName &#x3D; None
   * @param subTabId  (optional, default to 0)
   * @param subTabName  (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet_0 (Integer subTabId, String subTabName) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_shopping_top_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subTabId", subTabId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("subTabName", subTabName));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户热门作品数据/Get user hot post data
   * # [中文] ### 用途: - 获取用户热门作品数据 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 作品游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 作品数据  # [English] ### Purpose: - Get user hot post data ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Post cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Post data  # [示例/Example] user_id &#x3D; \&quot;228905802\&quot; pcursor &#x3D; None
   * @param userId  (required)
   * @param pcursor  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet (String userId, String pcursor) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_user_hot_post";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pcursor", pcursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户热门作品数据/Get user hot post data
   * # [中文] ### 用途: - 获取用户热门作品数据 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 作品游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 作品数据  # [English] ### Purpose: - Get user hot post data ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Post cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Post data  # [示例/Example] user_id &#x3D; \&quot;228905802\&quot; pcursor &#x3D; None
   * @param userId  (required)
   * @param pcursor  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet_0 (String userId, String pcursor) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_user_hot_post";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pcursor", pcursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户直播信息/Get user live info
   * # [中文] ### 用途: - 获取用户直播信息 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 ### 返回: - 直播信息  # [English] ### Purpose: - Get user live info ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. ### Returns: - Live info  # [示例/Example] user_id &#x3D; \&quot;1377082950\&quot;
   * @param userId  (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet (String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_user_live_info";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户直播信息/Get user live info
   * # [中文] ### 用途: - 获取用户直播信息 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 ### 返回: - 直播信息  # [English] ### Purpose: - Get user live info ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. ### Returns: - Live info  # [示例/Example] user_id &#x3D; \&quot;1377082950\&quot;
   * @param userId  (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet_0 (String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_user_live_info";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 用户视频列表V2/User video list V2
   * # [中文] ### 用途: - 用户视频列表 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - User video list V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id &#x3D; \&quot;228905802\&quot; pcursor &#x3D; None
   * @param userId  (required)
   * @param pcursor  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get (String userId, String pcursor) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_user_post_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pcursor", pcursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 用户视频列表V2/User video list V2
   * # [中文] ### 用途: - 用户视频列表 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - User video list V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id &#x3D; \&quot;228905802\&quot; pcursor &#x3D; None
   * @param userId  (required)
   * @param pcursor  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get_0 (String userId, String pcursor) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_user_post_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pcursor", pcursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单个作品评论数据/Get single video comment data
   * # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id &#x3D; \&quot;3x7gxp2zhgjv832\&quot; pcursor &#x3D; None
   * @param photoId  (required)
   * @param pcursor  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet (String photoId, String pcursor) throws ApiException {
    // verify the required parameter 'photoId' is set
    if (photoId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'photoId' when calling fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_one_video_comment";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("photo_id", photoId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pcursor", pcursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单个作品评论数据/Get single video comment data
   * # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id &#x3D; \&quot;3x7gxp2zhgjv832\&quot; pcursor &#x3D; None
   * @param photoId  (required)
   * @param pcursor  (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet_0 (String photoId, String pcursor) throws ApiException {
    // verify the required parameter 'photoId' is set
    if (photoId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'photoId' when calling fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/fetch_one_video_comment";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("photo_id", photoId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("pcursor", pcursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 生成快手分享链接/Generate Kuaishou share link
   * # [中文] ### 用途: - 生成快手分享链接 ### 参数: - shareObjectId: 作品ID ### 返回: - 分享链接  # [English] ### Purpose: - Generate Kuaishou share link ### Parameters: - photo_id: Photo ID ### Returns: - Share link  # [示例/Example] shareObjectId &#x3D; \&quot;3xg5wjqdtekbb3u\&quot;
   * @param shareObjectId  (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet (String shareObjectId) throws ApiException {
    // verify the required parameter 'shareObjectId' is set
    if (shareObjectId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'shareObjectId' when calling generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/generate_kuaishou_share_link";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("shareObjectId", shareObjectId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 生成快手分享链接/Generate Kuaishou share link
   * # [中文] ### 用途: - 生成快手分享链接 ### 参数: - shareObjectId: 作品ID ### 返回: - 分享链接  # [English] ### Purpose: - Generate Kuaishou share link ### Parameters: - photo_id: Photo ID ### Returns: - Share link  # [示例/Example] shareObjectId &#x3D; \&quot;3xg5wjqdtekbb3u\&quot;
   * @param shareObjectId  (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet_0 (String shareObjectId) throws ApiException {
    // verify the required parameter 'shareObjectId' is set
    if (shareObjectId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'shareObjectId' when calling generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/generate_kuaishou_share_link";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("shareObjectId", shareObjectId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 搜索用户V2/Search user V2
   * # [中文] ### 用途: - 搜索用户 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 用户页数，从1开始 ### 返回: - 用户数据  # [English] ### Purpose: - Search user V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: User page number, starting from 1 ### Returns: - User data  # [示例/Example] keyword &#x3D; \&quot;人工智能\&quot; page &#x3D; \&quot;1\&quot;
   * @param keyword  (required)
   * @param page  (optional, default to &quot;1&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> searchUserV2ApiV1KuaishouAppSearchUserV2Get (String keyword, String page) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling searchUserV2ApiV1KuaishouAppSearchUserV2Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/search_user_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "searchUserV2ApiV1KuaishouAppSearchUserV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 搜索用户V2/Search user V2
   * # [中文] ### 用途: - 搜索用户 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 用户页数，从1开始 ### 返回: - 用户数据  # [English] ### Purpose: - Search user V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: User page number, starting from 1 ### Returns: - User data  # [示例/Example] keyword &#x3D; \&quot;人工智能\&quot; page &#x3D; \&quot;1\&quot;
   * @param keyword  (required)
   * @param page  (optional, default to &quot;1&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> searchUserV2ApiV1KuaishouAppSearchUserV2Get_0 (String keyword, String page) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling searchUserV2ApiV1KuaishouAppSearchUserV2Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/search_user_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "searchUserV2ApiV1KuaishouAppSearchUserV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 搜索视频V2/Search video V2
   * # [中文] ### 用途: - 搜索视频 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 视频页数，从1开始 ### 返回: - 视频数据  # [English] ### Purpose: - Search video V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: Page number, starting from 1 ### Returns: - Videos data  # [示例/Example] keyword &#x3D; \&quot;人工智能\&quot; page &#x3D; \&quot;1\&quot;
   * @param keyword  (required)
   * @param page  (optional, default to &quot;1&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> searchVideoV2ApiV1KuaishouAppSearchVideoV2Get (String keyword, String page) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling searchVideoV2ApiV1KuaishouAppSearchVideoV2Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/search_video_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "searchVideoV2ApiV1KuaishouAppSearchVideoV2Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 搜索视频V2/Search video V2
   * # [中文] ### 用途: - 搜索视频 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 视频页数，从1开始 ### 返回: - 视频数据  # [English] ### Purpose: - Search video V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: Page number, starting from 1 ### Returns: - Videos data  # [示例/Example] keyword &#x3D; \&quot;人工智能\&quot; page &#x3D; \&quot;1\&quot;
   * @param keyword  (required)
   * @param page  (optional, default to &quot;1&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> searchVideoV2ApiV1KuaishouAppSearchVideoV2Get_0 (String keyword, String page) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling searchVideoV2ApiV1KuaishouAppSearchVideoV2Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/kuaishou/app/search_video_v2";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "searchVideoV2ApiV1KuaishouAppSearchVideoV2Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
}
