/*
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.tikhub.client.api;

import io.tikhub.client.ApiClient;
import io.tikhub.client.ApiException;
import io.tikhub.client.Pair;

import org.openapitools.client.model.HttpValidationError;
import org.openapitools.client.model.ResponseModel;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;


public class DouyinXingtuApiApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  
  public DouyinXingtuApiApi() {
    this(new ApiClient());
  }

  public DouyinXingtuApiApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  /**
   * 获取kol热词分析内容V1/Get Author Content Hot Comment Keywords V1
   * # [中文] ### 用途: - 获取kol热词分析内容V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol热词分析内容  # [English] ### Purpose: - Get Author Content Hot Comment Keywords V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - Author Content Hot Comment Keywords  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> authorContentHotCommentKeywordsV1ApiV1DouyinXingtuAuthorContentHotCommentKeywordsV1Get (String kolId) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling authorContentHotCommentKeywordsV1ApiV1DouyinXingtuAuthorContentHotCommentKeywordsV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/author_content_hot_comment_keywords_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "authorContentHotCommentKeywordsV1ApiV1DouyinXingtuAuthorContentHotCommentKeywordsV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol热词分析内容V1/Get Author Content Hot Comment Keywords V1
   * # [中文] ### 用途: - 获取kol热词分析内容V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol热词分析内容  # [English] ### Purpose: - Get Author Content Hot Comment Keywords V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - Author Content Hot Comment Keywords  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> authorContentHotCommentKeywordsV1ApiV1DouyinXingtuAuthorContentHotCommentKeywordsV1Get_0 (String kolId) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling authorContentHotCommentKeywordsV1ApiV1DouyinXingtuAuthorContentHotCommentKeywordsV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/author_content_hot_comment_keywords_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "authorContentHotCommentKeywordsV1ApiV1DouyinXingtuAuthorContentHotCommentKeywordsV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol热词分析评论V1/Get Author Hot Comment Tokens V1
   * # [中文] ### 用途: - 获取kol热词分析评论V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol热词分析评论  # [English] ### Purpose: - Get Author Hot Comment Tokens V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - Author Hot Comment Tokens  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> authorHotCommentTokensV1ApiV1DouyinXingtuAuthorHotCommentTokensV1Get (String kolId) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling authorHotCommentTokensV1ApiV1DouyinXingtuAuthorHotCommentTokensV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/author_hot_comment_tokens_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "authorHotCommentTokensV1ApiV1DouyinXingtuAuthorHotCommentTokensV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol热词分析评论V1/Get Author Hot Comment Tokens V1
   * # [中文] ### 用途: - 获取kol热词分析评论V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol热词分析评论  # [English] ### Purpose: - Get Author Hot Comment Tokens V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - Author Hot Comment Tokens  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> authorHotCommentTokensV1ApiV1DouyinXingtuAuthorHotCommentTokensV1Get_0 (String kolId) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling authorHotCommentTokensV1ApiV1DouyinXingtuAuthorHotCommentTokensV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/author_hot_comment_tokens_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "authorHotCommentTokensV1ApiV1DouyinXingtuAuthorHotCommentTokensV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据抖音sec_user_id获取游客星图kolid/Get XingTu kolid by Douyin sec_user_id
   * # [中文] ### 用途: - 通过抖音sec_user_id获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - sec_user_id: sec_user_id, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin sec_user_id - Price: 0.001$ / time ### Parameters: - sec_user_id: sec_user_id, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### Return: - XingTu kolid  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAoxwUZouIdKL6sZ8EB96KDjkrhfBMS1KbCgsMJR1kIUs\&quot;
   * @param secUserId 抖音用户sec_user_id/Douyin User sec_user_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getXingtuKolidBySecUserIdApiV1DouyinXingtuGetXingtuKolidBySecUserIdGet (String secUserId) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling getXingtuKolidBySecUserIdApiV1DouyinXingtuGetXingtuKolidBySecUserIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getXingtuKolidBySecUserIdApiV1DouyinXingtuGetXingtuKolidBySecUserIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据抖音sec_user_id获取游客星图kolid/Get XingTu kolid by Douyin sec_user_id
   * # [中文] ### 用途: - 通过抖音sec_user_id获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - sec_user_id: sec_user_id, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin sec_user_id - Price: 0.001$ / time ### Parameters: - sec_user_id: sec_user_id, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### Return: - XingTu kolid  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAoxwUZouIdKL6sZ8EB96KDjkrhfBMS1KbCgsMJR1kIUs\&quot;
   * @param secUserId 抖音用户sec_user_id/Douyin User sec_user_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getXingtuKolidBySecUserIdApiV1DouyinXingtuGetXingtuKolidBySecUserIdGet_0 (String secUserId) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling getXingtuKolidBySecUserIdApiV1DouyinXingtuGetXingtuKolidBySecUserIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getXingtuKolidBySecUserIdApiV1DouyinXingtuGetXingtuKolidBySecUserIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据抖音用户ID获取游客星图kolid/Get XingTu kolid by Douyin User ID
   * # [中文] ### 用途: - 通过抖音用户ID获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - uid: 用户ID, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/web/fetch_user_profile_by_uid&#x60;     - &#x60;/api/v1/douyin/web/fetch_user_profile_by_short_id&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin User ID - Price: 0.001$ / time ### Parameters: - uid: User ID, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/web/fetch_user_profile_by_uid&#x60;     - &#x60;/api/v1/douyin/web/fetch_user_profile_by_short_id&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### Return: - XingTu kolid  # [示例/Example] uid &#x3D; \&quot;70452002324\&quot;
   * @param uid 抖音用户ID/Douyin User ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getXingtuKolidByUidApiV1DouyinXingtuGetXingtuKolidByUidGet (String uid) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uid' when calling getXingtuKolidByUidApiV1DouyinXingtuGetXingtuKolidByUidGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uid", uid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getXingtuKolidByUidApiV1DouyinXingtuGetXingtuKolidByUidGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据抖音用户ID获取游客星图kolid/Get XingTu kolid by Douyin User ID
   * # [中文] ### 用途: - 通过抖音用户ID获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - uid: 用户ID, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/web/fetch_user_profile_by_uid&#x60;     - &#x60;/api/v1/douyin/web/fetch_user_profile_by_short_id&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin User ID - Price: 0.001$ / time ### Parameters: - uid: User ID, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/web/fetch_user_profile_by_uid&#x60;     - &#x60;/api/v1/douyin/web/fetch_user_profile_by_short_id&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### Return: - XingTu kolid  # [示例/Example] uid &#x3D; \&quot;70452002324\&quot;
   * @param uid 抖音用户ID/Douyin User ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getXingtuKolidByUidApiV1DouyinXingtuGetXingtuKolidByUidGet_0 (String uid) throws ApiException {
    // verify the required parameter 'uid' is set
    if (uid == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uid' when calling getXingtuKolidByUidApiV1DouyinXingtuGetXingtuKolidByUidGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("uid", uid));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getXingtuKolidByUidApiV1DouyinXingtuGetXingtuKolidByUidGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据抖音号获取游客星图kolid/Get XingTu kolid by Douyin unique_id
   * # [中文] ### 用途: - 通过抖音号获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - unique_id: 抖音号, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin unique_id - Price: 0.001$ / time ### Parameters: - unique_id: unique_id, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### Return: - XingTu kolid  # [示例/Example] unique_id &#x3D; \&quot;m6640150\&quot;
   * @param uniqueId 抖音号/Douyin User unique_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getXingtuKolidByUniqueIdApiV1DouyinXingtuGetXingtuKolidByUniqueIdGet (String uniqueId) throws ApiException {
    // verify the required parameter 'uniqueId' is set
    if (uniqueId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uniqueId' when calling getXingtuKolidByUniqueIdApiV1DouyinXingtuGetXingtuKolidByUniqueIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unique_id", uniqueId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getXingtuKolidByUniqueIdApiV1DouyinXingtuGetXingtuKolidByUniqueIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据抖音号获取游客星图kolid/Get XingTu kolid by Douyin unique_id
   * # [中文] ### 用途: - 通过抖音号获取游客星图kolid - 价格：0.001$ / 次 ### 参数: - unique_id: 抖音号, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### 返回: - 游客星图kolid  # [English] ### Purpose: - Get XingTu kolid by Douyin unique_id - Price: 0.001$ / time ### Parameters: - unique_id: unique_id, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/web/handler_user_profile&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v2&#x60;     - &#x60;/api/v1/douyin/web/handler_user_profile_v3&#x60;     - &#x60;/api/v1/douyin/app/v3/handler_user_profile&#x60; ### Return: - XingTu kolid  # [示例/Example] unique_id &#x3D; \&quot;m6640150\&quot;
   * @param uniqueId 抖音号/Douyin User unique_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getXingtuKolidByUniqueIdApiV1DouyinXingtuGetXingtuKolidByUniqueIdGet_0 (String uniqueId) throws ApiException {
    // verify the required parameter 'uniqueId' is set
    if (uniqueId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'uniqueId' when calling getXingtuKolidByUniqueIdApiV1DouyinXingtuGetXingtuKolidByUniqueIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("unique_id", uniqueId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getXingtuKolidByUniqueIdApiV1DouyinXingtuGetXingtuKolidByUniqueIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol观众画像V1/Get kol Audience Portrait V1
   * # [中文] ### 用途: - 获取kol观众画像V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol观众画像  # [English] ### Purpose: - Get kol Audience Portrait V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Audience Portrait  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolAudiencePortraitV1ApiV1DouyinXingtuKolAudiencePortraitV1Get (String kolId) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolAudiencePortraitV1ApiV1DouyinXingtuKolAudiencePortraitV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_audience_portrait_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolAudiencePortraitV1ApiV1DouyinXingtuKolAudiencePortraitV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol观众画像V1/Get kol Audience Portrait V1
   * # [中文] ### 用途: - 获取kol观众画像V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol观众画像  # [English] ### Purpose: - Get kol Audience Portrait V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Audience Portrait  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolAudiencePortraitV1ApiV1DouyinXingtuKolAudiencePortraitV1Get_0 (String kolId) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolAudiencePortraitV1ApiV1DouyinXingtuKolAudiencePortraitV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_audience_portrait_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolAudiencePortraitV1ApiV1DouyinXingtuKolAudiencePortraitV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol基本信息V1/Get kol Base Info V1
   * # [中文] ### 用途: - 获取kol基本信息V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - platformChannel:     - 平台渠道，支持以下参数:     - _1 :抖音短视频(Video)     - _10 :抖音直播(Live) ### 返回: - kol基本信息  # [English] ### Purpose: - Get kol Base Info V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - platformChannel:     - Platform channel, supports the following parameters:     - _1 :Douyin Video     - _10 :Douyin Live ### Return: - kol Base Info  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; platformChannel &#x3D; \&quot;_1\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @param platformChannel 平台渠道/Platform Channel (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolBaseInfoV1ApiV1DouyinXingtuKolBaseInfoV1Get (String kolId, String platformChannel) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolBaseInfoV1ApiV1DouyinXingtuKolBaseInfoV1Get"));
    }
    // verify the required parameter 'platformChannel' is set
    if (platformChannel == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'platformChannel' when calling kolBaseInfoV1ApiV1DouyinXingtuKolBaseInfoV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_base_info_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("platformChannel", platformChannel));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolBaseInfoV1ApiV1DouyinXingtuKolBaseInfoV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol基本信息V1/Get kol Base Info V1
   * # [中文] ### 用途: - 获取kol基本信息V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - platformChannel:     - 平台渠道，支持以下参数:     - _1 :抖音短视频(Video)     - _10 :抖音直播(Live) ### 返回: - kol基本信息  # [English] ### Purpose: - Get kol Base Info V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - platformChannel:     - Platform channel, supports the following parameters:     - _1 :Douyin Video     - _10 :Douyin Live ### Return: - kol Base Info  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; platformChannel &#x3D; \&quot;_1\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @param platformChannel 平台渠道/Platform Channel (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolBaseInfoV1ApiV1DouyinXingtuKolBaseInfoV1Get_0 (String kolId, String platformChannel) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolBaseInfoV1ApiV1DouyinXingtuKolBaseInfoV1Get_0"));
    }
    // verify the required parameter 'platformChannel' is set
    if (platformChannel == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'platformChannel' when calling kolBaseInfoV1ApiV1DouyinXingtuKolBaseInfoV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_base_info_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("platformChannel", platformChannel));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolBaseInfoV1ApiV1DouyinXingtuKolBaseInfoV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol转化能力分析V1/Get kol Conversion Ability Analysis V1
   * # [中文] ### 用途: - 获取kol转化能力分析V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - _range: 时间范围, 支持以下参数:     - _1 :近7天(last 7 days)     - _2 :30天(last 30 days)     - _3 :90天(last 90 days) ### 返回: - kol转化能力分析  # [English] ### Purpose: - Get kol Conversion Ability Analysis V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - _range: Time range, supports the following parameters:     - _1 :Last 7 days     - _2 :Last 30 days     - _3 :Last 90 days ### Return: - kol Conversion Ability Analysis  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; _range &#x3D; \&quot;_1\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @param range 时间范围/Time Range (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolConversionAbilityAnalysisV1ApiV1DouyinXingtuKolConversionAbilityAnalysisV1Get (String kolId, String range) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolConversionAbilityAnalysisV1ApiV1DouyinXingtuKolConversionAbilityAnalysisV1Get"));
    }
    // verify the required parameter 'range' is set
    if (range == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'range' when calling kolConversionAbilityAnalysisV1ApiV1DouyinXingtuKolConversionAbilityAnalysisV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_conversion_ability_analysis_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_range", range));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolConversionAbilityAnalysisV1ApiV1DouyinXingtuKolConversionAbilityAnalysisV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol转化能力分析V1/Get kol Conversion Ability Analysis V1
   * # [中文] ### 用途: - 获取kol转化能力分析V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - _range: 时间范围, 支持以下参数:     - _1 :近7天(last 7 days)     - _2 :30天(last 30 days)     - _3 :90天(last 90 days) ### 返回: - kol转化能力分析  # [English] ### Purpose: - Get kol Conversion Ability Analysis V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - _range: Time range, supports the following parameters:     - _1 :Last 7 days     - _2 :Last 30 days     - _3 :Last 90 days ### Return: - kol Conversion Ability Analysis  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; _range &#x3D; \&quot;_1\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @param range 时间范围/Time Range (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolConversionAbilityAnalysisV1ApiV1DouyinXingtuKolConversionAbilityAnalysisV1Get_0 (String kolId, String range) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolConversionAbilityAnalysisV1ApiV1DouyinXingtuKolConversionAbilityAnalysisV1Get_0"));
    }
    // verify the required parameter 'range' is set
    if (range == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'range' when calling kolConversionAbilityAnalysisV1ApiV1DouyinXingtuKolConversionAbilityAnalysisV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_conversion_ability_analysis_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_range", range));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolConversionAbilityAnalysisV1ApiV1DouyinXingtuKolConversionAbilityAnalysisV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol转化视频展示V1/Get kol Convert Video Display V1
   * # [中文] ### 用途: - 获取kol转化视频展示V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - detailType: 详情类型, 支持以下参数:     - _1 :相关视频数据(Video Data)     - _2 :相关商品数据(Product Data) ### 返回: - kol转化视频展示  # [English] ### Purpose: - Get kol Convert Video Display V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - detailType: Detail type, supports the following parameters:     - _1 :Video Data     - _2 :Product Data - page: Page number, starting from 1 ### Return: - kol Convert Video Display  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; detailType &#x3D; \&quot;_1\&quot; page &#x3D; 1
   * @param kolId 用户的kolId/User kolId (required)
   * @param detailType 详情类型/Detail Type (required)
   * @param page 页码/Page (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolConvertVideoDisplayV1ApiV1DouyinXingtuKolConvertVideoDisplayV1Get (String kolId, String detailType, Integer page) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolConvertVideoDisplayV1ApiV1DouyinXingtuKolConvertVideoDisplayV1Get"));
    }
    // verify the required parameter 'detailType' is set
    if (detailType == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'detailType' when calling kolConvertVideoDisplayV1ApiV1DouyinXingtuKolConvertVideoDisplayV1Get"));
    }
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling kolConvertVideoDisplayV1ApiV1DouyinXingtuKolConvertVideoDisplayV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_convert_video_display_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("detailType", detailType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolConvertVideoDisplayV1ApiV1DouyinXingtuKolConvertVideoDisplayV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol转化视频展示V1/Get kol Convert Video Display V1
   * # [中文] ### 用途: - 获取kol转化视频展示V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - detailType: 详情类型, 支持以下参数:     - _1 :相关视频数据(Video Data)     - _2 :相关商品数据(Product Data) ### 返回: - kol转化视频展示  # [English] ### Purpose: - Get kol Convert Video Display V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - detailType: Detail type, supports the following parameters:     - _1 :Video Data     - _2 :Product Data - page: Page number, starting from 1 ### Return: - kol Convert Video Display  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; detailType &#x3D; \&quot;_1\&quot; page &#x3D; 1
   * @param kolId 用户的kolId/User kolId (required)
   * @param detailType 详情类型/Detail Type (required)
   * @param page 页码/Page (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolConvertVideoDisplayV1ApiV1DouyinXingtuKolConvertVideoDisplayV1Get_0 (String kolId, String detailType, Integer page) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolConvertVideoDisplayV1ApiV1DouyinXingtuKolConvertVideoDisplayV1Get_0"));
    }
    // verify the required parameter 'detailType' is set
    if (detailType == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'detailType' when calling kolConvertVideoDisplayV1ApiV1DouyinXingtuKolConvertVideoDisplayV1Get_0"));
    }
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling kolConvertVideoDisplayV1ApiV1DouyinXingtuKolConvertVideoDisplayV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_convert_video_display_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("detailType", detailType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolConvertVideoDisplayV1ApiV1DouyinXingtuKolConvertVideoDisplayV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol性价比能力分析V1/Get kol Cp Info V1
   * # [中文] ### 用途: - 获取kol性价比能力分析V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol性价比能力分析  # [English] ### Purpose: - Get kol Cp Info V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Cp Info  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolCpInfoV1ApiV1DouyinXingtuKolCpInfoV1Get (String kolId) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolCpInfoV1ApiV1DouyinXingtuKolCpInfoV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_cp_info_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolCpInfoV1ApiV1DouyinXingtuKolCpInfoV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol性价比能力分析V1/Get kol Cp Info V1
   * # [中文] ### 用途: - 获取kol性价比能力分析V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol性价比能力分析  # [English] ### Purpose: - Get kol Cp Info V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Cp Info  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolCpInfoV1ApiV1DouyinXingtuKolCpInfoV1Get_0 (String kolId) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolCpInfoV1ApiV1DouyinXingtuKolCpInfoV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_cp_info_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolCpInfoV1ApiV1DouyinXingtuKolCpInfoV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol粉丝趋势V1/Get kol Daily Fnas V1
   * # [中文] ### 用途: - 获取kol粉丝趋势V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - startDate: 开始日期，格式为：yyyy-MM-dd - endDate: 结束日期，格式为：yyyy-MM-dd ### 返回: - kol粉丝趋势  # [English] ### Purpose: - Get kol Daily Fans V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - startDate: Start date, format: yyyy-MM-dd - endDate: End date, format: yyyy-MM-dd ### Return: - kol Daily Fans  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; startDate &#x3D; \&quot;2024-12-01\&quot; endDate &#x3D; \&quot;2025-01-01\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @param startDate 开始日期/Start Date (required)
   * @param endDate 结束日期/End Date (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolDailyFansV1ApiV1DouyinXingtuKolDailyFansV1Get (String kolId, String startDate, String endDate) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolDailyFansV1ApiV1DouyinXingtuKolDailyFansV1Get"));
    }
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'startDate' when calling kolDailyFansV1ApiV1DouyinXingtuKolDailyFansV1Get"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'endDate' when calling kolDailyFansV1ApiV1DouyinXingtuKolDailyFansV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_daily_fans_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startDate", startDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endDate", endDate));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolDailyFansV1ApiV1DouyinXingtuKolDailyFansV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol粉丝趋势V1/Get kol Daily Fnas V1
   * # [中文] ### 用途: - 获取kol粉丝趋势V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - startDate: 开始日期，格式为：yyyy-MM-dd - endDate: 结束日期，格式为：yyyy-MM-dd ### 返回: - kol粉丝趋势  # [English] ### Purpose: - Get kol Daily Fans V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - startDate: Start date, format: yyyy-MM-dd - endDate: End date, format: yyyy-MM-dd ### Return: - kol Daily Fans  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; startDate &#x3D; \&quot;2024-12-01\&quot; endDate &#x3D; \&quot;2025-01-01\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @param startDate 开始日期/Start Date (required)
   * @param endDate 结束日期/End Date (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolDailyFansV1ApiV1DouyinXingtuKolDailyFansV1Get_0 (String kolId, String startDate, String endDate) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolDailyFansV1ApiV1DouyinXingtuKolDailyFansV1Get_0"));
    }
    // verify the required parameter 'startDate' is set
    if (startDate == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'startDate' when calling kolDailyFansV1ApiV1DouyinXingtuKolDailyFansV1Get_0"));
    }
    // verify the required parameter 'endDate' is set
    if (endDate == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'endDate' when calling kolDailyFansV1ApiV1DouyinXingtuKolDailyFansV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_daily_fans_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("startDate", startDate));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("endDate", endDate));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolDailyFansV1ApiV1DouyinXingtuKolDailyFansV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol数据概览V1/Get kol Data Overview V1
   * # [中文] ### 用途: - 获取kol数据概览V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - _type: 类型, 支持以下参数:     - _1 :个人视频(personal video)     - _2 :星图视频(xingtu video) - _range: 范围, 支持以下参数:     - _2 :近30天(last 30 days)     - _3 :近90天(last 90 days) - flowType: 流量类型, 支持以下参数:     - 1 : 默认(default) ### 返回: - kol数据概览  # [English] ### Purpose: - Get kol Data Overview V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - _type: Type, supports the following parameters:     - _1 :Personal Video     - _2 :Xingtu Video - _range: Range, supports the following parameters:     - _2 :Last 30 days     - _3 :Last 90 days - flowType: Flow Type, supports the following parameters:     - 1 : Default ### Return: - kol Data Overview  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; _type &#x3D; \&quot;_1\&quot; _range &#x3D; \&quot;_2\&quot; flowType &#x3D; 1
   * @param kolId 用户的kolId/User kolId (required)
   * @param type 类型/Type (required)
   * @param range 范围/Range (required)
   * @param flowType 流量类型/Flow Type (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolDataOverviewV1ApiV1DouyinXingtuKolDataOverviewV1Get (String kolId, String type, String range, Integer flowType) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolDataOverviewV1ApiV1DouyinXingtuKolDataOverviewV1Get"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'type' when calling kolDataOverviewV1ApiV1DouyinXingtuKolDataOverviewV1Get"));
    }
    // verify the required parameter 'range' is set
    if (range == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'range' when calling kolDataOverviewV1ApiV1DouyinXingtuKolDataOverviewV1Get"));
    }
    // verify the required parameter 'flowType' is set
    if (flowType == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'flowType' when calling kolDataOverviewV1ApiV1DouyinXingtuKolDataOverviewV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_data_overview_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_range", range));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("flowType", flowType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolDataOverviewV1ApiV1DouyinXingtuKolDataOverviewV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol数据概览V1/Get kol Data Overview V1
   * # [中文] ### 用途: - 获取kol数据概览V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - _type: 类型, 支持以下参数:     - _1 :个人视频(personal video)     - _2 :星图视频(xingtu video) - _range: 范围, 支持以下参数:     - _2 :近30天(last 30 days)     - _3 :近90天(last 90 days) - flowType: 流量类型, 支持以下参数:     - 1 : 默认(default) ### 返回: - kol数据概览  # [English] ### Purpose: - Get kol Data Overview V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - _type: Type, supports the following parameters:     - _1 :Personal Video     - _2 :Xingtu Video - _range: Range, supports the following parameters:     - _2 :Last 30 days     - _3 :Last 90 days - flowType: Flow Type, supports the following parameters:     - 1 : Default ### Return: - kol Data Overview  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; _type &#x3D; \&quot;_1\&quot; _range &#x3D; \&quot;_2\&quot; flowType &#x3D; 1
   * @param kolId 用户的kolId/User kolId (required)
   * @param type 类型/Type (required)
   * @param range 范围/Range (required)
   * @param flowType 流量类型/Flow Type (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolDataOverviewV1ApiV1DouyinXingtuKolDataOverviewV1Get_0 (String kolId, String type, String range, Integer flowType) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolDataOverviewV1ApiV1DouyinXingtuKolDataOverviewV1Get_0"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'type' when calling kolDataOverviewV1ApiV1DouyinXingtuKolDataOverviewV1Get_0"));
    }
    // verify the required parameter 'range' is set
    if (range == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'range' when calling kolDataOverviewV1ApiV1DouyinXingtuKolDataOverviewV1Get_0"));
    }
    // verify the required parameter 'flowType' is set
    if (flowType == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'flowType' when calling kolDataOverviewV1ApiV1DouyinXingtuKolDataOverviewV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_data_overview_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_type", type));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("_range", range));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("flowType", flowType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolDataOverviewV1ApiV1DouyinXingtuKolDataOverviewV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol粉丝画像V1/Get kol Fans Portrait V1
   * # [中文] ### 用途: - 获取kol粉丝画像V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol粉丝画像  # [English] ### Purpose: - Get kol Fans Portrait V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Fans Portrait  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolFansPortraitV1ApiV1DouyinXingtuKolFansPortraitV1Get (String kolId) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolFansPortraitV1ApiV1DouyinXingtuKolFansPortraitV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_fans_portrait_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolFansPortraitV1ApiV1DouyinXingtuKolFansPortraitV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol粉丝画像V1/Get kol Fans Portrait V1
   * # [中文] ### 用途: - 获取kol粉丝画像V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol粉丝画像  # [English] ### Purpose: - Get kol Fans Portrait V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Fans Portrait  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolFansPortraitV1ApiV1DouyinXingtuKolFansPortraitV1Get_0 (String kolId) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolFansPortraitV1ApiV1DouyinXingtuKolFansPortraitV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_fans_portrait_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolFansPortraitV1ApiV1DouyinXingtuKolFansPortraitV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol连接用户V1/Get kol Link Struct V1
   * # [中文] ### 用途: - 获取kol连接用户V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol连接用户  # [English] ### Purpose: - Get kol Link Struct V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Link Struct  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolLinkStructV1ApiV1DouyinXingtuKolLinkStructV1Get (String kolId) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolLinkStructV1ApiV1DouyinXingtuKolLinkStructV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_link_struct_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolLinkStructV1ApiV1DouyinXingtuKolLinkStructV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol连接用户V1/Get kol Link Struct V1
   * # [中文] ### 用途: - 获取kol连接用户V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol连接用户  # [English] ### Purpose: - Get kol Link Struct V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Link Struct  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolLinkStructV1ApiV1DouyinXingtuKolLinkStructV1Get_0 (String kolId) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolLinkStructV1ApiV1DouyinXingtuKolLinkStructV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_link_struct_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolLinkStructV1ApiV1DouyinXingtuKolLinkStructV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol内容表现V1/Get kol Rec Videos V1
   * # [中文] ### 用途: - 获取kol内容表现V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol内容表现  # [English] ### Purpose: - Get kol Rec Videos V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Rec Videos  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolRecVideosV1ApiV1DouyinXingtuKolRecVideosV1Get (String kolId) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolRecVideosV1ApiV1DouyinXingtuKolRecVideosV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_rec_videos_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolRecVideosV1ApiV1DouyinXingtuKolRecVideosV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol内容表现V1/Get kol Rec Videos V1
   * # [中文] ### 用途: - 获取kol内容表现V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol内容表现  # [English] ### Purpose: - Get kol Rec Videos V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Rec Videos  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolRecVideosV1ApiV1DouyinXingtuKolRecVideosV1Get_0 (String kolId) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolRecVideosV1ApiV1DouyinXingtuKolRecVideosV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_rec_videos_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolRecVideosV1ApiV1DouyinXingtuKolRecVideosV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol服务报价V1/Get kol Service Price V1
   * # [中文] ### 用途: - 获取kol服务报价V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - platformChannel:     - 平台渠道，支持以下参数:     - _1: 抖音短视频(Video)     - _10: 抖音直播(Live) ### 返回: kol服务报价  # [English] ### Purpose: - Get kol Service Price V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - platformChannel:     - Platform channel, supports the following parameters:     - _1: Douyin Video     - _10: Douyin Live ### Return: - kol Service Price  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; platformChannel &#x3D; \&quot;_1\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @param platformChannel 平台渠道/Platform Channel (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolServicePriceV1ApiV1DouyinXingtuKolServicePriceV1Get (String kolId, String platformChannel) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolServicePriceV1ApiV1DouyinXingtuKolServicePriceV1Get"));
    }
    // verify the required parameter 'platformChannel' is set
    if (platformChannel == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'platformChannel' when calling kolServicePriceV1ApiV1DouyinXingtuKolServicePriceV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_service_price_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("platformChannel", platformChannel));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolServicePriceV1ApiV1DouyinXingtuKolServicePriceV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol服务报价V1/Get kol Service Price V1
   * # [中文] ### 用途: - 获取kol服务报价V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - platformChannel:     - 平台渠道，支持以下参数:     - _1: 抖音短视频(Video)     - _10: 抖音直播(Live) ### 返回: kol服务报价  # [English] ### Purpose: - Get kol Service Price V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - platformChannel:     - Platform channel, supports the following parameters:     - _1: Douyin Video     - _10: Douyin Live ### Return: - kol Service Price  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; platformChannel &#x3D; \&quot;_1\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @param platformChannel 平台渠道/Platform Channel (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolServicePriceV1ApiV1DouyinXingtuKolServicePriceV1Get_0 (String kolId, String platformChannel) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolServicePriceV1ApiV1DouyinXingtuKolServicePriceV1Get_0"));
    }
    // verify the required parameter 'platformChannel' is set
    if (platformChannel == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'platformChannel' when calling kolServicePriceV1ApiV1DouyinXingtuKolServicePriceV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_service_price_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("platformChannel", platformChannel));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolServicePriceV1ApiV1DouyinXingtuKolServicePriceV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol连接用户来源V1/Get kol Touch Distribution V1
   * # [中文] ### 用途: - 获取kol连接用户来源V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol连接用户来源  # [English] ### Purpose: - Get kol Touch Distribution V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Touch Distribution  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolTouchDistributionV1ApiV1DouyinXingtuKolTouchDistributionV1Get (String kolId) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolTouchDistributionV1ApiV1DouyinXingtuKolTouchDistributionV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_touch_distribution_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolTouchDistributionV1ApiV1DouyinXingtuKolTouchDistributionV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol连接用户来源V1/Get kol Touch Distribution V1
   * # [中文] ### 用途: - 获取kol连接用户来源V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol连接用户来源  # [English] ### Purpose: - Get kol Touch Distribution V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Touch Distribution  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolTouchDistributionV1ApiV1DouyinXingtuKolTouchDistributionV1Get_0 (String kolId) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolTouchDistributionV1ApiV1DouyinXingtuKolTouchDistributionV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_touch_distribution_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolTouchDistributionV1ApiV1DouyinXingtuKolTouchDistributionV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol视频表现V1/Get kol Video Performance V1
   * # [中文] ### 用途: - 获取kol视频表现V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - onlyAssign: 是否只显示分配作品，具体参数如下:     - false : 显示全部，包括个人作品和分配作品，默认值。     - true : 只显示来自星图的分配作品。 ### 返回: - kol视频表现  # [English] ### Purpose: - Get kol Video Performance V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - onlyAssign: Whether to display only assigned works, the specific parameters are as follows:     - false : Show all, including personal works and assigned works, default value.     - true : Only display assigned works from XingTu. ### Return: - kol Video Performance  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; onlyAssign &#x3D; False
   * @param kolId 用户的kolId/User kolId (required)
   * @param onlyAssign 是否只显示分配作品/Whether to display only assigned works (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolVideoPerformanceV1ApiV1DouyinXingtuKolVideoPerformanceV1Get (String kolId, Boolean onlyAssign) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolVideoPerformanceV1ApiV1DouyinXingtuKolVideoPerformanceV1Get"));
    }
    // verify the required parameter 'onlyAssign' is set
    if (onlyAssign == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'onlyAssign' when calling kolVideoPerformanceV1ApiV1DouyinXingtuKolVideoPerformanceV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_video_performance_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("onlyAssign", onlyAssign));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolVideoPerformanceV1ApiV1DouyinXingtuKolVideoPerformanceV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol视频表现V1/Get kol Video Performance V1
   * # [中文] ### 用途: - 获取kol视频表现V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - onlyAssign: 是否只显示分配作品，具体参数如下:     - false : 显示全部，包括个人作品和分配作品，默认值。     - true : 只显示来自星图的分配作品。 ### 返回: - kol视频表现  # [English] ### Purpose: - Get kol Video Performance V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; - onlyAssign: Whether to display only assigned works, the specific parameters are as follows:     - false : Show all, including personal works and assigned works, default value.     - true : Only display assigned works from XingTu. ### Return: - kol Video Performance  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot; onlyAssign &#x3D; False
   * @param kolId 用户的kolId/User kolId (required)
   * @param onlyAssign 是否只显示分配作品/Whether to display only assigned works (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolVideoPerformanceV1ApiV1DouyinXingtuKolVideoPerformanceV1Get_0 (String kolId, Boolean onlyAssign) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolVideoPerformanceV1ApiV1DouyinXingtuKolVideoPerformanceV1Get_0"));
    }
    // verify the required parameter 'onlyAssign' is set
    if (onlyAssign == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'onlyAssign' when calling kolVideoPerformanceV1ApiV1DouyinXingtuKolVideoPerformanceV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_video_performance_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("onlyAssign", onlyAssign));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolVideoPerformanceV1ApiV1DouyinXingtuKolVideoPerformanceV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol星图指数V1/Get kol Xingtu Index V1
   * # [中文] ### 用途: - 获取kol星图指数V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol星图指数  # [English] ### Purpose: - Get kol Xingtu Index V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Xingtu Index  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolXingtuIndexV1ApiV1DouyinXingtuKolXingtuIndexV1Get (String kolId) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolXingtuIndexV1ApiV1DouyinXingtuKolXingtuIndexV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_xingtu_index_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolXingtuIndexV1ApiV1DouyinXingtuKolXingtuIndexV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取kol星图指数V1/Get kol Xingtu Index V1
   * # [中文] ### 用途: - 获取kol星图指数V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - kolId: 用户的kolId, 可以从接口以下接口获取：     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### 返回: - kol星图指数  # [English] ### Purpose: - Get kol Xingtu Index V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - kolId: User kolId, can be obtained from the following interfaces:     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_uid&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_sec_user_id&#x60;     - &#x60;/api/v1/douyin/xingtu/get_xingtu_kolid_by_unique_id&#x60; ### Return: - kol Xingtu Index  # [示例/Example] kolId &#x3D; \&quot;7048929565493690398\&quot;
   * @param kolId 用户的kolId/User kolId (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> kolXingtuIndexV1ApiV1DouyinXingtuKolXingtuIndexV1Get_0 (String kolId) throws ApiException {
    // verify the required parameter 'kolId' is set
    if (kolId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'kolId' when calling kolXingtuIndexV1ApiV1DouyinXingtuKolXingtuIndexV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/kol_xingtu_index_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("kolId", kolId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "kolXingtuIndexV1ApiV1DouyinXingtuKolXingtuIndexV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 关键词搜索kol V1/Search Kol V1
   * # [中文] ### 用途: - 关键词搜索kol V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - keyword: 关键词 - platformSource:     - 平台来源，支持以下参数:     - _1 :抖音(douyin)     - _2 :头条(toutiao)     - _3 :西瓜(xigua) - page: 页码，从1开始 ### 返回: - kol列表  # [English] ### Purpose: - Search Kol V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - keyword: Keyword - platformSource:     - Platform source, supports the following parameters:     - _1 :Douyin     - _2 :Toutiao     - _3 :Xigua - page: Page number, starting from 1 ### Return: - Kol List  # [示例/Example] keyword &#x3D; \&quot;人工智能\&quot; platformSource &#x3D; \&quot;_1\&quot; page &#x3D; 1
   * @param keyword 关键词/Keyword (required)
   * @param platformSource 平台来源/Platform Source (required)
   * @param page 页码/Page (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> searchKolV1ApiV1DouyinXingtuSearchKolV1Get (String keyword, String platformSource, Integer page) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling searchKolV1ApiV1DouyinXingtuSearchKolV1Get"));
    }
    // verify the required parameter 'platformSource' is set
    if (platformSource == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'platformSource' when calling searchKolV1ApiV1DouyinXingtuSearchKolV1Get"));
    }
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling searchKolV1ApiV1DouyinXingtuSearchKolV1Get"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/search_kol_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("platformSource", platformSource));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "searchKolV1ApiV1DouyinXingtuSearchKolV1Get call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 关键词搜索kol V1/Search Kol V1
   * # [中文] ### 用途: - 关键词搜索kol V1 - 该接口数据使用企业账号进行请求，收费较贵。 - 价格：0.02$ / 次 ### 参数: - keyword: 关键词 - platformSource:     - 平台来源，支持以下参数:     - _1 :抖音(douyin)     - _2 :头条(toutiao)     - _3 :西瓜(xigua) - page: 页码，从1开始 ### 返回: - kol列表  # [English] ### Purpose: - Search Kol V1 - The interface data is requested using an enterprise account, which is more expensive. - Price: 0.02$ / time ### Parameters: - keyword: Keyword - platformSource:     - Platform source, supports the following parameters:     - _1 :Douyin     - _2 :Toutiao     - _3 :Xigua - page: Page number, starting from 1 ### Return: - Kol List  # [示例/Example] keyword &#x3D; \&quot;人工智能\&quot; platformSource &#x3D; \&quot;_1\&quot; page &#x3D; 1
   * @param keyword 关键词/Keyword (required)
   * @param platformSource 平台来源/Platform Source (required)
   * @param page 页码/Page (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> searchKolV1ApiV1DouyinXingtuSearchKolV1Get_0 (String keyword, String platformSource, Integer page) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling searchKolV1ApiV1DouyinXingtuSearchKolV1Get_0"));
    }
    // verify the required parameter 'platformSource' is set
    if (platformSource == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'platformSource' when calling searchKolV1ApiV1DouyinXingtuSearchKolV1Get_0"));
    }
    // verify the required parameter 'page' is set
    if (page == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'page' when calling searchKolV1ApiV1DouyinXingtuSearchKolV1Get_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/douyin/xingtu/search_kol_v1";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("platformSource", platformSource));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page", page));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "searchKolV1ApiV1DouyinXingtuSearchKolV1Get_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
}
