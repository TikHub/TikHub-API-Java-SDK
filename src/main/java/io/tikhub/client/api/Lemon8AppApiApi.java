/*
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.tikhub.client.api;

import io.tikhub.client.ApiClient;
import io.tikhub.client.ApiException;
import io.tikhub.client.Pair;

import org.openapitools.client.model.HttpValidationError;
import org.openapitools.client.model.ResponseModel;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;


public class Lemon8AppApiApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  
  public Lemon8AppApiApi() {
    this(new ApiClient());
  }

  public Lemon8AppApiApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  /**
   * 获取发现页Banner/Get banners of discover page
   * # [中文] ### 用途: - 获取发现页Banner（搜索页上方的滚动内容） ### 返回: - Banner列表  # [English] ### Purpose: - Get banners of discover page ### Return: - Banners list  # [示例/Example]
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_discover_banners";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取发现页Banner/Get banners of discover page
   * # [中文] ### 用途: - 获取发现页Banner（搜索页上方的滚动内容） ### 返回: - Banner列表  # [English] ### Purpose: - Get banners of discover page ### Return: - Banners list  # [示例/Example]
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet_0 () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_discover_banners";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取发现页主体内容/Get main content of discover page
   * # [中文] ### 用途: - 获取发现页（搜索页主体内容） ### 返回: - 主体内容  # [English] ### Purpose: - Get main content of discover page ### Return: - Main content  # [示例/Example]
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_discover_tab";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取发现页主体内容/Get main content of discover page
   * # [中文] ### 用途: - 获取发现页（搜索页主体内容） ### 返回: - 主体内容  # [English] ### Purpose: - Get main content of discover page ### Return: - Main content  # [示例/Example]
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet_0 () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_discover_tab";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取发现页的 Editor&#39;s Picks/Get Editor&#39;s Picks of discover page
   * # [中文] ### 用途: - 获取发现页（搜索页下方的推荐内容 - Editor&#39;s Picks） ### 返回: - 推荐内容  # [English] ### Purpose: - Get Editor&#39;s Picks of discover page ### Return: - Editor&#39;s Picks  # [示例/Example]
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_discover_tab_information_tabs";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取发现页的 Editor&#39;s Picks/Get Editor&#39;s Picks of discover page
   * # [中文] ### 用途: - 获取发现页（搜索页下方的推荐内容 - Editor&#39;s Picks） ### 返回: - 推荐内容  # [English] ### Purpose: - Get Editor&#39;s Picks of discover page ### Return: - Editor&#39;s Picks  # [示例/Example]
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet_0 () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_discover_tab_information_tabs";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取热搜关键词/Get hot search keywords
   * # [中文] ### 用途: - 获取热搜关键词 ### 返回: - 热搜关键词列表  # [English] ### Purpose: - Get hot search keywords ### Return: - Hot search keywords list  # [示例/Example]
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_hot_search_keywords";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取热搜关键词/Get hot search keywords
   * # [中文] ### 用途: - 获取热搜关键词 ### 返回: - 热搜关键词列表  # [English] ### Purpose: - Get hot search keywords ### Return: - Hot search keywords list  # [示例/Example]
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet_0 () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_hot_search_keywords";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定作品的评论列表/Get comments list of specified post
   * # [中文] ### 用途: - 获取指定作品的评论列表 ### 参数: - group_id: 作品的group_id，可以从接口&#x60;/lemon8/app/fetch_post_detail&#x60;获取 - item_id: 作品的item_id，可以从接口&#x60;/lemon8/app/fetch_post_detail&#x60; 或 &#x60;/lemon8/app/get_item_id&#x60;获取 - media_id: 作品的media_id，可以从接口&#x60;/lemon8/app/fetch_post_detail&#x60;获取 - offset: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的offset进行翻页。 ### 返回: - 评论列表  # [English] ### Purpose: - Get comments list of specified post ### Parameters: - group_id: Post&#39;s group_id, can be obtained from the interface &#x60;/lemon8/app/fetch_post_detail&#x60; - item_id: Post&#39;s item_id, can be obtained from the interface &#x60;/lemon8/app/fetch_post_detail&#x60; or &#x60;/lemon8/app/get_item_id&#x60; - media_id: Post&#39;s media_id, can be obtained from the interface &#x60;/lemon8/app/fetch_post_detail&#x60; - offset: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the offset returned by the last request is used for subsequent requests. ### Return: - Comments list  # [示例/Example] group_id &#x3D; \&quot;7361926875709129222\&quot; item_id &#x3D; \&quot;7361926875709129222\&quot; media_id &#x3D; \&quot;7428056850216862763\&quot;
   * @param groupId 作品的group_id/Post&#39;s group_id (required)
   * @param itemId 作品的item_id/Post&#39;s item_id (required)
   * @param mediaId 作品的media_id/Post&#39;s media_id (required)
   * @param offset 翻页参数/Pagination parameter (optional, default to &quot;0&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet (String groupId, String itemId, String mediaId, String offset) throws ApiException {
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'groupId' when calling fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet"));
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'itemId' when calling fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet"));
    }
    // verify the required parameter 'mediaId' is set
    if (mediaId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'mediaId' when calling fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_post_comment_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id", groupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("item_id", itemId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("media_id", mediaId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定作品的评论列表/Get comments list of specified post
   * # [中文] ### 用途: - 获取指定作品的评论列表 ### 参数: - group_id: 作品的group_id，可以从接口&#x60;/lemon8/app/fetch_post_detail&#x60;获取 - item_id: 作品的item_id，可以从接口&#x60;/lemon8/app/fetch_post_detail&#x60; 或 &#x60;/lemon8/app/get_item_id&#x60;获取 - media_id: 作品的media_id，可以从接口&#x60;/lemon8/app/fetch_post_detail&#x60;获取 - offset: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的offset进行翻页。 ### 返回: - 评论列表  # [English] ### Purpose: - Get comments list of specified post ### Parameters: - group_id: Post&#39;s group_id, can be obtained from the interface &#x60;/lemon8/app/fetch_post_detail&#x60; - item_id: Post&#39;s item_id, can be obtained from the interface &#x60;/lemon8/app/fetch_post_detail&#x60; or &#x60;/lemon8/app/get_item_id&#x60; - media_id: Post&#39;s media_id, can be obtained from the interface &#x60;/lemon8/app/fetch_post_detail&#x60; - offset: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the offset returned by the last request is used for subsequent requests. ### Return: - Comments list  # [示例/Example] group_id &#x3D; \&quot;7361926875709129222\&quot; item_id &#x3D; \&quot;7361926875709129222\&quot; media_id &#x3D; \&quot;7428056850216862763\&quot;
   * @param groupId 作品的group_id/Post&#39;s group_id (required)
   * @param itemId 作品的item_id/Post&#39;s item_id (required)
   * @param mediaId 作品的media_id/Post&#39;s media_id (required)
   * @param offset 翻页参数/Pagination parameter (optional, default to &quot;0&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet_0 (String groupId, String itemId, String mediaId, String offset) throws ApiException {
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'groupId' when calling fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet_0"));
    }
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'itemId' when calling fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet_0"));
    }
    // verify the required parameter 'mediaId' is set
    if (mediaId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'mediaId' when calling fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_post_comment_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("group_id", groupId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("item_id", itemId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("media_id", mediaId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定作品的信息/Get information of specified post
   * # [中文] ### 用途: - 获取指定作品的信息 ### 参数: - item_id: 作品ID，可以从接口&#x60;/lemon8/app/get_item_id&#x60;获取 ### 返回: - 作品信息  # [English] ### Purpose: - Get information of specified post ### Parameters: - item_id: Post ID, can be obtained from the interface &#x60;/lemon8/app/get_item_id&#x60; ### Return: - Post information  # [示例/Example] item_id &#x3D; \&quot;7361926875709129222\&quot;
   * @param itemId 作品ID/Post ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchPostDetailApiV1Lemon8AppFetchPostDetailGet (String itemId) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'itemId' when calling fetchPostDetailApiV1Lemon8AppFetchPostDetailGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_post_detail";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("item_id", itemId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchPostDetailApiV1Lemon8AppFetchPostDetailGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定作品的信息/Get information of specified post
   * # [中文] ### 用途: - 获取指定作品的信息 ### 参数: - item_id: 作品ID，可以从接口&#x60;/lemon8/app/get_item_id&#x60;获取 ### 返回: - 作品信息  # [English] ### Purpose: - Get information of specified post ### Parameters: - item_id: Post ID, can be obtained from the interface &#x60;/lemon8/app/get_item_id&#x60; ### Return: - Post information  # [示例/Example] item_id &#x3D; \&quot;7361926875709129222\&quot;
   * @param itemId 作品ID/Post ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchPostDetailApiV1Lemon8AppFetchPostDetailGet_0 (String itemId) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'itemId' when calling fetchPostDetailApiV1Lemon8AppFetchPostDetailGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_post_detail";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("item_id", itemId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchPostDetailApiV1Lemon8AppFetchPostDetailGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 搜索接口/Search API
   * # [中文] ### 用途: - 搜索接口 ### 参数: - query: 搜索关键词 - max_cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的&#x60;max_cursor&#x60;进行翻页，可以通过返回结果的&#x60;has_more&#x60;字段判断是否还有更多数据。 - filter_type: 搜索过滤类型，默认为空字符串，可选值如下：     - 空字符串：All（全部，默认使用此参数搜索）     - video：只搜索视频作品     - posts：只搜索文章作品 - order_by: 搜索排序方式，默认为空字符串，可选值如下：     - 空字符串：Relevance（相关度，默认使用此参数排序）     - popular：流行度排序     - recent：从新到旧排序 - search_tab: 搜索类型，默认为&#x60;main&#x60;，可选值如下：     - main：APP中显示为 &#x60;Top&#x60;（综合搜索，默认使用此参数搜索）     - user：APP中显示为 &#x60;Accounts&#x60; （搜索用户账号）     - hashtag：APP中显示为 &#x60;Hashtags&#x60;（搜索话题）     - article：APP中显示为 &#x60;Posts&#x60;（搜索文章） ### 返回: - 搜索结果  # [English] ### Purpose: - Search API ### Parameters: - query: Search keyword - max_cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the &#x60;max_cursor&#x60; returned by the last request is used for subsequent requests. You can judge whether there is more data by the &#x60;has_more&#x60; field in the return result. - filter_type: Search filter type, default is an empty string, optional values are as follows:     - Empty string: All (default using this parameter to search)     - video: Search only video     - posts: Search only posts - order_by: Search sort type, default is an empty string, optional values are as follows:     - Empty string: Relevance (default using this parameter to sort)     - popular: Sort by popularity     - recent: Sort from new to old - search_tab: Search type, default is &#x60;main&#x60;, optional values are as follows:     - main: Display as &#x60;Top&#x60; in the APP (comprehensive search, default using this parameter to search)     - user: Display as &#x60;Accounts&#x60; in the APP (search user accounts)     - hashtag: Display as &#x60;Hashtags&#x60; in the APP (search hashtags)     - article: Display as &#x60;Posts&#x60; in the APP (search articles) ### Return: - Search results  # [示例/Example] query &#x3D; \&quot;lemon8\&quot; max_cursor &#x3D; \&quot;\&quot; filter_type &#x3D; \&quot;\&quot; order_by &#x3D; \&quot;\&quot; search_tab &#x3D; \&quot;main\&quot;
   * @param query 搜索关键词/Search keyword (required)
   * @param maxCursor 翻页参数/Pagination parameter (optional, default to &quot;&quot;)
   * @param filterType 搜索过滤类型/Search filter type (optional, default to &quot;&quot;)
   * @param orderBy 搜索排序方式/Search sort type (optional, default to &quot;&quot;)
   * @param searchTab 搜索类型/Search type (optional, default to &quot;main&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSearchApiV1Lemon8AppFetchSearchGet (String query, String maxCursor, String filterType, String orderBy, String searchTab) throws ApiException {
    // verify the required parameter 'query' is set
    if (query == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'query' when calling fetchSearchApiV1Lemon8AppFetchSearchGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_search";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("query", query));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_cursor", maxCursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter_type", filterType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_tab", searchTab));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSearchApiV1Lemon8AppFetchSearchGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 搜索接口/Search API
   * # [中文] ### 用途: - 搜索接口 ### 参数: - query: 搜索关键词 - max_cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的&#x60;max_cursor&#x60;进行翻页，可以通过返回结果的&#x60;has_more&#x60;字段判断是否还有更多数据。 - filter_type: 搜索过滤类型，默认为空字符串，可选值如下：     - 空字符串：All（全部，默认使用此参数搜索）     - video：只搜索视频作品     - posts：只搜索文章作品 - order_by: 搜索排序方式，默认为空字符串，可选值如下：     - 空字符串：Relevance（相关度，默认使用此参数排序）     - popular：流行度排序     - recent：从新到旧排序 - search_tab: 搜索类型，默认为&#x60;main&#x60;，可选值如下：     - main：APP中显示为 &#x60;Top&#x60;（综合搜索，默认使用此参数搜索）     - user：APP中显示为 &#x60;Accounts&#x60; （搜索用户账号）     - hashtag：APP中显示为 &#x60;Hashtags&#x60;（搜索话题）     - article：APP中显示为 &#x60;Posts&#x60;（搜索文章） ### 返回: - 搜索结果  # [English] ### Purpose: - Search API ### Parameters: - query: Search keyword - max_cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the &#x60;max_cursor&#x60; returned by the last request is used for subsequent requests. You can judge whether there is more data by the &#x60;has_more&#x60; field in the return result. - filter_type: Search filter type, default is an empty string, optional values are as follows:     - Empty string: All (default using this parameter to search)     - video: Search only video     - posts: Search only posts - order_by: Search sort type, default is an empty string, optional values are as follows:     - Empty string: Relevance (default using this parameter to sort)     - popular: Sort by popularity     - recent: Sort from new to old - search_tab: Search type, default is &#x60;main&#x60;, optional values are as follows:     - main: Display as &#x60;Top&#x60; in the APP (comprehensive search, default using this parameter to search)     - user: Display as &#x60;Accounts&#x60; in the APP (search user accounts)     - hashtag: Display as &#x60;Hashtags&#x60; in the APP (search hashtags)     - article: Display as &#x60;Posts&#x60; in the APP (search articles) ### Return: - Search results  # [示例/Example] query &#x3D; \&quot;lemon8\&quot; max_cursor &#x3D; \&quot;\&quot; filter_type &#x3D; \&quot;\&quot; order_by &#x3D; \&quot;\&quot; search_tab &#x3D; \&quot;main\&quot;
   * @param query 搜索关键词/Search keyword (required)
   * @param maxCursor 翻页参数/Pagination parameter (optional, default to &quot;&quot;)
   * @param filterType 搜索过滤类型/Search filter type (optional, default to &quot;&quot;)
   * @param orderBy 搜索排序方式/Search sort type (optional, default to &quot;&quot;)
   * @param searchTab 搜索类型/Search type (optional, default to &quot;main&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchSearchApiV1Lemon8AppFetchSearchGet_0 (String query, String maxCursor, String filterType, String orderBy, String searchTab) throws ApiException {
    // verify the required parameter 'query' is set
    if (query == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'query' when calling fetchSearchApiV1Lemon8AppFetchSearchGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_search";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("query", query));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_cursor", maxCursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("filter_type", filterType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("order_by", orderBy));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("search_tab", searchTab));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchSearchApiV1Lemon8AppFetchSearchGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取话题信息/Get topic information
   * # [中文] ### 用途: - 获取话题信息 ### 参数: - forum_id: 话题ID，可以从下面的接口获取     - 获取指定作品的信息：&#x60;/lemon8/app/fetch_post_detail&#x60;     - 获取发现页的 Editor&#39;s Picks：&#x60;/lemon8/app/fetch_discover_tab_information_tabs&#x60;     - 通过接口搜索 Hashtag：&#x60;/lemon8/app/fetch_search?search_tab&#x3D;hashtag&amp;keyword&#x3D;lemon8&#x60; ### 返回: - 话题信息  # [English] ### Purpose: - Get topic information ### Parameters: - forum_id: Topic ID, can be obtained from the following interfaces     - Get information of specified post: &#x60;/lemon8/app/fetch_post_detail&#x60;     - Get Editor&#39;s Picks of discover page: &#x60;/lemon8/app/fetch_discover_tab_information_tabs&#x60;     - Search Hashtag through interface: &#x60;/lemon8/app/fetch_search?search_tab&#x3D;hashtag&amp;keyword&#x3D;lemon8&#x60; ### Return: - Topic information  # [示例/Example] forum_id &#x3D; \&quot;7174447913778593798\&quot;
   * @param forumId 话题ID/Topic ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet (String forumId) throws ApiException {
    // verify the required parameter 'forumId' is set
    if (forumId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'forumId' when calling fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_topic_info";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("forum_id", forumId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取话题信息/Get topic information
   * # [中文] ### 用途: - 获取话题信息 ### 参数: - forum_id: 话题ID，可以从下面的接口获取     - 获取指定作品的信息：&#x60;/lemon8/app/fetch_post_detail&#x60;     - 获取发现页的 Editor&#39;s Picks：&#x60;/lemon8/app/fetch_discover_tab_information_tabs&#x60;     - 通过接口搜索 Hashtag：&#x60;/lemon8/app/fetch_search?search_tab&#x3D;hashtag&amp;keyword&#x3D;lemon8&#x60; ### 返回: - 话题信息  # [English] ### Purpose: - Get topic information ### Parameters: - forum_id: Topic ID, can be obtained from the following interfaces     - Get information of specified post: &#x60;/lemon8/app/fetch_post_detail&#x60;     - Get Editor&#39;s Picks of discover page: &#x60;/lemon8/app/fetch_discover_tab_information_tabs&#x60;     - Search Hashtag through interface: &#x60;/lemon8/app/fetch_search?search_tab&#x3D;hashtag&amp;keyword&#x3D;lemon8&#x60; ### Return: - Topic information  # [示例/Example] forum_id &#x3D; \&quot;7174447913778593798\&quot;
   * @param forumId 话题ID/Topic ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet_0 (String forumId) throws ApiException {
    // verify the required parameter 'forumId' is set
    if (forumId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'forumId' when calling fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_topic_info";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("forum_id", forumId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取话题作品列表/Get topic post list
   * # [中文] ### 用途: - 获取话题作品列表 ### 参数: - category: 话题分类 ID，可以从接口&#x60;/lemon8/app/fetch_topic_info&#x60;获取 - max_behot_time: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的max_behot_time进行翻页。 - category_parameter: 分类参数ID，可以从接口&#x60;/lemon8/app/fetch_topic_info&#x60;获取 - hashtag_name: Hashtag名称，可以从接口&#x60;/lemon8/app/fetch_topic_info&#x60;获取 - sort_type: 排序方式，0为默认排序，当前只支持使用默认排序，请不要传入其他值。 ### 返回: - 作品列表  # [English] ### Purpose: - Get topic post list ### Parameters: - category: Topic category ID, can be obtained from the interface &#x60;/lemon8/app/fetch_topic_info&#x60; - max_behot_time: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the max_behot_time returned by the last request is used for subsequent requests. - category_parameter: Category parameter ID, can be obtained from the interface &#x60;/lemon8/app/fetch_topic_info&#x60; - hashtag_name: Hashtag name, can be obtained from the interface &#x60;/lemon8/app/fetch_topic_info&#x60; - sort_type: Sort type, 0 for default sort, currently only support default sort, please do not pass other values. ### Return: - Post list  # [示例/Example] category &#x3D; \&quot;590\&quot; max_behot_time &#x3D; \&quot;\&quot; category_parameter &#x3D; \&quot;7174447913778593798\&quot; hashtag_name &#x3D; \&quot;lemon8christmas\&quot; sort_type &#x3D; \&quot;0\&quot;
   * @param category 话题分类 ID/Topic category ID (required)
   * @param categoryParameter 分类参数/Category parameter (required)
   * @param hashtagName Hashtag名称/Hashtag name (required)
   * @param maxBehotTime 翻页参数/Pagination parameter (optional, default to &quot;&quot;)
   * @param sortType 排序方式/Sort type (optional, default to &quot;0&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet (String category, String categoryParameter, String hashtagName, String maxBehotTime, String sortType) throws ApiException {
    // verify the required parameter 'category' is set
    if (category == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'category' when calling fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet"));
    }
    // verify the required parameter 'categoryParameter' is set
    if (categoryParameter == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'categoryParameter' when calling fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet"));
    }
    // verify the required parameter 'hashtagName' is set
    if (hashtagName == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'hashtagName' when calling fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_topic_post_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("category", category));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_behot_time", maxBehotTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("category_parameter", categoryParameter));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("hashtag_name", hashtagName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort_type", sortType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取话题作品列表/Get topic post list
   * # [中文] ### 用途: - 获取话题作品列表 ### 参数: - category: 话题分类 ID，可以从接口&#x60;/lemon8/app/fetch_topic_info&#x60;获取 - max_behot_time: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的max_behot_time进行翻页。 - category_parameter: 分类参数ID，可以从接口&#x60;/lemon8/app/fetch_topic_info&#x60;获取 - hashtag_name: Hashtag名称，可以从接口&#x60;/lemon8/app/fetch_topic_info&#x60;获取 - sort_type: 排序方式，0为默认排序，当前只支持使用默认排序，请不要传入其他值。 ### 返回: - 作品列表  # [English] ### Purpose: - Get topic post list ### Parameters: - category: Topic category ID, can be obtained from the interface &#x60;/lemon8/app/fetch_topic_info&#x60; - max_behot_time: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the max_behot_time returned by the last request is used for subsequent requests. - category_parameter: Category parameter ID, can be obtained from the interface &#x60;/lemon8/app/fetch_topic_info&#x60; - hashtag_name: Hashtag name, can be obtained from the interface &#x60;/lemon8/app/fetch_topic_info&#x60; - sort_type: Sort type, 0 for default sort, currently only support default sort, please do not pass other values. ### Return: - Post list  # [示例/Example] category &#x3D; \&quot;590\&quot; max_behot_time &#x3D; \&quot;\&quot; category_parameter &#x3D; \&quot;7174447913778593798\&quot; hashtag_name &#x3D; \&quot;lemon8christmas\&quot; sort_type &#x3D; \&quot;0\&quot;
   * @param category 话题分类 ID/Topic category ID (required)
   * @param categoryParameter 分类参数/Category parameter (required)
   * @param hashtagName Hashtag名称/Hashtag name (required)
   * @param maxBehotTime 翻页参数/Pagination parameter (optional, default to &quot;&quot;)
   * @param sortType 排序方式/Sort type (optional, default to &quot;0&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet_0 (String category, String categoryParameter, String hashtagName, String maxBehotTime, String sortType) throws ApiException {
    // verify the required parameter 'category' is set
    if (category == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'category' when calling fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet_0"));
    }
    // verify the required parameter 'categoryParameter' is set
    if (categoryParameter == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'categoryParameter' when calling fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet_0"));
    }
    // verify the required parameter 'hashtagName' is set
    if (hashtagName == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'hashtagName' when calling fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_topic_post_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("category", category));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_behot_time", maxBehotTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("category_parameter", categoryParameter));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("hashtag_name", hashtagName));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort_type", sortType));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定用户的粉丝列表/Get fans list of specified user
   * # [中文] ### 用途: - 获取指定用户的粉丝列表 ### 参数: - user_id: 用户ID，可以从接口&#x60;/lemon8/app/get_user_id&#x60;获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get fans list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface &#x60;/lemon8/app/get_user_id&#x60; - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Fans list  # [示例/Example] user_id &#x3D; \&quot;7428056850216862763\&quot;
   * @param userId 用户ID/User ID (required)
   * @param cursor 翻页参数/Pagination parameter (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet (String userId, String cursor) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_user_follower_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定用户的粉丝列表/Get fans list of specified user
   * # [中文] ### 用途: - 获取指定用户的粉丝列表 ### 参数: - user_id: 用户ID，可以从接口&#x60;/lemon8/app/get_user_id&#x60;获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get fans list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface &#x60;/lemon8/app/get_user_id&#x60; - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Fans list  # [示例/Example] user_id &#x3D; \&quot;7428056850216862763\&quot;
   * @param userId 用户ID/User ID (required)
   * @param cursor 翻页参数/Pagination parameter (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet_0 (String userId, String cursor) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_user_follower_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定用户的关注列表/Get following list of specified user
   * # [中文] ### 用途: - 获取指定用户的关注列表 ### 参数: - user_id: 用户ID，可以从接口&#x60;/lemon8/app/get_user_id&#x60;获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 关注列表  # [English] ### Purpose: - Get following list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface &#x60;/lemon8/app/get_user_id&#x60; - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Following list  # [示例/Example] user_id &#x3D; \&quot;7428056850216862763\&quot;
   * @param userId 用户ID/User ID (required)
   * @param cursor 翻页参数/Pagination parameter (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet (String userId, String cursor) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_user_following_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定用户的关注列表/Get following list of specified user
   * # [中文] ### 用途: - 获取指定用户的关注列表 ### 参数: - user_id: 用户ID，可以从接口&#x60;/lemon8/app/get_user_id&#x60;获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 关注列表  # [English] ### Purpose: - Get following list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface &#x60;/lemon8/app/get_user_id&#x60; - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Following list  # [示例/Example] user_id &#x3D; \&quot;7428056850216862763\&quot;
   * @param userId 用户ID/User ID (required)
   * @param cursor 翻页参数/Pagination parameter (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet_0 (String userId, String cursor) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_user_following_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 通过分享链接获取作品ID/Get post ID through sharing link
   * # [中文] ### 用途: - 通过分享链接获取作品ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID  # [English] ### Purpose: - Get post ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post ID  # [示例/Example] share_text &#x3D; \&quot;https://www.lemon8-app.com/@deathlabs_/7445613324903006766\&quot; share_text &#x3D; \&quot;https://v.lemon8-app.com/al/OghwFTppx\&quot;
   * @param shareText 分享链接/Share link (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getItemIdApiV1Lemon8AppGetItemIdGet (String shareText) throws ApiException {
    // verify the required parameter 'shareText' is set
    if (shareText == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'shareText' when calling getItemIdApiV1Lemon8AppGetItemIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/get_item_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_text", shareText));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getItemIdApiV1Lemon8AppGetItemIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 通过分享链接获取作品ID/Get post ID through sharing link
   * # [中文] ### 用途: - 通过分享链接获取作品ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID  # [English] ### Purpose: - Get post ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post ID  # [示例/Example] share_text &#x3D; \&quot;https://www.lemon8-app.com/@deathlabs_/7445613324903006766\&quot; share_text &#x3D; \&quot;https://v.lemon8-app.com/al/OghwFTppx\&quot;
   * @param shareText 分享链接/Share link (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getItemIdApiV1Lemon8AppGetItemIdGet_0 (String shareText) throws ApiException {
    // verify the required parameter 'shareText' is set
    if (shareText == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'shareText' when calling getItemIdApiV1Lemon8AppGetItemIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/get_item_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_text", shareText));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getItemIdApiV1Lemon8AppGetItemIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 通过分享链接批量获取作品ID/Get post IDs in batch through sharing links
   * # [中文] ### 用途: - 通过分享链接批量获取作品ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID列表  # [English] ### Purpose: - Get post IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post IDs list  # [示例/Example] share_texts &#x3D; [     \&quot;https://www.lemon8-app.com/@deathlabs_/7445613324903006766\&quot;,     \&quot;https://v.lemon8-app.com/al/OghwFTppx\&quot; ]
   * @param requestBody  (optional
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getItemIdsApiV1Lemon8AppGetItemIdsPost (List<String> requestBody) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/get_item_ids";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getItemIdsApiV1Lemon8AppGetItemIdsPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 通过分享链接批量获取作品ID/Get post IDs in batch through sharing links
   * # [中文] ### 用途: - 通过分享链接批量获取作品ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID列表  # [English] ### Purpose: - Get post IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post IDs list  # [示例/Example] share_texts &#x3D; [     \&quot;https://www.lemon8-app.com/@deathlabs_/7445613324903006766\&quot;,     \&quot;https://v.lemon8-app.com/al/OghwFTppx\&quot; ]
   * @param requestBody  (optional
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getItemIdsApiV1Lemon8AppGetItemIdsPost_0 (List<String> requestBody) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/get_item_ids";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getItemIdsApiV1Lemon8AppGetItemIdsPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 通过分享链接获取用户ID/Get user ID through sharing link
   * # [中文] ### 用途: - 通过分享链接获取用户ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID  # [English] ### Purpose: - Get user ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User ID  # [示例/Example] share_text &#x3D; \&quot;https://www.lemon8-app.com/lemon8cars?region&#x3D;us\&quot; share_text &#x3D; \&quot;https://v.lemon8-app.com/al/OgZrsUppx\&quot;
   * @param shareText 分享链接/Share link (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getUserIdApiV1Lemon8AppGetUserIdGet (String shareText) throws ApiException {
    // verify the required parameter 'shareText' is set
    if (shareText == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'shareText' when calling getUserIdApiV1Lemon8AppGetUserIdGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/get_user_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_text", shareText));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getUserIdApiV1Lemon8AppGetUserIdGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 通过分享链接获取用户ID/Get user ID through sharing link
   * # [中文] ### 用途: - 通过分享链接获取用户ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID  # [English] ### Purpose: - Get user ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User ID  # [示例/Example] share_text &#x3D; \&quot;https://www.lemon8-app.com/lemon8cars?region&#x3D;us\&quot; share_text &#x3D; \&quot;https://v.lemon8-app.com/al/OgZrsUppx\&quot;
   * @param shareText 分享链接/Share link (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getUserIdApiV1Lemon8AppGetUserIdGet_0 (String shareText) throws ApiException {
    // verify the required parameter 'shareText' is set
    if (shareText == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'shareText' when calling getUserIdApiV1Lemon8AppGetUserIdGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/get_user_id";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_text", shareText));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getUserIdApiV1Lemon8AppGetUserIdGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 通过分享链接批量获取用户ID/Get user IDs in batch through sharing links
   * # [中文] ### 用途: - 通过分享链接批量获取用户ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID列表  # [English] ### Purpose: - Get user IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User IDs list  # [示例/Example] share_texts &#x3D; [     \&quot;https://www.lemon8-app.com/lemon8cars?region&#x3D;us\&quot;,     \&quot;https://v.lemon8-app.com/al/OgZrsUppx\&quot; ]
   * @param requestBody  (optional
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getUserIdsApiV1Lemon8AppGetUserIdsPost (List<String> requestBody) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/get_user_ids";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getUserIdsApiV1Lemon8AppGetUserIdsPost call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 通过分享链接批量获取用户ID/Get user IDs in batch through sharing links
   * # [中文] ### 用途: - 通过分享链接批量获取用户ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID列表  # [English] ### Purpose: - Get user IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User IDs list  # [示例/Example] share_texts &#x3D; [     \&quot;https://www.lemon8-app.com/lemon8cars?region&#x3D;us\&quot;,     \&quot;https://v.lemon8-app.com/al/OgZrsUppx\&quot; ]
   * @param requestBody  (optional
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> getUserIdsApiV1Lemon8AppGetUserIdsPost_0 (List<String> requestBody) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/get_user_ids";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "getUserIdsApiV1Lemon8AppGetUserIdsPost_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
    } catch (IOException e) {
      return CompletableFuture.failedFuture(new ApiException(e));
    }
  }
  /**
   * 获取指定用户的信息/Get information of specified user
   * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - user_id: 用户ID，可以从接口&#x60;/lemon8/app/get_user_id&#x60;获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - user_id: User ID, can be obtained from the interface &#x60;/lemon8/app/get_user_id&#x60; ### Return: - User information  # [示例/Example] user_id &#x3D; \&quot;7217844966059656197
   * @param userId 用户ID/User ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> handlerUserProfileApiV1Lemon8AppFetchUserProfileGet (String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling handlerUserProfileApiV1Lemon8AppFetchUserProfileGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_user_profile";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "handlerUserProfileApiV1Lemon8AppFetchUserProfileGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定用户的信息/Get information of specified user
   * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - user_id: 用户ID，可以从接口&#x60;/lemon8/app/get_user_id&#x60;获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - user_id: User ID, can be obtained from the interface &#x60;/lemon8/app/get_user_id&#x60; ### Return: - User information  # [示例/Example] user_id &#x3D; \&quot;7217844966059656197
   * @param userId 用户ID/User ID (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> handlerUserProfileApiV1Lemon8AppFetchUserProfileGet_0 (String userId) throws ApiException {
    // verify the required parameter 'userId' is set
    if (userId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'userId' when calling handlerUserProfileApiV1Lemon8AppFetchUserProfileGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/lemon8/app/fetch_user_profile";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_id", userId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "handlerUserProfileApiV1Lemon8AppFetchUserProfileGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
}
