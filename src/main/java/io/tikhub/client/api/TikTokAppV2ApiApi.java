/*
 * TikHub.io - Your Ultimate Social Media Data & API Marketplace
 * High-performance asynchronous Douyin(抖音) TikTok Xiaohongshu(小红书) Kuaishou(快手) Weibo(微博) Instagram YouTube(油管) Twitter(X) Captcha Solver(验证码解决器) Temp Mail(临时邮箱) API(接口).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.tikhub.client.api;

import io.tikhub.client.ApiClient;
import io.tikhub.client.ApiException;
import io.tikhub.client.Pair;

import org.openapitools.client.model.HttpValidationError;
import org.openapitools.client.model.ResponseModel;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.function.Consumer;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;

import java.util.concurrent.CompletableFuture;


public class TikTokAppV2ApiApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  
  public TikTokAppV2ApiApi() {
    this(new ApiClient());
  }

  public TikTokAppV2ApiApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
  }

  /**
   * 检测直播间是否在线/Check if live room is online
   * # [中文] ### 用途: - 检测直播间是否在线 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot;
   * @param roomId 直播间id/Live room id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet (String roomId) throws ApiException {
    // verify the required parameter 'roomId' is set
    if (roomId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'roomId' when calling checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/check_live_room_online";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("room_id", roomId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 检测直播间是否在线/Check if live room is online
   * # [中文] ### 用途: - 检测直播间是否在线 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot;
   * @param roomId 直播间id/Live room id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet_0 (String roomId) throws ApiException {
    // verify the required parameter 'roomId' is set
    if (roomId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'roomId' when calling checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/check_live_room_online";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("room_id", roomId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_general_search_result） | Get comprehensive search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_general_search_result)
   * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @param sortType 排序类型/Sort type (optional)
   * @param publishTime 发布时间/Publish time (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<ResponseModel> fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet (String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_general_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort_type", sortType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("publish_time", publishTime));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_general_search_result） | Get comprehensive search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_general_search_result)
   * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @param sortType 排序类型/Sort type (optional)
   * @param publishTime 发布时间/Publish time (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<ResponseModel> fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet_0 (String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_general_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort_type", sortType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("publish_time", publishTime));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定话题的详情数据/Get details of specified hashtag
   * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot;
   * @param chId 话题id/Hashtag id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet (String chId) throws ApiException {
    // verify the required parameter 'chId' is set
    if (chId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'chId' when calling fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_hashtag_detail";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ch_id", chId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定话题的详情数据/Get details of specified hashtag
   * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot;
   * @param chId 话题id/Hashtag id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet_0 (String chId) throws ApiException {
    // verify the required parameter 'chId' is set
    if (chId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'chId' when calling fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_hashtag_detail";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ch_id", chId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_hashtag_search_result） | Get hashtag search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_hashtag_search_result)
   * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<ResponseModel> fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet (String keyword, Integer offset, Integer count) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_hashtag_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_hashtag_search_result） | Get hashtag search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_hashtag_search_result)
   * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<ResponseModel> fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet_0 (String keyword, Integer offset, Integer count) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_hashtag_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定话题的作品数据/Get video list of specified hashtag
   * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot; cursor &#x3D; 0 sort_type &#x3D; 0 count &#x3D; 10
   * @param chId 话题id/Hashtag id (required)
   * @param cursor 游标/Cursor (optional, default to 0)
   * @param count 数量/Number (optional, default to 10)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet (String chId, Integer cursor, Integer count) throws ApiException {
    // verify the required parameter 'chId' is set
    if (chId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'chId' when calling fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_hashtag_video_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ch_id", chId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定话题的作品数据/Get video list of specified hashtag
   * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id &#x3D; \&quot;7551\&quot; cursor &#x3D; 0 sort_type &#x3D; 0 count &#x3D; 10
   * @param chId 话题id/Hashtag id (required)
   * @param cursor 游标/Cursor (optional, default to 0)
   * @param count 数量/Number (optional, default to 10)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet_0 (String chId, Integer cursor, Integer count) throws ApiException {
    // verify the required parameter 'chId' is set
    if (chId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'chId' when calling fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_hashtag_video_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("ch_id", chId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取主页视频推荐数据/Get home feed(recommend) video data
   * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_home_feed";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取主页视频推荐数据/Get home feed(recommend) video data
   * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet_0 () throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_home_feed";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取直播间排行榜数据/Get live room ranking list
   * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot; anchor_id &#x3D; \&quot;7222941468722758702\&quot;
   * @param roomId 直播间id/Live room id (required)
   * @param anchorId 主播id/Anchor id (optional, default to &quot;7222941468722758702&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet (String roomId, String anchorId) throws ApiException {
    // verify the required parameter 'roomId' is set
    if (roomId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'roomId' when calling fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_live_ranking_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("room_id", roomId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("anchor_id", anchorId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取直播间排行榜数据/Get live room ranking list
   * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id &#x3D; \&quot;7358603858249009962\&quot; anchor_id &#x3D; \&quot;7222941468722758702\&quot;
   * @param roomId 直播间id/Live room id (required)
   * @param anchorId 主播id/Anchor id (optional, default to &quot;7222941468722758702&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet_0 (String roomId, String anchorId) throws ApiException {
    // verify the required parameter 'roomId' is set
    if (roomId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'roomId' when calling fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_live_ranking_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("room_id", roomId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("anchor_id", anchorId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_live_search_result） | Get live search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_live_search_result)
   * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<ResponseModel> fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet (String keyword, Integer offset, Integer count) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_live_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_live_search_result） | Get live search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_live_search_result)
   * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<ResponseModel> fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet_0 (String keyword, Integer offset, Integer count) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_live_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定音乐的详情数据/Get details of specified music
   * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot;
   * @param musicId 音乐id/Music id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet (String musicId) throws ApiException {
    // verify the required parameter 'musicId' is set
    if (musicId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'musicId' when calling fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_music_detail";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("music_id", musicId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定音乐的详情数据/Get details of specified music
   * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot;
   * @param musicId 音乐id/Music id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet_0 (String musicId) throws ApiException {
    // verify the required parameter 'musicId' is set
    if (musicId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'musicId' when calling fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_music_detail";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("music_id", musicId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_music_search_result） | Get music search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_music_search_result)
   * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<ResponseModel> fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet (String keyword, Integer offset, Integer count) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_music_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_music_search_result） | Get music search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_music_search_result)
   * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<ResponseModel> fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet_0 (String keyword, Integer offset, Integer count) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_music_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定音乐的视频列表数据/Get video list of specified music
   * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot; cursor &#x3D; 0 count &#x3D; 10
   * @param musicId 音乐id/Music id (required)
   * @param cursor 游标/Cursor (optional, default to 0)
   * @param count 数量/Number (optional, default to 10)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet (String musicId, Integer cursor, Integer count) throws ApiException {
    // verify the required parameter 'musicId' is set
    if (musicId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'musicId' when calling fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_music_video_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("music_id", musicId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定音乐的视频列表数据/Get video list of specified music
   * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id &#x3D; \&quot;6943027371519772674\&quot; cursor &#x3D; 0 count &#x3D; 10
   * @param musicId 音乐id/Music id (required)
   * @param cursor 游标/Cursor (optional, default to 0)
   * @param count 数量/Number (optional, default to 10)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet_0 (String musicId, Integer cursor, Integer count) throws ApiException {
    // verify the required parameter 'musicId' is set
    if (musicId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'musicId' when calling fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_music_video_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("music_id", musicId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单个作品数据/Get single video data
   * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7350810998023949599\&quot;
   * @param awemeId 作品id/Video id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet (String awemeId) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_one_video";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单个作品数据/Get single video data
   * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id &#x3D; \&quot;7350810998023949599\&quot;
   * @param awemeId 作品id/Video id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet_0 (String awemeId) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_one_video";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据分享链接获取单个作品数据/Get single video data by sharing link
   * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url &#x3D; \&quot;https://www.tiktok.com/t/ZTFNEj8Hk/\&quot;
   * @param shareUrl 分享链接/Share link (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet (String shareUrl) throws ApiException {
    // verify the required parameter 'shareUrl' is set
    if (shareUrl == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'shareUrl' when calling fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_one_video_by_share_url";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_url", shareUrl));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 根据分享链接获取单个作品数据/Get single video data by sharing link
   * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url &#x3D; \&quot;https://www.tiktok.com/t/ZTFNEj8Hk/\&quot;
   * @param shareUrl 分享链接/Share link (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet_0 (String shareUrl) throws ApiException {
    // verify the required parameter 'shareUrl' is set
    if (shareUrl == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'shareUrl' when calling fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_one_video_by_share_url";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("share_url", shareUrl));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定用户的粉丝列表数据/Get follower list of specified user
   * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 40 min_time &#x3D; 1719570100 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
   * @param secUserId 用户sec_user_id/User sec_user_id (required)
   * @param count 数量/Number (optional, default to 20)
   * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
   * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet (String secUserId, Integer count, Integer minTime, String pageToken) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_user_follower_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("min_time", minTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定用户的粉丝列表数据/Get follower list of specified user
   * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 40 min_time &#x3D; 1719570100 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
   * @param secUserId 用户sec_user_id/User sec_user_id (required)
   * @param count 数量/Number (optional, default to 20)
   * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
   * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet_0 (String secUserId, Integer count, Integer minTime, String pageToken) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_user_follower_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("min_time", minTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定用户的关注列表数据/Get following list of specified user
   * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 20 min_time &#x3D; 1639642146 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
   * @param secUserId 用户sec_user_id/User sec_user_id (required)
   * @param count 数量/Number (optional, default to 20)
   * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
   * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet (String secUserId, Integer count, Integer minTime, String pageToken) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_user_following_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("min_time", minTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定用户的关注列表数据/Get following list of specified user
   * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\&quot;\&quot;，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \&quot;\&quot; for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user &#x3D; \&quot;MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\&quot; count &#x3D; 20 min_time &#x3D; 1639642146 page_token &#x3D; \&quot;eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0&#x3D;\&quot;
   * @param secUserId 用户sec_user_id/User sec_user_id (required)
   * @param count 数量/Number (optional, default to 20)
   * @param minTime 最小时间，用于翻页/Minimum time for paging (optional, default to 0)
   * @param pageToken 翻页token/Page token (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet_0 (String secUserId, Integer count, Integer minTime, String pageToken) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_user_following_list";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("min_time", minTime));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("page_token", pageToken));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户喜欢作品数据/Get user like video data
   * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
   * @param secUserId 用户sec_user_id/User sec_user_id (required)
   * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
   * @param counts 每页数量/Number per page (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet (String secUserId, Integer maxCursor, Integer counts) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_user_like_videos";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_cursor", maxCursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("counts", counts));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户喜欢作品数据/Get user like video data
   * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
   * @param secUserId 用户sec_user_id/User sec_user_id (required)
   * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
   * @param counts 每页数量/Number per page (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet_0 (String secUserId, Integer maxCursor, Integer counts) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_user_like_videos";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_cursor", maxCursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("counts", counts));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户主页作品数据/Get user homepage video data
   * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
   * @param secUserId 用户sec_user_id/User sec_user_id (required)
   * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
   * @param count 每页数量/Number per page (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet (String secUserId, Integer maxCursor, Integer count) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_user_post_videos";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_cursor", maxCursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取用户主页作品数据/Get user homepage video data
   * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\&quot; max_cursor &#x3D; 0 counts &#x3D; 20
   * @param secUserId 用户sec_user_id/User sec_user_id (required)
   * @param maxCursor 最大游标/Maximum cursor (optional, default to 0)
   * @param count 每页数量/Number per page (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet_0 (String secUserId, Integer maxCursor, Integer count) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_user_post_videos";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("max_cursor", maxCursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_user_search_result） | Get user search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_user_search_result)
   * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K &#x3D; 0-1K，     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K，     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K，     - ONE_H_K_PLUS &#x3D; 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED &#x3D; 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME &#x3D; 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K &#x3D; 0-1K,     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K,     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K,     - ONE_H_K_PLUS &#x3D; 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED &#x3D; Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME &#x3D; Sort by username relevance ### Return: - User search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20 user_search_follower_count &#x3D; \&quot;\&quot; user_search_profile_type &#x3D; \&quot;\&quot; user_search_other_pref &#x3D; \&quot;\&quot;
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @param userSearchFollowerCount 根据粉丝数排序/Sort by number of followers (optional, default to &quot;&quot;)
   * @param userSearchProfileType 根据账号类型排序/Sort by account type (optional, default to &quot;&quot;)
   * @param userSearchOtherPref 根据其他偏好排序/Sort by other preferences (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<ResponseModel> fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet (String keyword, Integer offset, Integer count, String userSearchFollowerCount, String userSearchProfileType, String userSearchOtherPref) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_user_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_search_follower_count", userSearchFollowerCount));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_search_profile_type", userSearchProfileType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_search_other_pref", userSearchOtherPref));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_user_search_result） | Get user search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_user_search_result)
   * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K &#x3D; 0-1K，     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K，     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K，     - ONE_H_K_PLUS &#x3D; 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED &#x3D; 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME &#x3D; 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K &#x3D; 0-1K,     - ONE_K_TO_TEN_K-1K &#x3D; 1K-10K,     - TEN_K_TO_ONE_H_K &#x3D; 10K-100K,     - ONE_H_K_PLUS &#x3D; 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED &#x3D; Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME &#x3D; Sort by username relevance ### Return: - User search results  # [示例/Example] keyword &#x3D; \&quot;Cat\&quot; offset &#x3D; 0 count &#x3D; 20 user_search_follower_count &#x3D; \&quot;\&quot; user_search_profile_type &#x3D; \&quot;\&quot; user_search_other_pref &#x3D; \&quot;\&quot;
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @param userSearchFollowerCount 根据粉丝数排序/Sort by number of followers (optional, default to &quot;&quot;)
   * @param userSearchProfileType 根据账号类型排序/Sort by account type (optional, default to &quot;&quot;)
   * @param userSearchOtherPref 根据其他偏好排序/Sort by other preferences (optional, default to &quot;&quot;)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<ResponseModel> fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet_0 (String keyword, Integer offset, Integer count, String userSearchFollowerCount, String userSearchProfileType, String userSearchOtherPref) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_user_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_search_follower_count", userSearchFollowerCount));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_search_profile_type", userSearchProfileType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("user_search_other_pref", userSearchOtherPref));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单个视频评论数据/Get single video comments data
   * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; cursor &#x3D; 0 count &#x3D; 20
   * @param awemeId 作品id/Video id (required)
   * @param cursor 游标/Cursor (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet (String awemeId, Integer cursor, Integer count) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_video_comments";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取单个视频评论数据/Get single video comments data
   * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; cursor &#x3D; 0 count &#x3D; 20
   * @param awemeId 作品id/Video id (required)
   * @param cursor 游标/Cursor (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet_0 (String awemeId, Integer cursor, Integer count) throws ApiException {
    // verify the required parameter 'awemeId' is set
    if (awemeId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'awemeId' when calling fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_video_comments";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("aweme_id", awemeId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定视频的评论回复数据/Get comment replies data of specified video
   * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; comment_id &#x3D; \&quot;7327061675382260482\&quot; cursor &#x3D; 0 count &#x3D; 20
   * @param itemId 作品id/Video id (required)
   * @param commentId 评论id/Comment id (required)
   * @param cursor 游标/Cursor (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet (String itemId, String commentId, Integer cursor, Integer count) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'itemId' when calling fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet"));
    }
    // verify the required parameter 'commentId' is set
    if (commentId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'commentId' when calling fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_video_comment_replies";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("item_id", itemId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("comment_id", commentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定视频的评论回复数据/Get comment replies data of specified video
   * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id &#x3D; \&quot;7326156045968067873\&quot; comment_id &#x3D; \&quot;7327061675382260482\&quot; cursor &#x3D; 0 count &#x3D; 20
   * @param itemId 作品id/Video id (required)
   * @param commentId 评论id/Comment id (required)
   * @param cursor 游标/Cursor (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet_0 (String itemId, String commentId, Integer cursor, Integer count) throws ApiException {
    // verify the required parameter 'itemId' is set
    if (itemId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'itemId' when calling fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet_0"));
    }
    // verify the required parameter 'commentId' is set
    if (commentId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'commentId' when calling fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_video_comment_replies";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("item_id", itemId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("comment_id", commentId));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("cursor", cursor));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_video_search_result） | Get video search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_video_search_result)
   * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @param sortType 排序类型/Sort type (optional)
   * @param publishTime 发布时间/Publish time (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<ResponseModel> fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet (String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_video_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort_type", sortType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("publish_time", publishTime));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_video_search_result） | Get video search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_video_search_result)
   * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword &#x3D; \&quot;中华娘\&quot; offset &#x3D; 0 count &#x3D; 20 sort_type &#x3D; 0 publish_time &#x3D; 0
   * @param keyword 关键词/Keyword (required)
   * @param offset 偏移量/Offset (optional, default to 0)
   * @param count 数量/Number (optional, default to 20)
   * @param sortType 排序类型/Sort type (optional)
   * @param publishTime 发布时间/Publish time (optional)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   * @deprecated
   */
  @Deprecated
  public CompletableFuture<ResponseModel> fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet_0 (String keyword, Integer offset, Integer count, Integer sortType, Integer publishTime) throws ApiException {
    // verify the required parameter 'keyword' is set
    if (keyword == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'keyword' when calling fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/fetch_video_search_result";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("keyword", keyword));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("offset", offset));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("count", count));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sort_type", sortType));
    localVarQueryParams.addAll(ApiClient.parameterToPairs("publish_time", publishTime));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定用户的信息/Get information of specified user
   * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot;
   * @param secUserId 用户sec_user_id/User sec_user_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet (String secUserId) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/handler_user_profile";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
  /**
   * 获取指定用户的信息/Get information of specified user
   * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id &#x3D; \&quot;MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\&quot;
   * @param secUserId 用户sec_user_id/User sec_user_id (required)
   * @return ResponseModel
   * @throws ApiException if fails to make API call
   */
  public CompletableFuture<ResponseModel> handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet_0 (String secUserId) throws ApiException {
    // verify the required parameter 'secUserId' is set
    if (secUserId == null) {
        return CompletableFuture.failedFuture(new ApiException(400, "Missing the required parameter 'secUserId' when calling handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet_0"));
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/api/v1/tiktok/app/v2/handler_user_profile";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("sec_user_id", secUserId));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

      localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
      if (memberVarReadTimeout != null) {
        localVarRequestBuilder.timeout(memberVarReadTimeout);
      }
      if (memberVarInterceptor != null) {
        memberVarInterceptor.accept(localVarRequestBuilder);
      }
      return memberVarHttpClient.sendAsync(
              localVarRequestBuilder.build(),
              HttpResponse.BodyHandlers.ofString()).thenComposeAsync(localVarResponse -> {
          if (localVarResponse.statusCode()/ 100 != 2) {
              return CompletableFuture.failedFuture(new ApiException(localVarResponse.statusCode(),
                  "handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet_0 call received non-success response",
                  localVarResponse.headers(),
                  localVarResponse.body())
              );
          } else {
               try {
                  return CompletableFuture.completedFuture(
                          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<ResponseModel>() {})
                  );
              } catch (IOException e) {
                  return CompletableFuture.failedFuture(new ApiException(e));
              }
          }
      });
  }
}
